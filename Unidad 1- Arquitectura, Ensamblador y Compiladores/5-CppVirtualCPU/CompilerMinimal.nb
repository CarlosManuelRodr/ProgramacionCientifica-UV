(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    400460,       9359]
NotebookOptionsPosition[    389941,       9164]
NotebookOutlinePosition[    390463,       9183]
CellTagsIndexPosition[    390420,       9180]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["PL/0 Compiler", "Title",
 CellChangeTimes->{{3.757707687885583*^9, 3.757707690689005*^9}, {
  3.761426920814851*^9, 3.7614269227724037`*^9}, {3.7639258171423893`*^9, 
  3.7639258183818264`*^9}},ExpressionUUID->"d1ca6f13-3dc9-4753-8e1a-\
6160422fec5d"],

Cell[CellGroupData[{

Cell["Initialization", "Chapter",
 CellChangeTimes->{{3.757707699905423*^9, 
  3.757707702482992*^9}},ExpressionUUID->"a9651e77-d6d2-4a54-9ff9-\
ceba4ac659e9"],

Cell[CellGroupData[{

Cell["Finite state machine", "Section",
 CellChangeTimes->{{3.757707715690061*^9, 3.757707721818841*^9}, {
  3.757707839577127*^9, 
  3.757707842542766*^9}},ExpressionUUID->"21a9500e-0fd4-4842-9564-\
1968489f3e69"],

Cell[CellGroupData[{

Cell["Deterministic finite automaton (DFA)", "Subsection",
 CellChangeTimes->{
  3.761427024295422*^9, {3.761427180364272*^9, 
   3.76142718256389*^9}},ExpressionUUID->"628262ab-3196-47b2-a3ee-\
b1a86753561f"],

Cell[TextData[{
 StyleBox["DFA",
  FontWeight->"Bold"],
 "[",
 StyleBox["name",
  FontSlant->"Italic"],
 ", ",
 StyleBox["transitions",
  FontSlant->"Italic"],
 ", ",
 StyleBox["start",
  FontSlant->"Italic"],
 ", ",
 StyleBox["accept",
  FontSlant->"Italic"],
 ", ",
 StyleBox["stateExpr",
  FontSlant->"Italic"],
 "] create an DFA from a transition list.\n",
 StyleBox["DFATransitions",
  FontWeight->"Bold"],
 "[",
 StyleBox["transitions",
  FontSlant->"Italic"],
 ", ",
 StyleBox["state",
  FontSlant->"Italic"],
 "]\n",
 StyleBox["DFAIterate",
  FontWeight->"Bold"],
 "[",
 StyleBox["transitions",
  FontSlant->"Italic"],
 ", ",
 StyleBox["state",
  FontSlant->"Italic"],
 ", ",
 StyleBox["inputSymbol",
  FontSlant->"Italic"],
 "] get the next step in the computation of the DFA for a inputSymbol.\n",
 StyleBox["DFACompute",
  FontWeight->"Bold"],
 "[",
 StyleBox["dfa",
  FontSlant->"Italic"],
 ", ",
 StyleBox["inputString",
  FontSlant->"Italic"],
 "] compute if input is recognized by ",
 StyleBox["dfa",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["FiniteAutomataPlot",
  FontWeight->"Bold"],
 "[",
 StyleBox["fa",
  FontSlant->"Italic"],
 "] return a plot of the finite automata represented by ",
 StyleBox["fa",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["DFAExecutionPlot",
  FontWeight->"Bold"],
 "[",
 StyleBox["dfa",
  FontSlant->"Italic"],
 ", ",
 StyleBox["inputString",
  FontSlant->"Italic"],
 "] return a dynamic execution plot of the computation performed by ",
 StyleBox["dfa",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.764097594188545*^9, 3.764097614440296*^9}, {
   3.764097681852038*^9, 3.764097738690188*^9}, {3.764097840140697*^9, 
   3.764097868175428*^9}, 3.7640979168066587`*^9, {3.7641031644678288`*^9, 
   3.764103186138259*^9}, {3.7641032444708242`*^9, 3.7641032559546967`*^9}, {
   3.764103288560425*^9, 3.764103328858933*^9}, {3.7641064320373645`*^9, 
   3.7641064322053623`*^9}},ExpressionUUID->"5d898740-d519-4773-977e-\
b27f0c134867"]
}, Open  ]],

Cell[CellGroupData[{

Cell["DFA Implementation", "Subsection",
 CellChangeTimes->{{3.774377685550585*^9, 
  3.7743776984228086`*^9}},ExpressionUUID->"e9fcd7ff-cf41-4af9-aa39-\
7c04f75ab090"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Protect", "[", "\[Epsilon]", "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "\[Epsilon]", " ", "will", " ", "be", " ", "used", " ", "as", " ", "a", 
    " ", "symbol", " ", "to", " ", "denote", " ", "the", " ", "empty", " ", 
    "string"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Transition", "[", 
    RowBox[{"parent_", ",", "child_", ",", "inputSymbol_"}], "]"}], ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Parent\>\"", "\[Rule]", "parent"}], ",", 
     RowBox[{"\"\<Node\>\"", "\[Rule]", "child"}], ",", 
     RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "inputSymbol"}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EmptyTransition", "[", 
    RowBox[{"parent_", ",", "child_"}], "]"}], ":=", 
   RowBox[{"Transition", "[", 
    RowBox[{"parent", ",", "child", ",", "\[Epsilon]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FATransitions", "[", 
    RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{"transitions", ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Parent\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Concatenate", "[", "l_", "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Join", ",", "l"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.74863044954312*^9, 3.748630549858803*^9}, {
  3.7486306598174953`*^9, 3.748630694423757*^9}, {3.748632233538381*^9, 
  3.748632245553666*^9}, {3.7486942316328907`*^9, 3.7486942320239067`*^9}, {
  3.7486943237098417`*^9, 3.748694324963642*^9}, {3.7486946577550783`*^9, 
  3.748694659233904*^9}, {3.74889494655582*^9, 3.7488949594597397`*^9}, {
  3.750262163674677*^9, 3.7502621646742783`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"31d7f42a-029d-48ad-a73a-d3afc3746dd0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NameTag", "[", 
     RowBox[{"machine_Association", ",", "state_"}], "]"}], ":=", 
    RowBox[{"Subscript", "[", 
     RowBox[{
      RowBox[{"machine", "[", "\"\<Name\>\"", "]"}], ",", 
      RowBox[{"ToString", "[", "state", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "FiniteAutomataPlot", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Legended\>\"", "\[Rule]", "True"}], ",", 
     RowBox[{"\"\<Labeled\>\"", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FiniteAutomataPlot", "[", 
    RowBox[{"fa_Association", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "graphData", ",", "startTag", ",", "acceptTags", ",", "legend", ",", 
       "graph"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Labeled\>\"", "]"}], ",", 
        "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"fa", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"Labeled", "[", 
              RowBox[{
               RowBox[{"p", "\[Rule]", "n"}], ",", "i"}], "]"}]}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"fa", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
           "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"#", " ", "\[NotEqual]", " ", 
                RowBox[{"fa", "[", "\"\<StartState\>\"", "]"}]}], ",", 
               RowBox[{"#", "\[Rule]", "Green"}], ",", 
               RowBox[{"#", "\[Rule]", "Purple"}]}], "]"}], "&"}], ",", 
            RowBox[{"fa", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "False", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"fa", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"p", "\[Rule]", "n"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"fa", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
           "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"#", " ", "\[NotEqual]", " ", 
                RowBox[{"fa", "[", "\"\<StartState\>\"", "]"}]}], ",", 
               RowBox[{"#", "\[Rule]", "Green"}], ",", 
               RowBox[{"#", "\[Rule]", "Purple"}]}], "]"}], "&"}], ",", 
            RowBox[{"fa", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"legend", " ", "=", " ", 
       RowBox[{"PointLegend", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"LightBlue", ",", "Red", ",", "Green", ",", "Purple"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<State\>\"", ",", "\"\<Start state\>\"", ",", 
           "\"\<Accept state\>\"", ",", "\"\<Start/Accept state\>\""}], "}"}],
          ",", 
         RowBox[{"LegendMarkers", "\[Rule]", 
          RowBox[{"Graphics", "[", 
           RowBox[{"Disk", "[", "]"}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"graph", " ", "=", " ", 
       RowBox[{"Graph", "[", "\[IndentingNewLine]", 
        RowBox[{"graphData", ",", "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", "400"}], ",", "\[IndentingNewLine]", 
         RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"VertexStyle", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "startTag", "}"}], ",", "acceptTags"}], "]"}]}], ",",
          "\[IndentingNewLine]", 
         RowBox[{"VertexSize", "\[Rule]", "0.1"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Legended\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"Legended", "[", 
          RowBox[{"graph", ",", "legend"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "graph", "]"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.748703583696494*^9, {3.748717335552705*^9, 3.748717369089313*^9}, {
   3.7487174584052687`*^9, 3.748717459193922*^9}, 3.74871753815415*^9, {
   3.748717731275473*^9, 3.7487177431597853`*^9}, {3.748718023462709*^9, 
   3.748718024784854*^9}, {3.748718258122054*^9, 3.748718320605734*^9}, {
   3.748719213952038*^9, 3.748719215649395*^9}, {3.7488011555571203`*^9, 
   3.74880115834823*^9}, {3.748880460505911*^9, 3.7488805567965927`*^9}, {
   3.748880603048099*^9, 3.748880621274437*^9}, {3.750264951084629*^9, 
   3.750265014789797*^9}, 3.7502651890345573`*^9, {3.75045790436664*^9, 
   3.7504579050717087`*^9}, {3.750457965215435*^9, 3.750458042670035*^9}, {
   3.75045810531732*^9, 3.750458170800473*^9}, {3.750465993589058*^9, 
   3.750466003810172*^9}, {3.7628897812232656`*^9, 3.762889786449963*^9}, {
   3.764097624110087*^9, 3.764097637537067*^9}, {3.764097861790286*^9, 
   3.764097863050476*^9}, {3.76409790960252*^9, 3.7640979106741867`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"12bae02c-f6f8-47ab-9ab5-f8b6ebb6a3ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"DFA", " ", "object", " ", "constructor"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"DFA", "[", 
      RowBox[{
      "name_", ",", "transitions_", ",", "start_", ",", "accept_", ",", 
       RowBox[{"stateExpr_", ":", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}], ",", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Descriptive", " ", "name", " ", "to", " ", "keep", " ", "in", " ", 
         "track", " ", "the", " ", "regular", " ", "operations", " ", 
         "applied", " ", "to", " ", "it"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<DFA\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Transitions\>\"", "\[Rule]", "transitions"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<StartState\>\"", "\[Rule]", "start"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "accept"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", "stateExpr"}]}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Each", " ", "state", " ", "may", " ", "have", " ", "an", " ", 
        "associated", " ", "expression"}], " ", "*)"}], "\[IndentingNewLine]",
       "|>"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Return", " ", "every", " ", "deterministic", " ", "transition", " ", 
     "leading", " ", "to", " ", "state"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFATransitions", "[", 
      RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"Cases", "[", 
      RowBox[{"transitions", ",", 
       RowBox[{"KeyValuePattern", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Parent\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Get", " ", "the", " ", "next", " ", "state"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "DFAIterate", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFAIterate", "[", 
      RowBox[{"transitions_", ",", "state_", ",", "inputSymbol_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "next", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"next", " ", "=", " ", 
         RowBox[{"Cases", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"DFATransitions", "[", 
            RowBox[{"transitions", ",", "state"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"KeyValuePattern", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
              RowBox[{"i_", "/;", 
               RowBox[{"MemberQ", "[", 
                RowBox[{"i", ",", "inputSymbol"}], "]"}]}]}], "}"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "A", " ", "DFA", " ", "must", " ", "have", " ", "only", " ", "one", 
          " ", "available", " ", "transition"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "next", "]"}], "\[Equal]", "1"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", 
             RowBox[{"First", "[", "next", "]"}], "]"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Return", "[", 
              RowBox[{
               RowBox[{"First", "[", "next", "]"}], "[", "\"\<Node\>\"", 
               "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"TODO", ":", " ", 
            RowBox[{"Crear", " ", "mecanismo", " ", "de", " ", "alerta"}]}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Returns", " ", "the", " ", "trace", " ", "of", " ", "the", " ", 
     "computation", " ", "and", " ", "the", " ", "result", " ", "of", " ", 
     "whether", " ", "the", " ", "machine", " ", "accepts", " ", "the", " ", 
     "inputString"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFACompute", "[", 
      RowBox[{"dfa_Association", ",", "inputString_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"computation", ",", "result"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"computation", " ", "=", " ", 
         RowBox[{"FoldList", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"DFAIterate", "[", 
             RowBox[{
              RowBox[{"dfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{"#1", "[", "\"\<Node\>\"", "]"}], ",", "#2", ",", 
              RowBox[{"\"\<Trace\>\"", "\[Rule]", "True"}]}], "]"}], "&"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"<|", 
            RowBox[{"\"\<Node\>\"", "\[Rule]", 
             RowBox[{"dfa", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], ",", 
           "\[IndentingNewLine]", "inputString"}], "\[IndentingNewLine]", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"dfa", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
           RowBox[{
            RowBox[{"Last", "[", "computation", "]"}], "[", "\"\<Node\>\"", 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"computation", ",", "result"}], "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7486944026200647`*^9, 3.748694431856285*^9}, {
   3.748694463718862*^9, 3.748694511118013*^9}, {3.748694638883589*^9, 
   3.748694682179003*^9}, {3.7486947181076593`*^9, 3.748694744613942*^9}, {
   3.748695667903243*^9, 3.7486956915023117`*^9}, {3.7486958274053373`*^9, 
   3.748695899653247*^9}, {3.748695946982939*^9, 3.748695947502063*^9}, {
   3.748695997879771*^9, 3.748696002073357*^9}, {3.74869611727765*^9, 
   3.748696163820511*^9}, {3.748696233292552*^9, 3.748696413377371*^9}, {
   3.748696491389463*^9, 3.748696524052392*^9}, {3.74869658995395*^9, 
   3.748696593760084*^9}, {3.748703307880711*^9, 3.748703326225828*^9}, {
   3.748703367086596*^9, 3.748703383678033*^9}, {3.748703419136819*^9, 
   3.748703454047913*^9}, {3.748703484657639*^9, 3.748703485296896*^9}, {
   3.748801149430265*^9, 3.748801150396734*^9}, {3.74889367469322*^9, 
   3.748893826840029*^9}, 3.748893895761705*^9, {3.74889402959659*^9, 
   3.7488940352397423`*^9}, {3.748894980807784*^9, 3.748895011747181*^9}, {
   3.75025561350286*^9, 3.750255745901127*^9}, {3.750255897147194*^9, 
   3.750255910369213*^9}, {3.750256208805339*^9, 3.7502562256182756`*^9}, {
   3.7502562694987507`*^9, 3.750256277587036*^9}, {3.750261486482411*^9, 
   3.7502615142919807`*^9}, {3.7502627764170923`*^9, 
   3.7502627866744547`*^9}, {3.7502652041189337`*^9, 3.750265256846733*^9}, {
   3.750265535917069*^9, 3.7502655647458143`*^9}, {3.750547336438621*^9, 
   3.750547372594603*^9}, {3.764097651022799*^9, 3.764097662948593*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"a7881061-cda5-4880-93b1-dea8fe53412d"],

Cell["Plotting functions", "Text",
 CellChangeTimes->{{3.7487034727259417`*^9, 3.748703475902677*^9}, {
  3.7640978017256193`*^9, 
  3.7640978359750137`*^9}},ExpressionUUID->"4b7150a1-3e2b-4d54-8583-\
e145c64bbdb7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DFAExecutionPlot", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<SimpleNodes\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DFAExecutionPlot", "[", 
    RowBox[{"dfa_Association", ",", "inputString_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "trace", ",", "executionSteps", ",", "ruleIndexes", ",", "graphData", 
       ",", "startTag", ",", "acceptTags"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"trace", " ", "=", " ", 
       RowBox[{"DFACompute", "[", 
        RowBox[{"dfa", ",", "inputString"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"executionSteps", " ", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"First", "[", "trace", "]"}], ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ruleIndexes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{"dfa", "[", "\"\<Transitions\>\"", "]"}], ",", "#"}], 
           "]"}], "&"}], ",", "executionSteps"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<SimpleNodes\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"dfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"Labeled", "[", 
              RowBox[{
               RowBox[{"p", "\[Rule]", "n"}], ",", "i"}], "]"}]}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"dfa", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
           "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Rule]", "Green"}], "&"}], ",", 
            RowBox[{"dfa", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"dfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"Labeled", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"NameTag", "[", 
                 RowBox[{"dfa", ",", "p"}], "]"}], "\[Rule]", 
                RowBox[{"NameTag", "[", 
                 RowBox[{"dfa", ",", "n"}], "]"}]}], ",", "i"}], "]"}]}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"NameTag", "[", 
            RowBox[{"dfa", ",", 
             RowBox[{"dfa", "[", "\"\<StartState\>\"", "]"}]}], "]"}], 
           "\[Rule]", "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"NameTag", "[", 
               RowBox[{"dfa", ",", "#"}], "]"}], "\[Rule]", "Green"}], "&"}], 
            ",", 
            RowBox[{"dfa", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Column", "[", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<Input string: \>\"", ",", 
              RowBox[{"Grid", "[", 
               RowBox[{
                RowBox[{"{", "inputString", "}"}], ",", 
                RowBox[{"Frame", "\[Rule]", "All"}], ",", 
                RowBox[{"Background", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"i", "\[Rule]", "Green"}], "}"}]}]}], "]"}]}], 
             "}"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<Result: \>\"", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"Last", "[", "trace", "]"}], ",", "\"\<Accepted\>\"", 
                ",", "\"\<Not accepted\>\""}], "]"}]}], "}"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Graph", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{"#", ",", "Red"}], "]"}], "&"}], ",", "graphData", 
               ",", 
               RowBox[{"ruleIndexes", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"ImageSize", "\[Rule]", "400"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"VertexStyle", "\[Rule]", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", "startTag", "}"}], ",", "acceptTags"}], "]"}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"VertexSize", "\[Rule]", "0.1"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], 
         "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "ruleIndexes", "]"}], ",", "1"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748703574035603*^9, 3.748703574907305*^9}, 
   3.7488011453763933`*^9, {3.748894061583891*^9, 3.748894062781315*^9}, {
   3.748895074206483*^9, 3.74889512922255*^9}, {3.75026613405938*^9, 
   3.750266166777755*^9}, {3.764103210478877*^9, 3.7641032133251753`*^9}, {
   3.7641032621174927`*^9, 3.764103307270256*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"8ae4d7a2-816c-4e08-b771-a4c50a04d943"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Non-deterministic Finite Automata (NFA)", "Subsection",
 CellChangeTimes->{
  3.761426956159869*^9},ExpressionUUID->"f9e4bb23-9086-490f-8fda-\
7611eadaefe8"],

Cell[TextData[{
 StyleBox["NFA",
  FontWeight->"Bold"],
 "[",
 StyleBox["name",
  FontSlant->"Italic"],
 ", ",
 StyleBox["transitions",
  FontSlant->"Italic"],
 ", ",
 StyleBox["start",
  FontSlant->"Italic"],
 ", ",
 StyleBox["accept",
  FontSlant->"Italic"],
 ", ",
 StyleBox["stateExpr",
  FontSlant->"Italic"],
 "] create an NFA from a transition list.\n",
 StyleBox["NFAIterate",
  FontWeight->"Bold"],
 "[",
 StyleBox["transitions",
  FontSlant->"Italic"],
 ", ",
 StyleBox["state",
  FontSlant->"Italic"],
 ", ",
 StyleBox["inputSymbol",
  FontSlant->"Italic"],
 "] get the next step in the computation of the NFA for a ",
 StyleBox["inputSymbol",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["NFACompute",
  FontWeight->"Bold"],
 "[",
 StyleBox["nfa",
  FontSlant->"Italic"],
 ", ",
 StyleBox["inputString",
  FontSlant->"Italic"],
 "] compute if ",
 StyleBox["input",
  FontSlant->"Italic"],
 " is recognized by n",
 StyleBox["fa",
  FontSlant->"Italic"],
 ".\n\n",
 StyleBox["NFASimplify",
  FontWeight->"Bold"],
 "[",
 StyleBox["nfa",
  FontSlant->"Italic"],
 "] tries to simplify the structure of ",
 StyleBox["nfa",
  FontSlant->"Italic"],
 " by removing unnecesary nodes.\n",
 StyleBox["NFAUnion",
  FontWeight->"Bold"],
 "[",
 StyleBox["nfa1",
  FontSlant->"Italic"],
 ", ",
 StyleBox["nfa2",
  FontSlant->"Italic"],
 "] perform the regular operation union.\n",
 StyleBox["NFAConcatention",
  FontWeight->"Bold"],
 "[",
 StyleBox["nfa1",
  FontSlant->"Italic"],
 ", ",
 StyleBox["nfa2",
  FontSlant->"Italic"],
 "] perform the regular operation concatenation.\n",
 StyleBox["NFAStar",
  FontWeight->"Bold"],
 "[",
 StyleBox["fa",
  FontSlant->"Italic"],
 "] perform the regular operation kleene star.\n",
 StyleBox["NFAToDFA",
  FontWeight->"Bold"],
 "[",
 StyleBox["nfa",
  FontSlant->"Italic"],
 "] convert a NFA to a DFA by traversing every posible computation and \
transforming group of NFA states into a single DFA state.\n\n",
 StyleBox["NFAExecutionTreeComputeTrace",
  FontWeight->"Bold"],
 "[",
 StyleBox["nfa",
  FontSlant->"Italic"],
 ", ",
 StyleBox["inputString",
  FontSlant->"Italic"],
 "] return the trace of the computation performed by ",
 StyleBox["nfa",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["NFAExecutionTree",
  FontWeight->"Bold"],
 "[",
 StyleBox["nfa",
  FontSlant->"Italic"],
 ", ",
 StyleBox["inputString",
  FontSlant->"Italic"],
 "] return the execution tree of the computation performed by ",
 StyleBox["nfa",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["NFAExecutionPlot",
  FontWeight->"Bold"],
 "[",
 StyleBox["nfa",
  FontSlant->"Italic"],
 ", ",
 StyleBox["inputString",
  FontSlant->"Italic"],
 "] return a dynamic execution plot of the computation performed by ",
 StyleBox["nfa",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.7640979415089893`*^9, 3.7640980597241697`*^9}, {
  3.76409821709766*^9, 3.764098231830717*^9}, {3.7640985433338623`*^9, 
  3.76409854372149*^9}, {3.764098590790888*^9, 3.764098639793316*^9}, {
  3.76409880079998*^9, 3.764098801070225*^9}, {3.764098843374998*^9, 
  3.76409890255895*^9}, {3.764102798064742*^9, 3.764102851621092*^9}, {
  3.76410288375919*^9, 3.764102907607972*^9}, {3.764102955785761*^9, 
  3.764103098418721*^9}, {3.7641053217424746`*^9, 
  3.7641053278373976`*^9}},ExpressionUUID->"5bc34d57-5092-488f-bae1-\
14c3bee8b61c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["NFA Implementation", "Subsection",
 CellChangeTimes->{{3.774377705774495*^9, 
  3.774377708440501*^9}},ExpressionUUID->"2fdd19c4-ca4b-443e-b387-\
6be3f0815ee5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFA", "[", 
     RowBox[{"name_", ",", "transitions_", ",", "start_", ",", "accept_", ",", 
      RowBox[{"stateExpr_", ":", 
       RowBox[{"{", "}"}]}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Transitions\>\"", "\[Rule]", "transitions"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<StartState\>\"", "\[Rule]", "start"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "accept"}], " ", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", "stateExpr"}]}], 
     "\[IndentingNewLine]", "|>"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ContainsQ", "[", 
    RowBox[{"list_List", ",", "form_"}], "]"}], ":=", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"list", ",", "form"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ContainsQ", "[", 
     RowBox[{"form1_", ",", "form2_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"form1", "===", "form2"}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PureNondetStateQ", "[", 
     RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{
        RowBox[{"FATransitions", "[", 
         RowBox[{"transitions", ",", "state"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "\"\<InputSymbol\>\""}], "]"}], "]"}], "]"}], 
      " ", "===", " ", 
      RowBox[{"{", "\[Epsilon]", "}"}]}], ")"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Return", " ", "the", " ", "list", " ", "of", " ", "nodes", " ", 
    "accesible", " ", "via", " ", "empty", " ", "transitions"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_Association"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"FATransitions", "[", 
      RowBox[{"transitions", ",", 
       RowBox[{"state", "[", "\"\<Node\>\"", "]"}]}], "]"}], ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"i_", "/;", 
         RowBox[{"ContainsQ", "[", 
          RowBox[{"i", ",", "\[Epsilon]"}], "]"}]}]}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_Integer"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"FATransitions", "[", 
      RowBox[{"transitions", ",", "state"}], "]"}], ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"i_", "/;", 
         RowBox[{"ContainsQ", "[", 
          RowBox[{"i", ",", "\[Epsilon]"}], "]"}]}]}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_List"}], "]"}], ":=", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"NFANondetNodes", "[", 
         RowBox[{"transitions", ",", "#"}], "]"}], "&"}], ",", "state"}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFANondetNodesRecursive", "[", 
     RowBox[{"transitions_", ",", "states_"}], "]"}], " ", ":=", " ", 
    RowBox[{"FixedPoint", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"#", ",", 
          RowBox[{"NFANondetNodes", "[", 
           RowBox[{"transitions", ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}]}], 
         "]"}], "]"}], "&"}], ",", "states"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "NFAIterate", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAIterate", "[", 
    RowBox[{"transitions_", ",", 
     RowBox[{"state_", "?", "AtomQ"}], ",", "inputSymbol_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "next", ",", "deterministicTransitions", ",", "forkTransitions", ",", 
       "deterministicNodes", ",", "emptyTransition"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Get", " ", "all", " ", "the", " ", "transitions", " ", "corresponding",
        " ", "to", " ", "a", " ", "DFA"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"deterministicTransitions", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"FATransitions", "[", 
          RowBox[{"transitions", ",", "state"}], "]"}], ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
            RowBox[{"i_", "/;", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"i", ",", "inputSymbol"}], "]"}]}]}], "}"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"deterministicNodes", " ", "=", " ", 
       RowBox[{"Sort", "[", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"deterministicTransitions", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "]"}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Run", " ", "through", " ", "the", " ", "empty", " ", "transitions", 
        " ", "of", " ", "the", " ", "DFA", " ", "nodes"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"forkTransitions", " ", "=", " ", 
       RowBox[{"NFANondetNodes", "[", 
        RowBox[{"transitions", ",", "deterministicNodes"}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Get", " ", "past", " ", "the", " ", "current", " ", "deterministic", 
        " ", "nodes"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"forkTransitions", " ", "=", " ", 
       RowBox[{"NFANondetNodesRecursive", "[", 
        RowBox[{"transitions", ",", "forkTransitions"}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Append", " ", "every", " ", "valid", " ", "nondet", " ", 
        "transition"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "The", " ", "next", " ", "nodes", " ", "will", " ", "be", " ", "a", 
        " ", "union", " ", "between", " ", "the", " ", "deterministic", " ", 
        "transitions", " ", "and", " ", "the", " ", "nodes", " ", "reachable",
         " ", "from", " ", "nondet", " ", "transitions"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"next", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"deterministicTransitions", ",", "forkTransitions"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "next", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "next", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"next", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFAIterate", "[", 
     RowBox[{"transitions_", ",", "state_List", ",", "inputSymbol_", ",", 
      RowBox[{"opt", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"NFAIterate", "[", 
          RowBox[{"transitions", ",", "#", ",", "inputSymbol", ",", "opt"}], 
          "]"}], "&"}], ",", "state"}], "]"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFACompute", "[", 
    RowBox[{"nfa_Association", ",", "inputString_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"computation", ",", "result", ",", "start"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"start", " ", "=", " ", 
       RowBox[{"NFANondetNodesRecursive", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"<|", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", 
            RowBox[{"nfa", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
          "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"computation", " ", "=", " ", 
       RowBox[{"FoldList", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"NFAIterate", "[", 
           RowBox[{
            RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"#1", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], ",", "#2", 
            ",", 
            RowBox[{"\"\<Trace\>\"", "\[Rule]", "True"}]}], "]"}], "&"}], ",",
          "\[IndentingNewLine]", "start", ",", "\[IndentingNewLine]", 
         "inputString"}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"result", " ", "=", " ", 
       RowBox[{"Apply", "[", 
        RowBox[{"Or", ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"nfa", "[", "\"\<AcceptStates\>\"", "]"}], ",", "#"}], 
             "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"Last", "[", "computation", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"computation", ",", "result"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748696660242413*^9, 3.7486966647459993`*^9}, {
   3.7486967021050158`*^9, 3.748696831536084*^9}, {3.74869697189542*^9, 
   3.7486969809648447`*^9}, 3.748697215466445*^9, 3.74869751995757*^9, {
   3.7487002667885447`*^9, 3.748700369011458*^9}, {3.748700419261013*^9, 
   3.74870044744256*^9}, {3.748700478215622*^9, 3.7487004832193537`*^9}, {
   3.7487005955665207`*^9, 3.7487006595068207`*^9}, {3.748700694288843*^9, 
   3.748700746453335*^9}, 3.748700817284863*^9, {3.74870133603623*^9, 
   3.748701338714301*^9}, {3.748701412553027*^9, 3.748701433385751*^9}, {
   3.748703690592517*^9, 3.7487036910563593`*^9}, {3.74872577206177*^9, 
   3.748725873675222*^9}, {3.748726096655231*^9, 3.748726097862135*^9}, {
   3.748726161467107*^9, 3.7487261661149473`*^9}, 3.748726593319901*^9, {
   3.748726796627596*^9, 3.748726818991522*^9}, {3.7487268513408527`*^9, 
   3.748726851865614*^9}, {3.748726887823266*^9, 3.748726897576947*^9}, {
   3.748727017532686*^9, 3.7487270198114967`*^9}, {3.74872708125178*^9, 
   3.7487270820410557`*^9}, {3.7487288780661297`*^9, 3.74872887985073*^9}, {
   3.748730819090145*^9, 3.748730822972616*^9}, {3.748732013638582*^9, 
   3.748732058344652*^9}, {3.74880113462694*^9, 3.748801136463613*^9}, {
   3.7488035603062153`*^9, 3.748803604623309*^9}, {3.74880375095224*^9, 
   3.748803753859046*^9}, {3.7488042695495777`*^9, 3.748804274425645*^9}, {
   3.7488047683020563`*^9, 3.7488047718077297`*^9}, {3.748804812399547*^9, 
   3.7488049951363697`*^9}, {3.74880505264699*^9, 3.748805053420678*^9}, {
   3.748805470504953*^9, 3.748805476503813*^9}, {3.748807279102119*^9, 
   3.7488072869248123`*^9}, {3.748807328740156*^9, 3.748807400696988*^9}, {
   3.748807808587181*^9, 3.748807836949627*^9}, {3.748808099301045*^9, 
   3.748808174415368*^9}, {3.7488082143482523`*^9, 3.748808217419037*^9}, {
   3.748808272406879*^9, 3.748808275718526*^9}, {3.748808399482581*^9, 
   3.748808399578511*^9}, {3.7488084453504753`*^9, 3.748808510178919*^9}, {
   3.748808549481038*^9, 3.748808553538176*^9}, {3.748808682742573*^9, 
   3.748808682986268*^9}, {3.748808785518733*^9, 3.748808809006649*^9}, 
   3.74880891383162*^9, {3.748809105368822*^9, 3.7488091409700403`*^9}, {
   3.7488094667814283`*^9, 3.7488094694792128`*^9}, {3.7488096384105253`*^9, 
   3.748809641309116*^9}, 3.748809871655493*^9, {3.748809926286551*^9, 
   3.748809926477386*^9}, {3.74880996291532*^9, 3.748809993168223*^9}, 
   3.748810655609845*^9, {3.748810913056004*^9, 3.748811010806554*^9}, {
   3.748811060755949*^9, 3.748811061282751*^9}, {3.748811135937064*^9, 
   3.748811136115068*^9}, 3.748811387794766*^9, {3.748811455189604*^9, 
   3.748811493198897*^9}, {3.748811570454311*^9, 3.7488115713057337`*^9}, {
   3.7488183364958467`*^9, 3.748818347315804*^9}, 3.7488184138505573`*^9, {
   3.748818476964366*^9, 3.7488184974181433`*^9}, {3.748818632924273*^9, 
   3.748818656918626*^9}, {3.748818795287841*^9, 3.748818963348254*^9}, {
   3.748819708145546*^9, 3.748819721079083*^9}, {3.74881982125387*^9, 
   3.748819821436996*^9}, {3.748819866580336*^9, 3.748819871655216*^9}, {
   3.748819980285425*^9, 3.748819984589164*^9}, {3.748820625590354*^9, 
   3.748820705429714*^9}, {3.748820745775682*^9, 3.748820746633438*^9}, {
   3.748820992073642*^9, 3.748821001058663*^9}, {3.748821103036991*^9, 
   3.748821111674374*^9}, {3.7488211428106337`*^9, 3.74882115195549*^9}, {
   3.748821305823208*^9, 3.748821306269497*^9}, {3.7488242901542473`*^9, 
   3.748824290476968*^9}, 3.7488247109240713`*^9, {3.748873218603817*^9, 
   3.748873337382937*^9}, {3.7488733681466618`*^9, 3.748873411836718*^9}, {
   3.7488734559127913`*^9, 3.7488734846393967`*^9}, 3.748874369479238*^9, {
   3.7488748523353148`*^9, 3.7488748915303173`*^9}, {3.748874984927391*^9, 
   3.748875042232397*^9}, {3.748875076959214*^9, 3.7488751458652973`*^9}, {
   3.748875251786681*^9, 3.7488752642448053`*^9}, {3.748875340638957*^9, 
   3.7488753476113367`*^9}, {3.7488753838410873`*^9, 3.748875405935307*^9}, {
   3.748875555618806*^9, 3.748875559889102*^9}, {3.748875658590469*^9, 
   3.748875658864766*^9}, {3.748875696679154*^9, 3.7488756969853992`*^9}, {
   3.748889791049992*^9, 3.748889811896161*^9}, {3.74889007150378*^9, 
   3.7488901091101933`*^9}, {3.74889048215899*^9, 3.74889051222755*^9}, {
   3.748890629123641*^9, 3.7488906440530777`*^9}, {3.748890753176607*^9, 
   3.748890805779504*^9}, {3.7488908426502247`*^9, 3.7488908689660378`*^9}, {
   3.7488909142413054`*^9, 3.748890914664418*^9}, {3.748891441953947*^9, 
   3.748891446155963*^9}, {3.748891538016032*^9, 3.748891582391594*^9}, {
   3.7488916155734787`*^9, 3.748891712650625*^9}, {3.748894094876234*^9, 
   3.748894099111452*^9}, {3.748895551322866*^9, 3.748895570330468*^9}, {
   3.7502559198574057`*^9, 3.7502559502206593`*^9}, {3.750256329382059*^9, 
   3.75025635028307*^9}, {3.750256700770001*^9, 3.750256741046235*^9}, {
   3.750261562702235*^9, 3.7502616043085537`*^9}, {3.750262809143704*^9, 
   3.7502628357536173`*^9}, {3.75026619353651*^9, 3.7502662181861563`*^9}, {
   3.750266316706027*^9, 3.750266374824163*^9}, {3.7503647141078377`*^9, 
   3.750364714673781*^9}, {3.750364767204461*^9, 3.750364816349908*^9}, {
   3.750366727570877*^9, 3.750366734490394*^9}, {3.75042022868252*^9, 
   3.750420229108513*^9}, {3.762890039987027*^9, 3.7628900429142857`*^9}, {
   3.764098255347134*^9, 3.764098265453224*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"680049cd-df21-43fa-aec4-f635d6151bc8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TransitionApplyThreshold", "[", 
    RowBox[{"transition_", ",", "threshold_"}], "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "+", "threshold"}], "&"}], ",", "transition", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Key", "[", "\"\<Parent\>\"", "]"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"Key", "[", "\"\<Node\>\"", "]"}], "}"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MachineApplyThreshold", "[", 
    RowBox[{"fa_Association", ",", "threshold_"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Name\>\"", "\[Rule]", 
      RowBox[{"fa", "[", "\"\<Name\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"TransitionApplyThreshold", "[", 
          RowBox[{"#", ",", "threshold"}], "]"}], "&"}], ",", 
        RowBox[{"fa", "[", "\"\<Transitions\>\"", "]"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<StartState\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"fa", "[", "\"\<StartState\>\"", "]"}], "+", "threshold"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"fa", "[", "\"\<AcceptStates\>\"", "]"}], "+", "threshold"}]}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"fa", "[", "\"\<StateExpressions\>\"", "]"}], "]"}], 
         "\[NotEqual]", " ", "0"}], ",", 
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "+", "threshold"}], "&"}], ",", 
          RowBox[{"fa", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"All", ",", "1"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.7488011080330544`*^9, {3.750257081825346*^9, 3.7502571060047483`*^9}, {
   3.750257582428767*^9, 3.7502576073845387`*^9}, {3.764098272984726*^9, 
   3.764098286106153*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"18e97e79-dd4c-4401-9d37-c7849cf9ddef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetDirectSuccesors", "[", 
     RowBox[{"fa_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"Select", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Nest", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"NFANondetNodes", "[", 
          RowBox[{
           RowBox[{"fa", "[", "\"\<Transitions\>\"", "]"}], ",", "#"}], "]"}],
          "&"}], ",", 
        RowBox[{"{", "state", "}"}], ",", "2"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"ContainsQ", "[", 
           RowBox[{
            RowBox[{"fa", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
            RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}]}], " ", "&&", 
         RowBox[{"PureNondetStateQ", "[", 
          RowBox[{
           RowBox[{"fa", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}], " ", "&&", " ", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"FAParents", "[", 
            RowBox[{
             RowBox[{"fa", "[", "\"\<Transitions\>\"", "]"}], ",", 
             RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}], "]"}], 
          "\[Equal]", "1"}]}], ")"}], "\[IndentingNewLine]", "&"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ReplaceKey", "[", 
     RowBox[{"assoc_", ",", "key_", ",", "replaceTo_"}], "]"}], ":=", 
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"replaceTo", "&"}], ",", "assoc", ",", 
      RowBox[{"Key", "[", "key", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeleteIntermediateTransition", "[", 
     RowBox[{"transitions_", ",", "startState_", ",", "endState_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "deleteState", ",", "replacement", ",", "newTransitions", ",", 
        "cleanedUp"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"deleteState", " ", "=", " ", 
        RowBox[{"endState", "[", "\"\<Parent\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"replacement", " ", "=", " ", 
        RowBox[{"ReplaceKey", "[", 
         RowBox[{"endState", ",", "\"\<Parent\>\"", ",", 
          RowBox[{"startState", "[", "\"\<Node\>\"", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cleanedUp", " ", "=", " ", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"transitions", ",", 
          RowBox[{"KeyValuePattern", "[", 
           RowBox[{"\"\<Parent\>\"", "\[Rule]", "deleteState"}], "]"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"cleanedUp", " ", "=", " ", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"cleanedUp", ",", 
          RowBox[{"KeyValuePattern", "[", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", "deleteState"}], "]"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"newTransitions", " ", "=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"cleanedUp", ",", "replacement"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "newTransitions", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SimplifyStateIteration", "[", 
    RowBox[{"nfa_", ",", "state_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newMachine", ",", "newTransitions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newMachine", " ", "=", " ", "nfa"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Fold", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"DeleteIntermediateTransition", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", "state"}], "|>"}], ",", 
            "#2"}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
         RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"GetDirectSuccesors", "[", 
          RowBox[{"nfa", ",", "state"}], "]"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"newMachine", "[", "\"\<Transitions\>\"", "]"}], " ", "=", " ",
        "newTransitions"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SimplifyState", "[", 
     RowBox[{"nfa_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"FixedPoint", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"SimplifyStateIteration", "[", 
        RowBox[{"#", ",", "state"}], "]"}], "&"}], ",", "nfa"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFASimplify", "[", "nfa_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"simplified", ",", "oldStates", ",", "newStates", ",", 
       RowBox[{"stateRelabelRule", " ", "=", " ", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"simplified", " ", "=", " ", 
       RowBox[{"Fold", "[", 
        RowBox[{"SimplifyState", ",", "nfa", ",", 
         RowBox[{"GetStates", "[", 
          RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"oldStates", " ", "=", " ", 
       RowBox[{"GetStates", "[", 
        RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"newStates", " ", "=", " ", 
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"Length", "[", "oldStates", "]"}], "-", "1"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"stateRelabelRule", " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"oldStates", "\[Rule]", "newStates"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Replace", "[", 
            RowBox[{"#", ",", "stateRelabelRule"}], "]"}], "&"}], ",", 
          RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"All", ",", 
              RowBox[{"Key", "[", "\"\<Parent\>\"", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", 
              RowBox[{"Key", "[", "\"\<Node\>\"", "]"}]}], "}"}]}], "}"}]}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<StartState\>\"", "]"}], " ", "=", " ", 
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"simplified", "[", "\"\<StartState\>\"", "]"}], ",", 
         "stateRelabelRule"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<AcceptStates\>\"", "]"}], " ", "=", 
       " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"simplified", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
         "stateRelabelRule"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], "]"}],
          "\[NotEqual]", " ", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], " ", 
          "=", " ", 
          RowBox[{"MapAt", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Replace", "[", 
              RowBox[{"#", ",", "stateRelabelRule"}], "]"}], "&"}], ",", 
            RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "simplified", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750364998620798*^9, 3.7503650158668737`*^9}, {
   3.75036515975064*^9, 3.750365172407138*^9}, {3.750365205458529*^9, 
   3.7503652380323153`*^9}, {3.7503660801827383`*^9, 3.750366090758335*^9}, {
   3.7503663461945887`*^9, 3.750366374019957*^9}, {3.750366748755925*^9, 
   3.750366778092875*^9}, {3.750366929251663*^9, 3.7503669714568996`*^9}, {
   3.750418126799262*^9, 3.75041812711924*^9}, {3.7504188815057087`*^9, 
   3.750418882737925*^9}, {3.750419763370091*^9, 3.750419802856162*^9}, {
   3.750420144465686*^9, 3.750420144797082*^9}, {3.7504557414041567`*^9, 
   3.7504557418426123`*^9}, {3.750455807898966*^9, 3.7504558158804197`*^9}, {
   3.750455885104082*^9, 3.7504558890245743`*^9}, {3.7504559602622547`*^9, 
   3.7504559609399433`*^9}, {3.750456077257615*^9, 3.7504560776730328`*^9}, {
   3.750456563904047*^9, 3.7504566001341677`*^9}, {3.75045683067983*^9, 
   3.750456850430387*^9}, 3.750456945376627*^9, {3.7504569899984837`*^9, 
   3.750457054656065*^9}, {3.7504571702230186`*^9, 3.7504571903594513`*^9}, 
   3.750457228095786*^9, {3.750457755513661*^9, 3.750457768254644*^9}, 
   3.750460239484729*^9, {3.750460316589691*^9, 3.75046037279637*^9}, {
   3.75046046293909*^9, 3.750460489202183*^9}, {3.7504605243792677`*^9, 
   3.7504605285463743`*^9}, 3.750460626232395*^9, {3.750460756664249*^9, 
   3.750460757604216*^9}, {3.750460858165915*^9, 3.7504608718712378`*^9}, {
   3.75046129217626*^9, 3.7504613431681747`*^9}, {3.7504613795029593`*^9, 
   3.7504613815429*^9}, {3.750462019486672*^9, 3.750462043861949*^9}, 
   3.750462125452442*^9, {3.750462202208126*^9, 3.75046236819396*^9}, {
   3.750462408880802*^9, 3.750462413123973*^9}, {3.750462667053422*^9, 
   3.7504626872869053`*^9}, {3.7504627358468637`*^9, 
   3.7504627581677322`*^9}, {3.750463038129942*^9, 3.750463077273861*^9}, {
   3.750463175146579*^9, 3.750463191360002*^9}, {3.750463564110938*^9, 
   3.75046357731059*^9}, {3.750463648460927*^9, 3.750463660917789*^9}, {
   3.750466103797947*^9, 3.750466106124605*^9}, {3.7506138823329782`*^9, 
   3.750613899429646*^9}, {3.764098071337398*^9, 3.7640980788900127`*^9}, {
   3.7641053394623013`*^9, 3.764105343822197*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"8ce2d6db-5913-4394-bbf7-b9e791eb5e48"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NFAUnion", "[", 
    RowBox[{"nfa1_Association", ",", "nfa2_Association"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "minIndex", ",", "newIndexThreshold", ",", "newM1", ",", "newM2", ",", 
       "newAccept", ",", "newTransitions", ",", "newMachine", ",", 
       "newStateExpressions"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"minIndex", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"nfa1", "[", "\"\<Transitions\>\"", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newIndexThreshold", " ", "=", " ", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"nfa1", "[", "\"\<Transitions\>\"", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM1", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"nfa1", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM2", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"nfa2", ",", 
         RowBox[{"newIndexThreshold", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newAccept", " ", "=", " ", 
       RowBox[{"Sort", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"newM1", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
          RowBox[{"newM2", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"EmptyTransition", "[", 
          RowBox[{"minIndex", ",", 
           RowBox[{"newM1", "[", "\"\<StartState\>\"", "]"}]}], "]"}], ",", 
         " ", 
         RowBox[{"EmptyTransition", "[", 
          RowBox[{"minIndex", ",", 
           RowBox[{"newM2", "[", "\"\<StartState\>\"", "]"}]}], "]"}]}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"SortBy", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"newM1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
           RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}], 
         ",", "First"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newMachine", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
            RowBox[{"nfa1", "[", "\"\<Name\>\"", "]"}], ",", 
            "\"\<\[Union]\>\"", ",", 
            RowBox[{"nfa2", "[", "\"\<Name\>\"", "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"newM1", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"newM2", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", "minIndex"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<StateExpressions\>\"", "\[Rule]", "newStateExpressions"}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAUnion", "[", 
    RowBox[{"nfas__", "/;", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"List", "[", "nfas", "]"}], "]"}], ">", "2"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"NFAUnion", ",", 
     RowBox[{"First", "[", 
      RowBox[{"List", "[", "nfas", "]"}], "]"}], ",", 
     RowBox[{"Rest", "[", 
      RowBox[{"List", "[", "nfas", "]"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487022125147448`*^9, 3.7487022284560547`*^9}, {
   3.7487037949551*^9, 3.748703810067548*^9}, {3.748703847611432*^9, 
   3.74870404079329*^9}, {3.74870407141705*^9, 3.748704089081665*^9}, {
   3.748704142419063*^9, 3.748704143225679*^9}, {3.748704223761829*^9, 
   3.748704353447658*^9}, {3.748704390442054*^9, 3.748704436263219*^9}, 
   3.7487046978191*^9, {3.748719121151486*^9, 3.748719139032186*^9}, {
   3.74871933691008*^9, 3.748719376249671*^9}, 3.748719468746488*^9, {
   3.748719573108873*^9, 3.748719631982278*^9}, {3.7487196623214493`*^9, 
   3.7487196895780582`*^9}, {3.74871973646187*^9, 3.748719752903273*^9}, {
   3.748801102369158*^9, 3.748801103866334*^9}, {3.750257229482656*^9, 
   3.750257289656272*^9}, {3.750257454533383*^9, 3.750257463970312*^9}, {
   3.7503655558430223`*^9, 3.750365561933421*^9}, {3.750458378519979*^9, 
   3.7504583839423647`*^9}, {3.7504587614814253`*^9, 3.7504587632883*^9}, {
   3.750458798210857*^9, 3.750458827119969*^9}, {3.7504607199153013`*^9, 
   3.7504607241374617`*^9}, {3.7640980867006187`*^9, 
   3.7640981202188053`*^9}, {3.764098323352685*^9, 3.76409834010858*^9}, {
   3.764098377133894*^9, 3.7640983835326138`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"c2db15b0-7525-46b7-aaf5-dbf41f2c0288"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"nfa1_Association", ",", "nfa2_Association"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "newIndexThreshold", ",", "newM2", ",", "newTransitions", ",", 
       "newMachine", ",", "newStateExpressions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newIndexThreshold", " ", "=", " ", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"nfa1", "[", "\"\<Transitions\>\"", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM2", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"nfa2", ",", "newIndexThreshold"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"EmptyTransition", "[", 
           RowBox[{"#", ",", 
            RowBox[{"newM2", "[", "\"\<StartState\>\"", "]"}]}], "]"}], "&"}],
          ",", 
         RowBox[{"nfa1", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"nfa1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
         RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "newStateExpressions", "]"}], "\[NotEqual]", 
          " ", "0"}], ",", 
         RowBox[{"SortBy", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"nfa1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
             RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}],
            ",", "First"}], "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newMachine", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
            RowBox[{"nfa1", "[", "\"\<Name\>\"", "]"}], ",", 
            RowBox[{"nfa2", "[", "\"\<Name\>\"", "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"nfa1", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"newM2", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", 
          RowBox[{"nfa1", "[", "\"\<StartState\>\"", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
          RowBox[{"newM2", "[", "\"\<AcceptStates\>\"", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<StateExpressions\>\"", "\[Rule]", "newStateExpressions"}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"fas__", "/;", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"List", "[", "fas", "]"}], "]"}], ">", "2"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"NFAConcatention", ",", 
     RowBox[{"First", "[", 
      RowBox[{"List", "[", "fas", "]"}], "]"}], ",", 
     RowBox[{"Rest", "[", 
      RowBox[{"List", "[", "fas", "]"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487045581490107`*^9, 3.7487045719305487`*^9}, {
   3.7487047047346973`*^9, 3.748704885098873*^9}, 3.748705302383275*^9, {
   3.748719789148725*^9, 3.7487197944868813`*^9}, {3.7488010865882683`*^9, 
   3.748801088815999*^9}, {3.7488012499936447`*^9, 3.748801250218133*^9}, {
   3.750257712785565*^9, 3.750257750828499*^9}, 3.750458782188929*^9, {
   3.750458831040436*^9, 3.750458839488649*^9}, {3.750460710913538*^9, 
   3.750460715354344*^9}, {3.750465443814703*^9, 3.750465482733283*^9}, {
   3.764098127341638*^9, 3.764098159545903*^9}, {3.764098389374485*^9, 
   3.7640984106891108`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"0ad7f988-a0ee-4393-9822-32b09524ddfa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NFAStar", "[", "nfa_Association", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "minIndex", ",", "newM", ",", "newTransitions", ",", "newAccept", ",", 
       "newFA"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"minIndex", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newM", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"nfa", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"EmptyTransition", "[", 
           RowBox[{"minIndex", ",", 
            RowBox[{"newM", "[", "\"\<StartState\>\"", "]"}]}], "]"}], "}"}], 
         ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"EmptyTransition", "[", 
             RowBox[{"#", ",", 
              RowBox[{"newM", "[", "\"\<StartState\>\"", "]"}]}], "]"}], 
            "&"}], ",", 
           RowBox[{"newM", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newAccept", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"newM", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
         "minIndex"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newFA", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<(\>\"", ",", 
            RowBox[{"nfa", "[", "\"\<Name\>\"", "]"}], ",", 
            "\"\<\!\(\*SuperscriptBox[\()\), \(*\)]\)\>\""}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"newM", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", "minIndex"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
          RowBox[{"newM", "[", "\"\<StateExpressions\>\"", "]"}]}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newFA", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487045581490107`*^9, 3.7487045719305487`*^9}, {
   3.7487047047346973`*^9, 3.748704885098873*^9}, 3.748705302383275*^9, {
   3.74870536295217*^9, 3.748705371149591*^9}, {3.748705402510075*^9, 
   3.7487054412116423`*^9}, {3.748705648603009*^9, 3.748705745937058*^9}, {
   3.7487058887337914`*^9, 3.748705894022087*^9}, {3.748705976402442*^9, 
   3.748705995321293*^9}, {3.748719272227729*^9, 3.74871928403937*^9}, {
   3.7487384672229953`*^9, 3.7487384675042257`*^9}, {3.748801068950972*^9, 
   3.748801079915145*^9}, {3.750258036678369*^9, 3.7502580535842323`*^9}, {
   3.750458883956998*^9, 3.7504588853391447`*^9}, {3.750459955991395*^9, 
   3.750459957270669*^9}, {3.764098164590189*^9, 3.76409817023627*^9}, {
   3.7640984162541943`*^9, 3.76409842201589*^9}, {3.7641810179660273`*^9, 
   3.764181023814005*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"78b93a45-c595-4808-a5eb-376b998b90df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Check", " ", "if", " ", "there", " ", "is", " ", "at", " ", "least", " ", 
    "one", " ", "of", " ", "the", " ", "accepted", " ", "states", " ", "in", 
    " ", "searchState"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ContainsStateQ", "[", 
      RowBox[{"stateList_", ",", 
       RowBox[{"searchState_", "?", "AtomQ"}]}], "]"}], ":=", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"stateList", ",", "searchState"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ContainsStateQ", "[", 
      RowBox[{"stateList_", ",", "searchState_List"}], "]"}], ":=", 
     RowBox[{"Apply", "[", 
      RowBox[{"Or", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"stateList", ",", "#"}], "]"}], "&"}], ",", 
         "searchState"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Get", " ", "parents", " ", "of", " ", "the", " ", "current", " ", 
     "state"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FAParents", "[", 
      RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{
       RowBox[{"Cases", "[", 
        RowBox[{"transitions", ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
        "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Check", " ", "if", " ", "the", " ", "state", " ", "is", " ", 
     "inaccesible"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"JunkStateQ", "[", 
      RowBox[{"transitions_", ",", "start_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"stateParents", ",", "nonSelfTransitions"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"ContainsStateQ", "[", 
           RowBox[{"start", ",", "state"}], "]"}], ",", 
          RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"stateParents", " ", "=", " ", 
         RowBox[{"FAParents", "[", 
          RowBox[{"transitions", ",", "state"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nonSelfTransitions", " ", "=", " ", 
         RowBox[{"Complement", "[", 
          RowBox[{"stateParents", ",", 
           RowBox[{"{", "state", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "nonSelfTransitions", "]"}], "\[Equal]", 
           "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "True", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "False", "]"}]}], "\[IndentingNewLine]", 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SafeSort", "[", "l_List", "]"}], ":=", 
     RowBox[{"Sort", "[", "l", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SafeSort", "[", 
      RowBox[{"l_", "?", "AtomQ"}], "]"}], ":=", "l"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Infer", " ", "the", " ", "alphabet", " ", "from", " ", "the", " ", 
     "transition", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetAlphabet", "[", "transitions_", "]"}], ":=", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"transitions", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<InputSymbol\>\""}], "]"}], "]"}], "]"}], 
        "]"}], ",", "\[Epsilon]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Infer", " ", "the", " ", "states", " ", "from", " ", "the", " ", 
     "transition", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetStates", "[", "transitions_", "]"}], ":=", 
     RowBox[{"Sort", "[", 
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Cases", "[", 
         RowBox[{"transitions", ",", 
          RowBox[{
           RowBox[{"KeyValuePattern", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
              RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}]}], "}"}], "]"}], 
           "\[RuleDelayed]", 
           RowBox[{"{", 
            RowBox[{"p", ",", "n"}], "}"}]}]}], "]"}], "]"}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Get", " ", "the", " ", "states", " ", "reachable", " ", "from", " ", 
     "the", " ", "current", " ", "states", " ", "list"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Explore", "[", 
      RowBox[{"transitions_", ",", "states_"}], "]"}], ":=", 
     RowBox[{"Map", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Transition", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"SafeSort", "[", "states", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"SafeSort", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"NFAIterate", "[", 
             RowBox[{"transitions", ",", "states", ",", "#", ",", 
              RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}]}], "]"}], "]"}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", "#", "}"}]}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
       RowBox[{"GetAlphabet", "[", "transitions", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Explore", " ", "one", " ", "step", " ", "down", " ", "each", " ", 
     "branch", " ", "of", " ", "the", " ", "computation", " ", "and", " ", 
     "append", " ", "it", " ", "to", " ", "the", " ", "explored", " ", 
     "branches", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StepDown", "[", 
      RowBox[{"transitions_", ",", "branches_"}], "]"}], ":=", 
     RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{"branches", ",", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Explore", "[", "\[IndentingNewLine]", 
              RowBox[{"transitions", ",", "\[IndentingNewLine]", 
               RowBox[{"#", "[", "\"\<Node\>\"", "]"}]}], 
              "\[IndentingNewLine]", "]"}], "&"}], ",", "\[IndentingNewLine]",
             "branches"}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "1"}], 
       "]"}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NewStateNode", "[", 
      RowBox[{"node_", ",", "newStateRules_"}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Parent\>\"", "\[Rule]", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"node", "[", "\"\<Parent\>\"", "]"}], ",", 
          "newStateRules"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Node\>\"", "\[Rule]", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"node", "[", "\"\<Node\>\"", "]"}], ",", "newStateRules"}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"node", "[", "\"\<InputSymbol\>\"", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}]}], ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748738116522354*^9, 3.7487381169129496`*^9}, {
   3.748738158246546*^9, 3.7487382802511435`*^9}, {3.7487385894166284`*^9, 
   3.7487386169375763`*^9}, {3.748738680548212*^9, 3.748738682590212*^9}, {
   3.7487387313849397`*^9, 3.748738735385742*^9}, {3.748738769293524*^9, 
   3.7487387933746843`*^9}, {3.748738834312461*^9, 3.7487388501955876`*^9}, {
   3.74873910447606*^9, 3.7487391139458637`*^9}, {3.7487395671939325`*^9, 
   3.7487395678504243`*^9}, {3.7487399301793365`*^9, 
   3.7487400405796556`*^9}, {3.748778288431039*^9, 3.74877829725898*^9}, {
   3.748778336607294*^9, 3.748778346753574*^9}, {3.7487785536527443`*^9, 
   3.7487785656020393`*^9}, {3.748785833642488*^9, 3.748785833808627*^9}, {
   3.7487859100429697`*^9, 3.748785916181673*^9}, {3.748786505715897*^9, 
   3.748786505889102*^9}, {3.748786729968886*^9, 3.748786746499671*^9}, {
   3.748786912970744*^9, 3.748786960223692*^9}, {3.748787020551764*^9, 
   3.748787044188747*^9}, 3.7487872186123533`*^9, {3.748787419786417*^9, 
   3.748787431514227*^9}, {3.748787504666951*^9, 3.748787547671826*^9}, {
   3.74878766431117*^9, 3.748787680662057*^9}, {3.748787887520782*^9, 
   3.7487879249258432`*^9}, {3.748800292059382*^9, 3.748800301736413*^9}, {
   3.748800474346759*^9, 3.7488005101594152`*^9}, {3.74880060174504*^9, 
   3.7488006221840773`*^9}, {3.74880072485863*^9, 3.748800725441907*^9}, {
   3.74880075934431*^9, 3.7488008884978313`*^9}, {3.748800929965019*^9, 
   3.7488009310692883`*^9}, {3.74880099766628*^9, 3.748801043554268*^9}, 
   3.74881915174897*^9, 3.748819560915099*^9, {3.748875904270234*^9, 
   3.748875917410491*^9}, 3.7488760544994373`*^9, {3.748876104117798*^9, 
   3.748876107310285*^9}, {3.7488763188209*^9, 3.748876319090781*^9}, {
   3.748876352807436*^9, 3.7488763610884438`*^9}, {3.748876427632503*^9, 
   3.74887644305375*^9}, {3.7488767113568153`*^9, 3.7488767115476933`*^9}, {
   3.7488771269569473`*^9, 3.7488771388240423`*^9}, {3.748877175832747*^9, 
   3.7488771839931726`*^9}, 3.7488778401039343`*^9, {3.7488779312394753`*^9, 
   3.748877931346951*^9}, {3.748878639644886*^9, 3.748878641819347*^9}, {
   3.748878699517582*^9, 3.748878700291568*^9}, {3.748878733498934*^9, 
   3.7488787640588713`*^9}, 3.748879000885603*^9, 3.748879127485878*^9, 
   3.7488793518544416`*^9, {3.7488794386611223`*^9, 3.7488794399886427`*^9}, {
   3.748879574707954*^9, 3.7488795793609657`*^9}, {3.7488921119514236`*^9, 
   3.7488921221033173`*^9}, {3.7502581600826883`*^9, 
   3.7502582184878197`*^9}, {3.750258347344426*^9, 3.750258457650097*^9}, {
   3.750258588423644*^9, 3.750258608860096*^9}, {3.750258861819542*^9, 
   3.750258888330533*^9}, {3.750260101925166*^9, 3.750260116608245*^9}, {
   3.750260221820777*^9, 3.750260240317586*^9}, {3.7502602769409513`*^9, 
   3.750260308042882*^9}, {3.750260600918014*^9, 3.7502606148493357`*^9}, {
   3.7502606463933363`*^9, 3.7502607050158052`*^9}, {3.75026078890306*^9, 
   3.7502608036382427`*^9}, {3.750260872272193*^9, 3.750260916170094*^9}, {
   3.750260962485422*^9, 3.7502610194214087`*^9}, {3.750261299679121*^9, 
   3.750261300047111*^9}, {3.7502616501646*^9, 3.750261650977852*^9}, {
   3.750262300266654*^9, 3.7502623974920588`*^9}, {3.750262441013131*^9, 
   3.750262460331875*^9}, {3.750262583717654*^9, 3.7502626561775923`*^9}, {
   3.750266446011175*^9, 3.7502664486936817`*^9}, {3.7504203675709667`*^9, 
   3.750420393541206*^9}, {3.764098181332171*^9, 3.7640981992175493`*^9}, {
   3.764181009967822*^9, 3.76418100997333*^9}, 3.8091976401932645`*^9},
 CellLabel->"In[41]:=",ExpressionUUID->"b7c7c195-cdf9-449c-857c-99e973ed93a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NFAToDFA", "[", "nfa_Association", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "protoDFA", ",", "start", ",", "protoDFAStates", ",", "newStateRules", 
       ",", "newStates", ",", "containsAccept", ",", "newFA", ",", 
       "newAccept", ",", "newStart", ",", "newTransitions", ",", 
       "newTransitionsCleanedUp", ",", "protoDFAExpressionNodes", ",", 
       "newStateExpressionsNodes"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"nfa", "[", "\"\<Type\>\"", "]"}], " ", "=!=", " ", 
         "\"\<NFA\>\""}], ",", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Explore", " ", "all", " ", "paths", " ", "until", " ", "there", " ", 
        "is", " ", "no", " ", "unexplored", " ", "transition"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"start", " ", "=", " ", "\[IndentingNewLine]", 
       RowBox[{"FixedPoint", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
           RowBox[{"Join", "[", "\[IndentingNewLine]", 
            RowBox[{"#", ",", "\[IndentingNewLine]", 
             RowBox[{"NFANondetNodes", "[", 
              RowBox[{
               RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
               RowBox[{"#", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], 
              "]"}]}], "]"}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"<|", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", 
            RowBox[{"nfa", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
          "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Make", " ", "a", " ", "DFA", " ", "by", " ", "exploring", " ", "all", 
        " ", "possible", " ", "paths", " ", "in", " ", "the", " ", "NFA"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"protoDFA", " ", "=", " ", 
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StepDown", "[", 
           RowBox[{
            RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", "#"}], 
           "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"<|", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", 
            RowBox[{"start", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "|>"}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"protoDFAStates", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"protoDFA", ",", "1"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"protoDFA", ",", "1"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Match", " ", "old", " ", "NFA", " ", "parameters", " ", "to", " ", 
        "the", " ", "new", " ", "DFA"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"newStateRules", " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"protoDFAStates", "\[Rule]", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "protoDFAStates", "]"}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"newStates", " ", "=", 
       RowBox[{"newStateRules", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"containsAccept", " ", "=", " ", 
       RowBox[{"Position", "[", 
        RowBox[{"protoDFAStates", ",", 
         RowBox[{"s_", "/;", 
          RowBox[{"ContainsStateQ", "[", 
           RowBox[{"s", ",", 
            RowBox[{"nfa", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newAccept", " ", "=", " ", 
       RowBox[{"Extract", "[", 
        RowBox[{"newStates", ",", "containsAccept"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newStart", " ", "=", " ", 
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"First", "[", "protoDFAStates", "]"}], ",", 
         "newStateRules"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"NewStateNode", "[", 
           RowBox[{"#", ",", "newStateRules"}], "]"}], "&"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{"protoDFA", ",", "1"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newTransitionsCleanedUp", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"newTransitions", ",", 
          RowBox[{"t_", "/;", " ", 
           RowBox[{"JunkStateQ", "[", 
            RowBox[{"newTransitions", ",", "newStart", ",", 
             RowBox[{"t", "[", "\"\<Node\>\"", "]"}]}], "]"}]}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"protoDFAExpressionNodes", " ", "=", " ", 
       RowBox[{"Concatenate", "[", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"Thread", "[", 
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"protoDFAStates", ",", 
               RowBox[{"s_", "/;", 
                RowBox[{"ContainsStateQ", "[", 
                 RowBox[{"s", ",", 
                  RowBox[{"First", "[", "#", "]"}]}], "]"}]}]}], "]"}], 
             "\[Rule]", 
             RowBox[{"Last", "[", "#", "]"}]}], "]"}], "&"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"nfa", "[", "\"\<StateExpressions\>\"", "]"}]}], 
         "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "protoDFAExpressionNodes", "]"}], 
         "\[NotEqual]", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{"newStateExpressionsNodes", " ", "=", " ", 
         RowBox[{"MapAt", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Replace", "[", 
             RowBox[{"#", ",", "newStateRules"}], "]"}], "&"}], ",", 
           "protoDFAExpressionNodes", ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"newStateExpressionsNodes", " ", "=", " ", 
         RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newFA", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"nfa", "[", "\"\<Name\>\"", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<DFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<Transitions\>\"", "\[Rule]", "newTransitionsCleanedUp"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", "newStart"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<StateExpressions\>\"", "\[Rule]", 
          "newStateExpressionsNodes"}]}], "\[IndentingNewLine]", "|>"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newFA", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748738116522354*^9, 3.7487381169129496`*^9}, {
   3.748738158246546*^9, 3.7487382802511435`*^9}, {3.7487385894166284`*^9, 
   3.7487386169375763`*^9}, {3.748738680548212*^9, 3.748738682590212*^9}, {
   3.7487387313849397`*^9, 3.748738735385742*^9}, {3.748738769293524*^9, 
   3.7487387933746843`*^9}, {3.748738834312461*^9, 3.7487388501955876`*^9}, {
   3.74873910447606*^9, 3.7487391139458637`*^9}, {3.7487395671939325`*^9, 
   3.7487395678504243`*^9}, {3.7487399301793365`*^9, 
   3.7487400405796556`*^9}, {3.748778288431039*^9, 3.74877829725898*^9}, {
   3.748778336607294*^9, 3.748778346753574*^9}, {3.7487785536527443`*^9, 
   3.7487785656020393`*^9}, {3.748785833642488*^9, 3.748785833808627*^9}, {
   3.7487859100429697`*^9, 3.748785916181673*^9}, {3.748786505715897*^9, 
   3.748786505889102*^9}, {3.748786729968886*^9, 3.748786746499671*^9}, {
   3.748786912970744*^9, 3.748786960223692*^9}, {3.748787020551764*^9, 
   3.748787044188747*^9}, 3.7487872186123533`*^9, {3.748787419786417*^9, 
   3.748787431514227*^9}, {3.748787504666951*^9, 3.748787547671826*^9}, {
   3.74878766431117*^9, 3.748787680662057*^9}, {3.748787887520782*^9, 
   3.7487879249258432`*^9}, {3.748800292059382*^9, 3.748800301736413*^9}, {
   3.748800474346759*^9, 3.7488005101594152`*^9}, {3.74880060174504*^9, 
   3.7488006221840773`*^9}, {3.74880072485863*^9, 3.748800725441907*^9}, {
   3.74880075934431*^9, 3.7488008884978313`*^9}, {3.748800929965019*^9, 
   3.7488009310692883`*^9}, {3.74880099766628*^9, 3.748801043554268*^9}, 
   3.74881915174897*^9, 3.748819560915099*^9, {3.748875904270234*^9, 
   3.748875917410491*^9}, 3.7488760544994373`*^9, {3.748876104117798*^9, 
   3.748876107310285*^9}, {3.7488763188209*^9, 3.748876319090781*^9}, {
   3.748876352807436*^9, 3.7488763610884438`*^9}, {3.748876427632503*^9, 
   3.74887644305375*^9}, {3.7488767113568153`*^9, 3.7488767115476933`*^9}, {
   3.7488771269569473`*^9, 3.7488771388240423`*^9}, {3.748877175832747*^9, 
   3.7488771839931726`*^9}, 3.7488778401039343`*^9, {3.7488779312394753`*^9, 
   3.748877931346951*^9}, {3.748878639644886*^9, 3.748878641819347*^9}, {
   3.748878699517582*^9, 3.748878700291568*^9}, {3.748878733498934*^9, 
   3.7488787640588713`*^9}, 3.748879000885603*^9, 3.748879127485878*^9, 
   3.7488793518544416`*^9, {3.7488794386611223`*^9, 3.7488794399886427`*^9}, {
   3.748879574707954*^9, 3.7488795793609657`*^9}, {3.7488921119514236`*^9, 
   3.7488921221033173`*^9}, {3.7502581600826883`*^9, 
   3.7502582184878197`*^9}, {3.750258347344426*^9, 3.750258457650097*^9}, {
   3.750258588423644*^9, 3.750258608860096*^9}, {3.750258861819542*^9, 
   3.750258888330533*^9}, {3.750260101925166*^9, 3.750260116608245*^9}, {
   3.750260221820777*^9, 3.750260240317586*^9}, {3.7502602769409513`*^9, 
   3.750260308042882*^9}, {3.750260600918014*^9, 3.7502606148493357`*^9}, {
   3.7502606463933363`*^9, 3.7502607050158052`*^9}, {3.75026078890306*^9, 
   3.7502608036382427`*^9}, {3.750260872272193*^9, 3.750260916170094*^9}, {
   3.750260962485422*^9, 3.7502610194214087`*^9}, {3.750261299679121*^9, 
   3.750261300047111*^9}, {3.7502616501646*^9, 3.750261650977852*^9}, {
   3.750262300266654*^9, 3.7502623974920588`*^9}, {3.750262441013131*^9, 
   3.750262460331875*^9}, {3.750262583717654*^9, 3.7502626561775923`*^9}, {
   3.750266446011175*^9, 3.7502664486936817`*^9}, {3.7504203675709667`*^9, 
   3.750420393541206*^9}, {3.764098181332171*^9, 3.7640981992175493`*^9}, {
   3.764181009967822*^9, 3.76418100997333*^9}, 3.8091976401932645`*^9},
 CellLabel->"In[52]:=",ExpressionUUID->"5e300b2f-fe01-4fc9-954f-c21b7ec61c67"],

Cell["Plotting functions", "Text",
 CellChangeTimes->{{3.748703667427678*^9, 
  3.748703670564142*^9}},ExpressionUUID->"bad21f20-1cb4-4ba6-9259-\
d16512a72e95"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Pretty", " ", "output", " ", "for", " ", "NFAExecutionTree"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"GenerationTransform", "[", 
      RowBox[{"node_Association", ",", "generation_"}], "]"}], ":=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"\"\<G: \>\"", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"generation", "-", "1"}], "]"}], ",", "\"\< S: \>\"", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"node", "[", "\"\<Parent\>\"", "]"}], "]"}]}], "]"}], 
        "\[Rule]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"\"\<G: \>\"", ",", 
          RowBox[{"ToString", "[", "generation", "]"}], ",", "\"\< S: \>\"", 
          ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"node", "[", "\"\<Node\>\"", "]"}], "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"ToString", "[", 
        RowBox[{"node", "[", "\"\<InputSymbol\>\"", "]"}], "]"}]}], 
      "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GenerationTransform", "[", 
      RowBox[{"nodes_List", ",", "generation_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GenerationTransform", "[", 
         RowBox[{"#", ",", "generation"}], "]"}], "&"}], ",", "nodes"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAReplaceParents", "[", 
      RowBox[{"transitions_", ",", "newParent_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{"newParent", "&"}], ",", "#", ",", 
          RowBox[{"Key", "[", "\"\<Parent\>\"", "]"}]}], "]"}], "&"}], ",", 
       "transitions"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionTreeIterate", "[", 
      RowBox[{"transitions_", ",", 
       RowBox[{"state_", "?", "AtomQ"}], ",", "inputSymbol_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "next", ",", "deterministicTransitions", ",", "forkTransitions", ",", 
         "deterministicNodes", ",", "emptyTransition"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"deterministicTransitions", " ", "=", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"FATransitions", "[", 
            RowBox[{"transitions", ",", "state"}], "]"}], ",", 
           RowBox[{"KeyValuePattern", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
              RowBox[{"i_", "/;", 
               RowBox[{"MemberQ", "[", 
                RowBox[{"i", ",", "inputSymbol"}], "]"}]}]}], "}"}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"deterministicNodes", " ", "=", " ", 
         RowBox[{"Sort", "[", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"deterministicTransitions", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"forkTransitions", " ", "=", " ", 
         RowBox[{"NFANondetNodes", "[", 
          RowBox[{"transitions", ",", "deterministicNodes"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"forkTransitions", " ", "=", " ", 
         RowBox[{"NFANondetNodesRecursive", "[", 
          RowBox[{"transitions", ",", "forkTransitions"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"forkTransitions", " ", "=", " ", 
         RowBox[{"NFAReplaceParents", "[", 
          RowBox[{"forkTransitions", ",", "state"}], "]"}]}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "This", " ", "is", " ", "the", " ", "only", " ", "difference", " ", 
          "from", " ", "NFAIterate"}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"next", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"deterministicTransitions", ",", "forkTransitions"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "next", "]"}], ">", "0"}], ",", 
          RowBox[{"Return", "[", "next", "]"}], ",", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]",
       "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionTreeIterate", "[", 
      RowBox[{"transitions_", ",", "state_List", ",", "inputSymbol_"}], "]"}],
      ":=", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"NFAExecutionTreeIterate", "[", 
           RowBox[{"transitions", ",", "#", ",", "inputSymbol"}], "]"}], 
          "&"}], ",", "state"}], "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionTreeComputeTrace", "[", 
      RowBox[{"nfa_Association", ",", "inputString_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"computation", ",", "result", ",", "start"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"start", " ", "=", " ", 
         RowBox[{"NFANondetNodesRecursive", "[", 
          RowBox[{
           RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", 
              RowBox[{"nfa", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
            "}"}]}], "]"}]}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "This", " ", "is", " ", "the", " ", "only", " ", "difference", " ", 
          "from", " ", "NFACompute"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"computation", " ", "=", " ", 
         RowBox[{"FoldList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"NFAExecutionTreeIterate", "[", 
             RowBox[{
              RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{"#1", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], ",", 
              "#2"}], "]"}], "&"}], ",", "start", ",", "inputString"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"Apply", "[", 
          RowBox[{"Or", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"nfa", "[", "\"\<AcceptStates\>\"", "]"}], ",", "#"}],
                "]"}], "&"}], ",", 
             RowBox[{
              RowBox[{"Last", "[", "computation", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"computation", ",", "result"}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Plot", " ", "the", " ", "execution", " ", "tree", " ", "showing", " ", 
     "the", " ", "active", " ", "states", " ", "at", " ", "every", " ", 
     "input"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionTree", "[", 
      RowBox[{"nfa_Association", ",", "inputString_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"trace", ",", "root", ",", "traceTree"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"trace", " ", "=", " ", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"NFAExecutionTreeComputeTrace", "[", 
             RowBox[{"nfa", ",", "inputString"}], "]"}], "]"}], ",", "1"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"root", " ", "=", " ", 
         RowBox[{"First", "[", 
          RowBox[{"GenerationTransform", "[", 
           RowBox[{
            RowBox[{"First", "[", "trace", "]"}], ",", "1"}], "]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"traceTree", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"MapIndexed", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"GenerationTransform", "[", 
               RowBox[{"#1", ",", 
                RowBox[{"First", "[", "#2", "]"}]}], "]"}], "&"}], ",", 
             "trace"}], "]"}], ",", "1"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"TreePlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"DeleteDuplicates", "[", "traceTree", "]"}], ",", 
          "\[IndentingNewLine]", "Automatic", ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<G: 0 S: \>\"", ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"nfa", "[", "\"\<StartState\>\"", "]"}], "]"}]}], "]"}], 
          ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"VertexLabeling", "\[Rule]", "True"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "NFAExecutionPlot", "]"}], " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<SimpleNodes\>\"", "\[Rule]", "False"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionPlot", "[", 
      RowBox[{"nfa_Association", ",", "inputString_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"DynamicModule", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "trace", ",", "executionSteps", ",", "ruleIndexes", ",", "graphData", 
         ",", "startTag", ",", "acceptTags", ",", "currentStates", ",", 
         "start", ",", "parentStates"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"trace", " ", "=", " ", 
         RowBox[{"NFACompute", "[", 
          RowBox[{"nfa", ",", "inputString"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"executionSteps", " ", "=", " ", 
         RowBox[{"First", "[", "trace", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"ruleIndexes", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{"Apply", "[", 
               RowBox[{"Alternatives", ",", "#"}], "]"}]}], "]"}], "&"}], ",",
            "executionSteps"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"currentStates", " ", "=", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{
            RowBox[{"KeyValuePattern", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], "}"}], "]"}], 
            "\[RuleDelayed]", "n"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"parentStates", " ", "=", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{
            RowBox[{"KeyValuePattern", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], "}"}], "]"}], 
            "\[RuleDelayed]", "p"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"start", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"<|", 
               RowBox[{"\"\<Node\>\"", "\[Rule]", 
                RowBox[{"nfa", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
              "}"}], ",", 
             RowBox[{"NFANondetNodes", "[", 
              RowBox[{
               RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
               RowBox[{"nfa", "[", "\"\<StartState\>\"", "]"}]}], "]"}]}], 
            "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<SimpleNodes\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"graphData", " ", "=", " ", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{
               RowBox[{"KeyValuePattern", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                  RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                  RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"Labeled", "[", 
                RowBox[{
                 RowBox[{"p", "\[Rule]", "n"}], ",", "i"}], "]"}]}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"acceptTags", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "\[Rule]", "Green"}], "&"}], ",", 
              RowBox[{"nfa", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"startTag", " ", "=", " ", 
            RowBox[{
             RowBox[{"nfa", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
             "Red"}]}], ";"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"graphData", " ", "=", " ", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{
               RowBox[{"KeyValuePattern", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                  RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                  RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"Labeled", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"NameTag", "[", 
                   RowBox[{"nfa", ",", "p"}], "]"}], "\[Rule]", 
                  RowBox[{"NameTag", "[", 
                   RowBox[{"nfa", ",", "n"}], "]"}]}], ",", "i"}], "]"}]}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"acceptTags", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"NameTag", "[", 
                 RowBox[{"nfa", ",", "#"}], "]"}], "\[Rule]", "Green"}], 
               "&"}], ",", 
              RowBox[{"nfa", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"startTag", " ", "=", " ", 
            RowBox[{
             RowBox[{"NameTag", "[", 
              RowBox[{"nfa", ",", 
               RowBox[{"nfa", "[", "\"\<StartState\>\"", "]"}]}], "]"}], 
             "\[Rule]", "Red"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Column", "[", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Input string: \>\"", ",", 
                RowBox[{"Grid", "[", 
                 RowBox[{
                  RowBox[{"{", "inputString", "}"}], ",", 
                  RowBox[{"Frame", "\[Rule]", "All"}], ",", 
                  RowBox[{"Background", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "\[Rule]", "Green"}], 
                    "}"}]}]}], "]"}]}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Start states: \>\"", ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{"start", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], 
                 "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Parent states: \>\"", ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{"Extract", "[", 
                  RowBox[{"parentStates", ",", 
                   RowBox[{"ruleIndexes", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}], "}"}], 
              "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Current states: \>\"", ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{"Extract", "[", 
                  RowBox[{"currentStates", ",", 
                   RowBox[{"ruleIndexes", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}], "}"}], 
              "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Accept states: \>\"", ",", 
                RowBox[{"nfa", "[", "\"\<AcceptStates\>\"", "]"}]}], "}"}], 
              "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Result: \>\"", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Last", "[", "trace", "]"}], ",", 
                  "\"\<Accepted\>\"", ",", "\"\<Not accepted\>\""}], "]"}]}], 
               "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Graph", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"MapAt", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"#", ",", "Red"}], "]"}], "&"}], ",", "graphData", 
                 ",", 
                 RowBox[{"ruleIndexes", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"ImageSize", "\[Rule]", "400"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"VertexStyle", "\[Rule]", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"{", "startTag", "}"}], ",", "acceptTags"}], 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"VertexSize", "\[Rule]", "0.1"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "ruleIndexes", "]"}], ",", "1"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748723710630788*^9, 3.7487237277022753`*^9}, {
   3.748727084847048*^9, 3.748727114283317*^9}, {3.7487273040192413`*^9, 
   3.748727332398481*^9}, 3.7487274161950274`*^9, {3.748727746247192*^9, 
   3.7487277515543003`*^9}, {3.7487279081031237`*^9, 3.748727923710023*^9}, {
   3.748730787312983*^9, 3.7487307928236437`*^9}, {3.7487310231228743`*^9, 
   3.748731029203887*^9}, {3.748732221606511*^9, 3.748732244415888*^9}, {
   3.748801116775278*^9, 3.748801125987548*^9}, {3.748803881391964*^9, 
   3.748803890822966*^9}, {3.748810282056794*^9, 3.748810310150012*^9}, {
   3.748810341046427*^9, 3.748810341372549*^9}, {3.748810373717168*^9, 
   3.7488104247836323`*^9}, {3.7488190100132637`*^9, 3.748819031832165*^9}, {
   3.7488218290643587`*^9, 3.748821922262388*^9}, {3.748822042635623*^9, 
   3.748822061104003*^9}, {3.7488221105576887`*^9, 3.748822144647644*^9}, 
   3.748873660546661*^9, {3.748873707954574*^9, 3.748873711934341*^9}, {
   3.748873825297386*^9, 3.7488738481675158`*^9}, {3.748873889477778*^9, 
   3.748873906095031*^9}, {3.748873946989931*^9, 3.748873950680476*^9}, {
   3.748874048740857*^9, 3.7488740972258873`*^9}, {3.748874584723062*^9, 
   3.748874617867284*^9}, {3.7488810931819077`*^9, 3.748881122111397*^9}, {
   3.748881196902763*^9, 3.748881242044869*^9}, {3.74889173692879*^9, 
   3.74889176808032*^9}, {3.748891799922946*^9, 3.748891809223888*^9}, {
   3.748891865920815*^9, 3.748891878898841*^9}, {3.748892022621436*^9, 
   3.74889202590692*^9}, {3.748894165361425*^9, 3.748894165931028*^9}, {
   3.7488955842011433`*^9, 3.748895615457005*^9}, {3.748895666818984*^9, 
   3.7488956914092083`*^9}, {3.748895754543974*^9, 3.748895797415758*^9}, {
   3.750262844236038*^9, 3.75026285080511*^9}, {3.750336475715466*^9, 
   3.750336508122905*^9}, {3.764098449118511*^9, 3.764098501977717*^9}, {
   3.7640987838508453`*^9, 3.764098787397222*^9}, 3.76410349183108*^9, {
   3.8073863576890426`*^9, 3.807386364253725*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"c35f797e-e117-4def-a9d9-6bf02dd6be56"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Regular expressions", "Section",
 CellChangeTimes->{{3.757707848639778*^9, 
  3.7577078522051353`*^9}},ExpressionUUID->"3b519190-0088-4cf5-bc8c-\
eba64cf01b88"],

Cell["\<\
A regular expression, regex or regexp  is a sequence of characters that \
define a search pattern. Usually this pattern is used by string searching \
algorithms for \[OpenCurlyDoubleQuote]find\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]find and replace\[CloseCurlyDoubleQuote] operations on \
strings, or for input validation. It is a technique that developed in \
theoretical computer science and formal language theory. In practice, regular \
expressions will allow us to transform raw code text into a set of tokens \
labeled by their type.\
\>", "Text",
 CellChangeTimes->{{3.7628901509358463`*^9, 3.762890157497805*^9}, {
  3.809122318472381*^9, 
  3.8091223757856636`*^9}},ExpressionUUID->"2f9d996a-488b-448b-9b6f-\
93d605c4f3b1"],

Cell[TextData[{
 "This regex implementation is just a front-end to the Finite Automata \
operations.\n\n",
 StyleBox["Regex",
  FontWeight->"Bold"],
 "[",
 StyleBox["c",
  FontSlant->"Italic"],
 "] creates a recognizer for the character ",
 StyleBox["c",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["Regex",
  FontWeight->"Bold"],
 "[",
 StyleBox["str",
  FontSlant->"Italic"],
 ", ",
 StyleBox["tokenRecognize",
  FontSlant->"Italic"],
 "]  creates a recognizer for the string ",
 StyleBox["str",
  FontSlant->"Italic"],
 " which classifies it as the token ",
 StyleBox["tokenRecognize",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["RegexUnion",
  FontWeight->"Bold"],
 "[",
 StyleBox["args",
  FontSlant->"Italic"],
 "] Perform the regular operation union. Can be applied to an arbitrary \
number of finite automate type arguments ",
 StyleBox["args",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["RegexConcatenation",
  FontWeight->"Bold"],
 "[",
 StyleBox["args",
  FontSlant->"Italic"],
 "] Perform the regular operation concatenation. Can be applied to an \
arbitrary number of finite automate type arguments ",
 StyleBox["args",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["RegexStar",
  FontWeight->"Bold"],
 "[",
 StyleBox["fa",
  FontSlant->"Italic"],
 "] perform the regular operation kleene star to a finite automata ",
 StyleBox["fa",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["RegexStar",
  FontWeight->"Bold"],
 "[",
 StyleBox["str",
  FontSlant->"Italic"],
 "] perform the regular operation kleene star to a string ",
 StyleBox["str",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["RegexDagger",
  FontWeight->"Bold"],
 "[",
 StyleBox["fa",
  FontSlant->"Italic"],
 "] perform the regular operation dagger to a finite automata ",
 StyleBox["fa",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["RegexDagger",
  FontWeight->"Bold"],
 "[",
 StyleBox["str",
  FontSlant->"Italic"],
 "]perform the regular operation dagger to a string ",
 StyleBox["str",
  FontSlant->"Italic"],
 ".\n\n",
 StyleBox["RegexAlphabet",
  FontWeight->"Bold"],
 "[",
 StyleBox["alphabet",
  FontSlant->"Italic"],
 "] creates a recognizer for a string containing the ",
 StyleBox["alphabet.",
  FontSlant->"Italic"],
 "\n",
 StyleBox["RegexAlphabetLowercase",
  FontWeight->"Bold"],
 "[] lowercase alphabet wrapper.\n",
 StyleBox["RegexAlphabetUppercase",
  FontWeight->"Bold"],
 "[] uppercase alphabet wrapper.\n",
 StyleBox["RegexAlphabet",
  FontWeight->"Bold"],
 "[]  A...Za...z recognizer.\n",
 StyleBox["RegexDigits",
  FontWeight->"Bold"],
 "[] 0...9 recognizer.\n",
 StyleBox["RegexASCIIChars",
  FontWeight->"Bold"],
 "[] recognizes every char in the ASCII standard.\n\n",
 StyleBox["RegexCompute",
  FontWeight->"Bold"],
 "[",
 StyleBox["fa",
  FontSlant->"Italic"],
 ", ",
 StyleBox["input",
  FontSlant->"Italic"],
 "] compute if ",
 StyleBox["input",
  FontSlant->"Italic"],
 " is recognized by ",
 StyleBox["fa",
  FontSlant->"Italic"],
 ", and if applicable, return the recognized token."
}], "Text",
 CellChangeTimes->{{3.764023066390997*^9, 3.764023085457272*^9}, {
  3.7640970842759647`*^9, 3.764097158955021*^9}, {3.76409723677915*^9, 
  3.764097295938347*^9}, {3.7640973482845297`*^9, 3.764097383124959*^9}, {
  3.7640974620169907`*^9, 3.764097471933326*^9}, {3.764097554970889*^9, 
  3.764097555094432*^9}, {3.76410223091363*^9, 3.764102482214981*^9}, {
  3.7641025492202787`*^9, 3.764102734052948*^9}, {3.7641063043268967`*^9, 
  3.764106305285886*^9}},ExpressionUUID->"afe146e3-a39f-4c83-8032-\
37d78234f413"],

Cell[CellGroupData[{

Cell["RegEx Implementation", "Subsection",
 CellChangeTimes->{{3.774378016059003*^9, 
  3.7743780238033257`*^9}},ExpressionUUID->"16185cfb-1168-46df-9947-\
90ec900808da"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"RegexUnion", "[", "args__", "]"}], ":=", 
   RowBox[{"NFAUnion", "[", "args", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexConcatenation", "[", "args__", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", "args", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexStar", "[", "fa_Association", "]"}], ":=", 
   RowBox[{"NFAStar", "[", "fa", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexStar", "[", "str_String", "]"}], ":=", 
   RowBox[{"NFAStar", "[", 
    RowBox[{"Regex", "[", "str", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexDagger", "[", "fa_Association", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"fa", ",", 
     RowBox[{"NFAStar", "[", "fa", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexDagger", "[", "str_String", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", 
    RowBox[{
     RowBox[{"Regex", "[", "str", "]"}], ",", 
     RowBox[{"NFAStar", "[", 
      RowBox[{"Regex", "[", "str", "]"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748777933298731*^9, 3.7487779371938334`*^9}, {
   3.748777969531754*^9, 3.748777985636819*^9}, {3.748778016512574*^9, 
   3.748778035290359*^9}, {3.7487883155664873`*^9, 3.748788355111487*^9}, {
   3.7488021749658833`*^9, 3.748802181448103*^9}, {3.748802220353901*^9, 
   3.748802263000498*^9}, {3.748802664752873*^9, 3.748802724474334*^9}, {
   3.7488028835151043`*^9, 3.748802893769829*^9}, {3.748822409064942*^9, 
   3.748822461250548*^9}, 3.748822615571062*^9, {3.7488815924639797`*^9, 
   3.748881618069347*^9}, {3.748894225641362*^9, 3.7488942260451813`*^9}, {
   3.7502646637720547`*^9, 3.750264664122982*^9}, {3.750336547211566*^9, 
   3.750336558039886*^9}, {3.750339686428809*^9, 3.750339686668764*^9}, {
   3.757707867112628*^9, 3.75770786729426*^9}, {3.764097172212511*^9, 
   3.76409718643228*^9}, {3.764097267813965*^9, 3.764097276618506*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"415452a1-d59a-4d74-9820-866b75e2c230"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{"c_String", "/;", 
     RowBox[{
      RowBox[{"StringLength", "[", "c", "]"}], "\[Equal]", "1"}]}], "]"}], ":=", 
   RowBox[{"NFA", "[", 
    RowBox[{"c", ",", 
     RowBox[{"{", 
      RowBox[{"Transition", "[", 
       RowBox[{"0", ",", "1", ",", 
        RowBox[{"{", "c", "}"}]}], "]"}], "}"}], ",", "0", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{
     RowBox[{"c_String", "/;", 
      RowBox[{
       RowBox[{"StringLength", "[", "c", "]"}], "\[Equal]", "1"}]}], ",", 
     "stateExpr_"}], "]"}], ":=", 
   RowBox[{"NFA", "[", 
    RowBox[{"c", ",", 
     RowBox[{"{", 
      RowBox[{"Transition", "[", 
       RowBox[{"0", ",", "1", ",", 
        RowBox[{"{", "c", "}"}]}], "]"}], "}"}], ",", "0", ",", 
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", "\[Rule]", "stateExpr"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{
     RowBox[{"str_String", "/;", 
      RowBox[{
       RowBox[{"StringLength", "[", "str", "]"}], ">", "1"}]}], ",", 
     RowBox[{"tokenRecognize_", ":", "\"\<\>\""}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", " ", "=", 
       RowBox[{"Apply", "[", 
        RowBox[{"NFAConcatention", ",", 
         RowBox[{"Map", "[", 
          RowBox[{"Regex", ",", 
           RowBox[{"Characters", "[", "str", "]"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"tokenRecognize", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"m", "[", "\"\<StateExpressions\>\"", "]"}], " ", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"m", "[", "\"\<AcceptStates\>\"", "]"}], "\[Rule]", 
            "tokenRecognize"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{"r_Association", ",", "tokenRecognize_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", " ", "=", " ", "r"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"m", "[", "\"\<StateExpressions\>\"", "]"}], " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"m", "[", "\"\<AcceptStates\>\"", "]"}], "\[Rule]", 
         "tokenRecognize"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748740312676521*^9, 3.748740313645201*^9}, {
  3.7487403479479637`*^9, 3.748740397018611*^9}, {3.748743469717832*^9, 
  3.7487435934236317`*^9}, {3.7487436740558963`*^9, 3.748743681369012*^9}, {
  3.750336869429418*^9, 3.750336938835622*^9}, {3.750337329699889*^9, 
  3.750337380362454*^9}, {3.750340240062293*^9, 3.750340283654842*^9}, {
  3.75046574035165*^9, 3.750465753009005*^9}, {3.750531774957251*^9, 
  3.750531785197893*^9}, {3.750531895605538*^9, 3.7505319893143463`*^9}, {
  3.750532070050654*^9, 3.750532085952318*^9}, {3.750532550372366*^9, 
  3.750532553571492*^9}, {3.764097188147883*^9, 3.764097228999958*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"ecb51c45-66ee-4b33-a5df-86b968dffa26"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RegexAlphabet", "[", "alphabet_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "input", ",", "name", ",", "transitions", ",", "acceptStates", ",", 
        "newFA"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"input", " ", "=", " ", 
        RowBox[{"Characters", "[", "alphabet", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"newFA", " ", "=", " ", 
        RowBox[{"<|", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Name\>\"", "\[Rule]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"Riffle", "[", 
             RowBox[{"input", ",", "\"\<\[Union]\>\""}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Transition", "[", 
               RowBox[{"0", ",", "#", ",", 
                RowBox[{"{", 
                 RowBox[{"input", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "}"}]}], "]"}], "&"}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", "input", "]"}], "]"}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<StartState\>\"", "\[Rule]", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "input", "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
           RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "newFA", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabetLowercase", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"Alphabet", "[", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabetUppercase", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"ToUpperCase", "[", 
      RowBox[{"Alphabet", "[", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabet", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"Alphabet", "[", "]"}], ",", 
       RowBox[{"ToUpperCase", "[", 
        RowBox[{"Alphabet", "[", "]"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RegexDigits", "[", "]"}], ":=", 
    RowBox[{"RegexAlphabet", "[", 
     RowBox[{"StringJoin", "@", 
      RowBox[{"Map", "[", 
       RowBox[{"ToString", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "9"}], "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"asciiChars", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\\t\>\"", ",", "\"\<\\n\>\"", ",", "\"\<\\f\>\"", ",", 
      "\"\<\\r\>\"", ",", "\"\< \>\"", ",", "\"\<!\>\"", ",", "\"\<#\>\"", 
      ",", "\"\<$\>\"", ",", "\"\<%\>\"", ",", "\"\<&\>\"", ",", "\"\<'\>\"", 
      ",", "\"\<(\>\"", ",", "\"\<)\>\"", ",", "\"\<*\>\"", ",", "\"\<+\>\"", 
      ",", "\"\<,\>\"", ",", "\"\<-\>\"", ",", "\"\<.\>\"", ",", "\"\</\>\"", 
      ",", "\"\<0\>\"", ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", 
      ",", "\"\<4\>\"", ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"", 
      ",", "\"\<8\>\"", ",", "\"\<9\>\"", ",", "\"\<:\>\"", ",", "\"\<;\>\"", 
      ",", "\"\<<\>\"", ",", "\"\<=\>\"", ",", "\"\<>\>\"", ",", "\"\<?\>\"", 
      ",", "\"\<@\>\"", ",", "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\"", 
      ",", "\"\<D\>\"", ",", "\"\<E\>\"", ",", "\"\<F\>\"", ",", "\"\<G\>\"", 
      ",", "\"\<H\>\"", ",", "\"\<I\>\"", ",", "\"\<J\>\"", ",", "\"\<K\>\"", 
      ",", "\"\<L\>\"", ",", "\"\<M\>\"", ",", "\"\<N\>\"", ",", "\"\<O\>\"", 
      ",", "\"\<P\>\"", ",", "\"\<Q\>\"", ",", "\"\<R\>\"", ",", "\"\<S\>\"", 
      ",", "\"\<T\>\"", ",", "\"\<U\>\"", ",", "\"\<V\>\"", ",", "\"\<W\>\"", 
      ",", "\"\<X\>\"", ",", "\"\<Y\>\"", ",", "\"\<Z\>\"", ",", "\"\<[\>\"", 
      ",", "\"\<\\\\\>\"", ",", "\"\<]\>\"", ",", "\"\<^\>\"", ",", 
      "\"\<_\>\"", ",", "\"\<`\>\"", ",", "\"\<a\>\"", ",", "\"\<b\>\"", ",", 
      "\"\<c\>\"", ",", "\"\<d\>\"", ",", "\"\<e\>\"", ",", "\"\<f\>\"", ",", 
      "\"\<g\>\"", ",", "\"\<h\>\"", ",", "\"\<i\>\"", ",", "\"\<j\>\"", ",", 
      "\"\<k\>\"", ",", "\"\<l\>\"", ",", "\"\<m\>\"", ",", "\"\<n\>\"", ",", 
      "\"\<o\>\"", ",", "\"\<p\>\"", ",", "\"\<q\>\"", ",", "\"\<r\>\"", ",", 
      "\"\<s\>\"", ",", "\"\<t\>\"", ",", "\"\<u\>\"", ",", "\"\<v\>\"", ",", 
      "\"\<w\>\"", ",", "\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\"", ",", 
      "\"\<{\>\"", ",", "\"\<|\>\"", ",", "\"\<}\>\"", ",", "\"\<~\>\"", ",", 
      "\"\<\.7f\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexASCIIChars", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", "asciiChars"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750264626530047*^9, 3.7502646347630997`*^9}, {
  3.750264666135603*^9, 3.750264696357594*^9}, {3.7502647265015993`*^9, 
  3.750264778323572*^9}, {3.750336644015066*^9, 3.750336683110643*^9}, {
  3.750458653932007*^9, 3.750458669102903*^9}, {3.750504916952344*^9, 
  3.7505049209709597`*^9}, {3.7505057133816824`*^9, 3.7505058519705877`*^9}, {
  3.750506533506524*^9, 3.750506536475669*^9}, {3.7505067470086*^9, 
  3.75050675229692*^9}, {3.7505067838361444`*^9, 3.7505067970359073`*^9}, {
  3.7505071411031*^9, 3.7505071411968527`*^9}, {3.750530965582837*^9, 
  3.750531022527288*^9}, {3.764181010188142*^9, 3.7641810101953573`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"f34515cd-4153-4c7f-acc6-0f2fe37ad4bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RegexCompute", "[", 
    RowBox[{"fa_", ",", "input_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"trace", ",", "result", ",", "recognizedTokens"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"fa", "[", "\"\<Type\>\"", "]"}], "\[Equal]", " ", 
         "\"\<NFA\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"trace", ",", "result"}], "}"}], " ", "=", " ", 
          RowBox[{"NFACompute", "[", 
           RowBox[{"fa", ",", 
            RowBox[{"Characters", "[", "input", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"recognizedTokens", " ", "=", " ", "\[IndentingNewLine]", 
          RowBox[{"Cases", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Last", "[", "trace", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"node_", " ", "/;", " ", 
               RowBox[{"ContainsQ", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"fa", "[", "\"\<StateExpressions\>\"", "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "node"}], 
                "]"}]}], ")"}], "\[RuleDelayed]", " ", 
             RowBox[{"Replace", "[", 
              RowBox[{"node", ",", 
               RowBox[{"fa", "[", "\"\<StateExpressions\>\"", "]"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"trace", ",", "result"}], "}"}], " ", "=", 
          RowBox[{"DFACompute", "[", 
           RowBox[{"fa", ",", 
            RowBox[{"Characters", "[", "input", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"recognizedTokens", " ", "=", " ", "\[IndentingNewLine]", 
          RowBox[{"Cases", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Last", "[", "trace", "]"}], "[", "\"\<Node\>\"", "]"}],
              "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"node_", " ", "/;", " ", 
               RowBox[{"ContainsQ", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"fa", "[", "\"\<StateExpressions\>\"", "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "node"}], 
                "]"}]}], ")"}], "\[RuleDelayed]", " ", 
             RowBox[{"Replace", "[", 
              RowBox[{"node", ",", 
               RowBox[{"fa", "[", "\"\<StateExpressions\>\"", "]"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"trace", ",", "result", ",", "recognizedTokens"}], "}"}], 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750339694319202*^9, 3.750339761565926*^9}, {
  3.750457644064279*^9, 3.75045764564149*^9}, {3.7504584883737307`*^9, 
  3.750458519332707*^9}, {3.750531449449689*^9, 3.750531460840279*^9}, {
  3.7505315512323437`*^9, 3.750531579998457*^9}, {3.750532270345401*^9, 
  3.750532273742708*^9}, {3.7640975388769627`*^9, 3.764097549616992*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"414991df-16ec-4376-92c4-3229bd4568cc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lexer", "Section",
 CellChangeTimes->{{3.757707928174493*^9, 
  3.7577079289916077`*^9}},ExpressionUUID->"d07c23e9-1d59-4e51-ac14-\
31d0660d35e2"],

Cell[TextData[{
 "In computer science, lexical analysis, lexing or tokenization is the \
process of converting a sequence of characters (such as in a computer program \
or web page) into a sequence of tokens (strings with an assigned and thus \
identified meaning). A program that performs lexical analysis may be termed a \
lexer, tokenizer, or scanner, though scanner is also a term for the first \
stage of a lexer.\n\n",
 StyleBox["Token",
  FontWeight->"Bold"],
 "[",
 StyleBox["symbol",
  FontSlant->"Italic"],
 ", ",
 StyleBox["name",
  FontSlant->"Italic"],
 "] is a token constructor.\n",
 StyleBox["CreateTokens",
  FontWeight->"Bold"],
 "[",
 StyleBox["list",
  FontSlant->"Italic"],
 "] creates a token list from a list that contains {symbol, name} pairs.\n",
 StyleBox["CreateTokenRecognizer",
  FontWeight->"Bold"],
 "[",
 StyleBox["tokenList",
  FontSlant->"Italic"],
 "] creates a recognizer (implemented as  a regular expression and using a \
finite automata as a backend) of every token in ",
 StyleBox["tokenList",
  FontSlant->"Italic"],
 ". \n\n",
 StyleBox["GetToken",
  FontWeight->"Bold"],
 "[",
 StyleBox["input",
  FontSlant->"Italic"],
 ", ",
 StyleBox["symbolTokens",
  FontSlant->"Italic"],
 ", ",
 StyleBox["keywordTokens",
  FontSlant->"Italic"],
 "] for a ",
 StyleBox["input",
  FontSlant->"Italic"],
 " string tries to match a symbol token or a keyword token. If no match is \
found it returns $Failed. Keyword tokens have precedence over symbol tokens.\n\
",
 StyleBox["GetNextToken",
  FontWeight->"Bold"],
 "[",
 StyleBox["program",
  FontSlant->"Italic"],
 ", ",
 StyleBox["symbolTokens",
  FontSlant->"Italic"],
 ", ",
 StyleBox["keywordTokens",
  FontSlant->"Italic"],
 "] for a input string ",
 StyleBox["program",
  FontSlant->"Italic"],
 ", tries to match the biggest token from the left of the string. \n",
 StyleBox["Tokenize",
  FontWeight->"Bold"],
 "[",
 StyleBox["program",
  FontSlant->"Italic"],
 ", ",
 StyleBox["symbolTokens",
  FontSlant->"Italic"],
 ", ",
 StyleBox["keywordTokens",
  FontSlant->"Italic"],
 "] transform the input string ",
 StyleBox["program",
  FontSlant->"Italic"],
 " into a list of tokens by using the recognizers ",
 StyleBox["symbolTokens",
  FontSlant->"Italic"],
 " and ",
 StyleBox["keywordTokens",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["Lint",
  FontWeight->"Bold"],
 "[",
 StyleBox["program",
  FontSlant->"Italic"],
 ", ",
 StyleBox["symbolTokens",
  FontSlant->"Italic"],
 ", ",
 StyleBox["keywordTokens",
  FontSlant->"Italic"],
 ", ",
 StyleBox["colorRules",
  FontSlant->"Italic"],
 "] applies styling transformations for each token."
}], "Text",
 CellChangeTimes->{{3.762890215620064*^9, 3.762890219350206*^9}, {
   3.764096855120997*^9, 3.7640969791707497`*^9}, {3.764101162207984*^9, 
   3.764101476803961*^9}, {3.764102131997526*^9, 3.764102184653542*^9}, 
   3.774378071133703*^9},ExpressionUUID->"2b79f5e8-ba38-4784-a836-\
695d0d982284"],

Cell[CellGroupData[{

Cell["Lexer implementation", "Subsection",
 CellChangeTimes->{{3.774378050891176*^9, 
  3.7743780540751953`*^9}},ExpressionUUID->"7a2c328c-5cb6-460a-b5c0-\
e91fb3daa4c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "\[IndentingNewLine]", "   ", 
   RowBox[{
    RowBox[{"There", " ", "are", " ", "various", " ", "types", " ", "of", " ", 
     RowBox[{"tokens", ".", " ", "Symbol"}], " ", "tokens", " ", "can", " ", 
     "be", " ", "any", " ", "simple", " ", "expression", " ", "like", 
     "\[IndentingNewLine]", "  ", 
     RowBox[{"{", 
      RowBox[{"\"\</\>\"", ",", " ", "\"\<Slash\>\""}], "}"}]}], ",", 
    "\[IndentingNewLine]", "   ", 
    RowBox[{"{", 
     RowBox[{"\"\<+\>\"", ",", " ", "\"\<Plus\>\""}], "}"}], ",", 
    "\[IndentingNewLine]", "   ", 
    RowBox[{"{", 
     RowBox[{"\"\<-\>\"", ",", " ", "\"\<Minus\>\""}], "}"}], ",", 
    "\[IndentingNewLine]", "   ", 
    RowBox[{
    "...", "\[IndentingNewLine]", "  ", "That", " ", "cannot", " ", "be", " ",
      "confused", " ", "with", " ", "an", " ", 
     RowBox[{"identifier", ".", " ", "It"}], " ", "is", " ", "necessary", " ",
      "to", " ", "make", " ", "this", " ", "distintion", " ", "since", " ", 
     "keyword", " ", "tokens", " ", "like", "\[IndentingNewLine]", "  ", 
     RowBox[{"{", 
      RowBox[{"\"\<const\>\"", ",", " ", "\"\<Const\>\""}], "}"}]}], ",", 
    "\[IndentingNewLine]", "   ", 
    RowBox[{"{", 
     RowBox[{"\"\<var\>\"", ",", " ", "\"\<Var\>\""}], "}"}], ",", 
    "\[IndentingNewLine]", "   ", 
    RowBox[{"{", 
     RowBox[{"\"\<procedure\>\"", ",", " ", "\"\<Procedure\>\""}], "}"}], ",",
     "\[IndentingNewLine]", "   ", 
    RowBox[{"{", 
     RowBox[{"\"\<call\>\"", ",", " ", "\"\<Call\>\""}], "}"}], ",", 
    "\[IndentingNewLine]", "   ", 
    RowBox[{
    "...", "\[IndentingNewLine]", "  ", "have", " ", "the", " ", "same", " ", 
     "form", " ", "of", " ", "identifiers"}], ",", " ", 
    RowBox[{
    "so", " ", "the", " ", "lexer", " ", "has", " ", "to", " ", "give", " ", 
     "precedence", " ", "to", " ", "the", " ", "keyword", " ", 
     RowBox[{"token", "."}]}]}], " ", "\[IndentingNewLine]", " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Token", "[", 
      RowBox[{"symbol_String", ",", "name_String"}], "]"}], ":=", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Symbol\>\"", "\[Rule]", "symbol"}], ",", 
       RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}]}], "|>"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CreateTokens", "[", "list_", "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Token", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", "list"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CreateTokenRecognizer", "[", "tokenList_", "]"}], ":=", 
     RowBox[{"NFAToDFA", "[", 
      RowBox[{"Apply", "[", 
       RowBox[{"RegexUnion", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Regex", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<Symbol\>\"", "]"}], ",", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}]}], "]"}], "&"}], ",", 
          "tokenList"}], "]"}]}], "]"}], "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7500868562980757`*^9, 3.750086917600198*^9}, {
  3.758653946747963*^9, 3.758653979476416*^9}, {3.764086778908862*^9, 
  3.764086790358705*^9}, {3.764086834029014*^9, 3.7640869350022984`*^9}, {
  3.7640919398011303`*^9, 3.764091944560194*^9}, {3.76409208749821*^9, 
  3.764092179140031*^9}, {3.764092260387719*^9, 3.7640922701011047`*^9}, {
  3.764092388278709*^9, 3.764092456724704*^9}, {3.7640926067021437`*^9, 
  3.7640926071711206`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"d141a225-5d1a-48c0-9caa-0ee703961ea8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetToken", "[", 
     RowBox[{"input_", ",", "symbolTokens_", ",", "keywordTokens_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "symbolAccept", ",", "symbolResult", ",", "keywordAccept", ",", 
        "keywordResult"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"symbolAccept", ",", "symbolResult"}], "}"}], " ", "=", " ", 
        RowBox[{"Rest", "[", 
         RowBox[{"RegexCompute", "[", 
          RowBox[{"symbolTokens", ",", "input"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"keywordAccept", ",", "keywordResult"}], "}"}], " ", "=", 
        " ", 
        RowBox[{"Quiet", "[", 
         RowBox[{"Rest", "[", 
          RowBox[{"RegexCompute", "[", 
           RowBox[{"keywordTokens", ",", "input"}], "]"}], "]"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"keywordAccept", ",", 
         RowBox[{"Return", "[", 
          RowBox[{"First", "[", "keywordResult", "]"}], "]"}]}], "]"}], ";", 
       " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Keywords", " ", "have", " ", "precedence", " ", "over", " ", 
         "symbols"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"symbolAccept", ",", 
         RowBox[{"Return", "[", 
          RowBox[{"First", "[", "symbolResult", "]"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SafeStringTake", "[", 
    RowBox[{"string_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"StringTake", "[", 
    RowBox[{"string", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"n", ",", 
       RowBox[{"StringLength", "[", "string", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SafeStringTake", "[", 
     RowBox[{"string_", ",", 
      RowBox[{"{", 
       RowBox[{"m_", ",", "n_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"StringTake", "[", 
     RowBox[{"string", ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", 
        RowBox[{"Min", "[", 
         RowBox[{"n", ",", 
          RowBox[{"StringLength", "[", "string", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetNextToken", "::", "badInput"}], " ", "=", " ", 
   "\"\<There are input symbols that cannot be matched with any token.\>\""}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetNextToken", "[", 
     RowBox[{"program_", ",", "symbolTokens_", ",", "keywordTokens_"}], "]"}],
     ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tokenizerResult", ",", "nextToken"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Try", " ", "to", " ", "get", " ", "the", " ", "first", " ", "biggest",
         " ", "token", " ", "from", " ", "the", " ", "input"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"tokenizerResult", " ", "=", " ", 
        RowBox[{"NestWhileList", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], "+", "1"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"GetToken", "[", 
              RowBox[{
               RowBox[{"SafeStringTake", "[", 
                RowBox[{"program", ",", 
                 RowBox[{
                  RowBox[{"First", "[", "#", "]"}], "+", "1"}]}], "]"}], ",", 
               "symbolTokens", ",", "keywordTokens"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "&"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"0", ",", "\[IndentingNewLine]", "None"}], 
           "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Last", "[", "#", "]"}], "=!=", " ", "$Failed"}], 
              ")"}], "&&", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"First", "[", "#", "]"}], "\[LessEqual]", 
               RowBox[{"StringLength", "[", "program", "]"}]}], ")"}]}], 
            ")"}], "&"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "If", " ", "no", " ", "tokens", " ", "were", " ", "matched"}], ",", 
         " ", 
         RowBox[{"abort", " ", "the", " ", "compilation"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"tokenizerResult", " ", "\[Equal]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "None"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "$Failed"}], "}"}]}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"GetNextToken", "::", "badInput"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Select", " ", "the", " ", "last", " ", "before", " ", "GetToken", 
         " ", "failed"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"nextToken", " ", "=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "tokenizerResult", "]"}], ">", "2"}], ",", 
          RowBox[{"tokenizerResult", "[", 
           RowBox[{"[", 
            RowBox[{"-", "2"}], "]"}], "]"}], ",", 
          RowBox[{"Last", "[", "tokenizerResult", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "nextToken", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "Tokenize", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<IncludeBlank\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Tokenize", "[", 
    RowBox[{"program_", ",", "symbolTokens_", ",", "keywordTokens_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Block", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"length", ",", "type", ",", "\[IndentingNewLine]", 
       RowBox[{"cursor", " ", "=", " ", "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{"tokenList", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", "omitTokens", " ", 
       ",", "\[IndentingNewLine]", "formattedTokens"}], "\[IndentingNewLine]",
       "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<IncludeBlank\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"omitTokens", " ", "=", " ", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"omitTokens", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{"\"\<Whitespace\>\"", ",", "\"\<LineBreak\>\""}], "}"}]}]}],
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Iterate", " ", "over", " ", "all", " ", "the", " ", "input", " ", 
        "getting", " ", "the", " ", "tokens", " ", "one", " ", "by", " ", 
        "one"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"cursor", "<", 
         RowBox[{"StringLength", "[", "program", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"length", ",", "type"}], "}"}], " ", "=", " ", 
          RowBox[{"GetNextToken", "[", 
           RowBox[{
            RowBox[{"StringDrop", "[", 
             RowBox[{"program", ",", "cursor"}], "]"}], ",", "symbolTokens", 
            ",", "keywordTokens"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"omitTokens", ",", "type"}], "]"}]}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"tokenList", ",", 
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<Type\>\"", "\[Rule]", "type"}], ",", 
               RowBox[{"\"\<Value\>\"", "\[Rule]", 
                RowBox[{"SafeStringTake", "[", 
                 RowBox[{"program", ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"cursor", ",", 
                    RowBox[{"cursor", "+", "length", "-", "1"}]}], "}"}], "+",
                    "1"}]}], "]"}]}]}], "|>"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cursor", "+=", "length"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Tokens", " ", "without", " ", "value", " ", "only", " ", "carry", " ",
         "type", " ", "information"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"formattedTokens", " ", "=", " ", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", "\"\<Type\>\"", "]"}], " ", "=!=", 
             RowBox[{"#", "[", "\"\<Value\>\"", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"<|", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"\"\<Type\>\"", "->", 
               RowBox[{"#", "[", "\"\<Type\>\"", "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<Value\>\"", "\[Rule]", 
               RowBox[{"#", "[", "\"\<Value\>\"", "]"}]}]}], 
             "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
            RowBox[{"<|", "\[IndentingNewLine]", 
             RowBox[{"\"\<Type\>\"", "->", 
              RowBox[{"#", "[", "\"\<Type\>\"", "]"}]}], 
             "\[IndentingNewLine]", "|>"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", "&"}], ",", "\[IndentingNewLine]", 
         "tokenList"}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "formattedTokens", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7505467952931557`*^9, 3.750546921093223*^9}, {
   3.750546955860371*^9, 3.750546956268186*^9}, {3.75054702722803*^9, 
   3.750547157418901*^9}, {3.750547385123595*^9, 3.750547389067976*^9}, {
   3.7505486456200666`*^9, 3.7505487233998413`*^9}, {3.750614439670219*^9, 
   3.7506144944474382`*^9}, 3.750614612478499*^9, 3.750614674239463*^9, {
   3.750614725493066*^9, 3.750614777471882*^9}, {3.750614812101779*^9, 
   3.7506148537990294`*^9}, {3.750614901115054*^9, 3.7506149036731863`*^9}, {
   3.75061495486823*^9, 3.7506149573642397`*^9}, 3.7506150298739557`*^9, {
   3.750615118034342*^9, 3.7506151500911837`*^9}, {3.750616327714858*^9, 
   3.750616381609274*^9}, {3.750616462525311*^9, 3.750616462932968*^9}, {
   3.750689611104656*^9, 3.7506896131770763`*^9}, {3.750689782032683*^9, 
   3.750689904839724*^9}, {3.750689949718709*^9, 3.7506899850806103`*^9}, {
   3.750690035354953*^9, 3.7506900600413847`*^9}, {3.750690248383431*^9, 
   3.7506902485445127`*^9}, {3.7506922266888533`*^9, 3.750692265015525*^9}, {
   3.750692297732071*^9, 3.750692343698224*^9}, {3.7506924282715883`*^9, 
   3.750692455826165*^9}, {3.750692609973333*^9, 3.750692688737253*^9}, 
   3.750692993505443*^9, {3.750693767600814*^9, 3.7506939070694313`*^9}, {
   3.750693957222479*^9, 3.750694072526411*^9}, {3.75719022484966*^9, 
   3.7571902954715023`*^9}, {3.7577079574640083`*^9, 3.75770798407833*^9}, {
   3.7577083211942244`*^9, 3.757708348091176*^9}, {3.7628904220087957`*^9, 
   3.762890444514476*^9}, {3.762890606274909*^9, 3.762890620696995*^9}, {
   3.762890706731805*^9, 3.762890706952374*^9}, {3.762890762717461*^9, 
   3.762890776205811*^9}, {3.7628908293000174`*^9, 3.7628909828915052`*^9}, {
   3.7628910182397003`*^9, 3.762891027417437*^9}, {3.764073682166914*^9, 
   3.76407368247123*^9}, {3.76407428381808*^9, 3.764074304219339*^9}, {
   3.764074345958858*^9, 3.764074394103867*^9}, {3.7640747583809643`*^9, 
   3.764074793534643*^9}, 3.764075247369356*^9, {3.764087190289253*^9, 
   3.764087210224415*^9}, {3.764087256498539*^9, 3.764087278988476*^9}, {
   3.764087321244364*^9, 3.764087329181574*^9}, {3.764101534739036*^9, 
   3.76410153707609*^9}, {3.764101704497437*^9, 3.76410172193708*^9}, {
   3.764101760624214*^9, 3.7641017714326353`*^9}, {3.764101883179576*^9, 
   3.764101884273818*^9}, {3.7641019297392263`*^9, 3.764102077863421*^9}, {
   3.7641021151122437`*^9, 3.764102116150364*^9}, {3.8101452052936573`*^9, 
   3.8101452056246014`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"33941b84-ca61-4ed5-848e-153c6f0dacbc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parser", "Section",
 CellChangeTimes->{{3.7577080324779577`*^9, 
  3.757708033312429*^9}},ExpressionUUID->"491b6222-dc01-403a-a304-\
3cbf3275f40d"],

Cell[TextData[{
 "Parsing, syntax analysis, or syntactic analysis is the process of analysing \
a string of symbols, either in natural language, computer languages or data \
structures, conforming to the rules of a formal grammar. A parser is a \
software component that takes input data (frequently text) and builds a data \
structure \[Dash] often some kind of parse tree, abstract syntax tree or \
other hierarchical structure, giving a structural representation of the input \
while checking for correct syntax.\n\nIn this project a ",
 StyleBox["recursive descent parser",
  FontWeight->"Bold"],
 " is used.  A recursive descent parser is a kind of top-down parser built \
from a set of mutually recursive procedures (or a non-recursive equivalent) \
where each such procedure implements one of the non-terminals of the grammar. \
Thus the structure of the resulting program closely mirrors that of the \
grammar it recognizes."
}], "Text",
 CellChangeTimes->{{3.762891068874704*^9, 3.76289109858722*^9}, {
   3.762891155253064*^9, 3.7628911763955708`*^9}, 
   3.77437810829814*^9},ExpressionUUID->"b4a913ed-7967-409f-a21f-\
6f80d51b418a"],

Cell[CellGroupData[{

Cell["Parser implementation", "Subsection",
 CellChangeTimes->{{3.774378136106341*^9, 
  3.774378138673976*^9}},ExpressionUUID->"0ee80379-e846-4153-863b-\
d10af6117698"],

Cell[CellGroupData[{

Cell["Grammar beautification", "Subsubsection",
 CellChangeTimes->{{3.762893252774466*^9, 
  3.7628932582838383`*^9}},ExpressionUUID->"43a419b4-327a-4f9d-b472-\
3109f0bf8cd2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GrammarPrettifyRule", "[", "rule_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", "Bold"}], "]"}], "->", 
    RowBox[{"ReplaceAll", "[", 
     RowBox[{
      RowBox[{"rule", "[", "\"\<To\>\"", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"NonTerm", "[", "arg_", "]"}], "\[RuleDelayed]", 
         RowBox[{"Style", "[", 
          RowBox[{"arg", ",", "Bold"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Term", "[", "arg_", "]"}], "\[RuleDelayed]", 
         RowBox[{"Style", "[", 
          RowBox[{"arg", ",", "Italic"}], "]"}]}]}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GrammarPrettify", "[", "grammar_", "]"}], ":=", 
    RowBox[{"Column", "[", 
     RowBox[{"Map", "[", 
      RowBox[{"GrammarPrettifyRule", ",", "grammar"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GrammarGraph", "[", "grammar_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"graphData", ",", "allSymbols", ",", "colorStyle"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"graphData", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"Thread", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"NonTerm", "[", 
                 RowBox[{"#", "[", "\"\<From\>\"", "]"}], "]"}], "\[Rule]", 
                RowBox[{"#", "[", "\"\<To\>\"", "]"}]}], ")"}], "&"}], ",", 
             "grammar"}], "]"}]}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allSymbols", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NonTerm", "[", 
               RowBox[{"#", "[", "\"\<From\>\"", "]"}], "]"}], ",", 
              RowBox[{"#", "[", "\"\<To\>\"", "]"}]}], "}"}], "&"}], ",", 
           "grammar"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"colorStyle", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"allSymbols", ",", "_NonTerm"}], "]"}], "\[Rule]", 
           "Blue"}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"allSymbols", ",", "_Term"}], "]"}], "\[Rule]", "Red"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Graph", "[", 
       RowBox[{"graphData", ",", 
        RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
        RowBox[{"VertexStyle", "\[Rule]", "colorStyle"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "800"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GrammarGraph", "[", 
    RowBox[{"grammar_", ",", "highlight_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"graphData", ",", "allSymbols", ",", "colorStyle"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"graphData", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"Thread", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"NonTerm", "[", 
                 RowBox[{"#", "[", "\"\<From\>\"", "]"}], "]"}], "\[Rule]", 
                RowBox[{"#", "[", "\"\<To\>\"", "]"}]}], ")"}], "&"}], ",", 
             "grammar"}], "]"}]}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allSymbols", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NonTerm", "[", 
               RowBox[{"#", "[", "\"\<From\>\"", "]"}], "]"}], ",", 
              RowBox[{"#", "[", "\"\<To\>\"", "]"}]}], "}"}], "&"}], ",", 
           "grammar"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"colorStyle", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"allSymbols", ",", "_NonTerm"}], "]"}], "\[Rule]", 
           "Blue"}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"allSymbols", ",", "_Term"}], "]"}], "\[Rule]", "Red"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"HighlightGraph", "[", 
       RowBox[{
        RowBox[{"Graph", "[", 
         RowBox[{"graphData", ",", 
          RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
          RowBox[{"VertexStyle", "\[Rule]", "colorStyle"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "800"}]}], "]"}], ",", 
        "highlight"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.76142673852979*^9, 3.7614267387204647`*^9}, {
  3.762894996453464*^9, 3.7628949968944693`*^9}, {3.787762822043469*^9, 
  3.7877628470946007`*^9}, {3.787765896246139*^9, 3.787765919111724*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"8b61756e-c976-4941-9fe1-9daa5014edf1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rule matching", "Subsubsection",
 CellChangeTimes->{{3.7628918304661922`*^9, 
  3.762891832752256*^9}},ExpressionUUID->"c06cd52b-d735-4565-a405-\
dc0b6fdce09b"],

Cell[TextData[{
 StyleBox["MatchTerminalsWithRule",
  FontWeight->"Bold"],
 "[",
 StyleBox["stateId",
  FontSlant->"Italic"],
 ", ",
 StyleBox["lastId",
  FontSlant->"Italic"],
 ", ",
 StyleBox["input",
  FontSlant->"Italic"],
 ", ",
 StyleBox["rule",
  FontSlant->"Italic"],
 "] try to match the ",
 StyleBox["input",
  FontSlant->"Italic"],
 " with a production ",
 StyleBox["rule",
  FontSlant->"Italic"],
 " from the grammar. ",
 StyleBox["stateId",
  FontSlant->"Italic"],
 " and ",
 StyleBox["lastId",
  FontSlant->"Italic"],
 " are labels to avoid ambiguity in the parse tree.\n",
 StyleBox["MatchTerminals",
  FontWeight->"Bold"],
 "[{",
 StyleBox["state",
  FontSlant->"Italic"],
 ", ",
 StyleBox["stateId",
  FontSlant->"Italic"],
 "}, ",
 StyleBox["lastId",
  FontSlant->"Italic"],
 ", ",
 StyleBox["input",
  FontSlant->"Italic"],
 ", ",
 StyleBox["grammar",
  FontSlant->"Italic"],
 "] tries to match the ",
 StyleBox["input",
  FontSlant->"Italic"],
 " with every production rule in ",
 StyleBox["grammar",
  FontSlant->"Italic"],
 ". This is used for the parse process."
}], "Text",
 CellChangeTimes->{{3.7640967016079903`*^9, 3.764096788811792*^9}, {
  3.76410098903098*^9, 3.764101084021706*^9}, {3.764101119811679*^9, 
  3.764101124637496*^9}},ExpressionUUID->"120e4a35-1c90-4db2-8893-\
523153c574db"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Protect", "[", 
    RowBox[{"EmptyString", ",", "Term", ",", "NonTerm"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetArgument", "[", 
    RowBox[{"_", "[", "arg_", "]"}], "]"}], ":=", "arg"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Substitute", "[", 
     RowBox[{"l1_", ",", "l2_"}], "]"}], ":=", 
    RowBox[{"Join", "[", 
     RowBox[{"l1", ",", 
      RowBox[{"Drop", "[", 
       RowBox[{"l2", ",", 
        RowBox[{"Length", "[", "l1", "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TermMatchQ", "[", 
    RowBox[{"input_", ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TermMatchQ", "[", 
    RowBox[{"input_", ",", "terms_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Take", "[", 
       RowBox[{"input", ",", 
        RowBox[{"Length", "[", "terms", "]"}]}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "\"\<Type\>\""}], "]"}], "]"}], " ", "\[Equal]", 
     " ", 
     RowBox[{"Map", "[", 
      RowBox[{"GetArgument", ",", "terms"}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GenerateTransitions", "[", 
     RowBox[{"rule_", ",", "stateId_", ",", "lastId_"}], "]"}], ":=", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", "stateId"}], "}"}],
         "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"#1", ",", 
          RowBox[{"lastId", "+", 
           RowBox[{"First", "[", "#2", "]"}]}]}], "}"}]}], "&"}], ",", 
      RowBox[{"rule", "[", "\"\<To\>\"", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MatchTerminalsWithRule", "[", 
     RowBox[{"stateId_", ",", "lastId_", ",", "input_", ",", "rule_"}], "]"}],
     ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "terms", ",", "transition", ",", "rest", ",", "cuttedInput", ",", 
        "currentState", ",", "lastIndex", ",", "matchTransitions"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"currentState", " ", "=", " ", 
        RowBox[{"rule", "[", "\"\<From\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rule", "[", "\"\<To\>\"", "]"}], "===", 
          RowBox[{"EmptyString", "[", "]"}]}], ",", 
         RowBox[{"Return", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"currentState", ",", "stateId"}], "}"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"EmptyString", "[", "]"}], ",", 
                RowBox[{"lastId", "+", "1"}]}], "}"}]}], "}"}], ",", 
            RowBox[{"{", "}"}], ",", "input", ",", 
            RowBox[{"lastId", "+", "1"}]}], "}"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "\[IndentingNewLine]", "   ", 
        RowBox[{
        "GenerateTransitions", " ", "creates", " ", "a", " ", "list", " ", 
         "of", " ", "every", " ", "transition", " ", "that", " ", "can", " ", 
         "be", " ", "obtained", " ", "from", " ", "a", " ", "single", " ", 
         RowBox[{"rule", ".", " ", "For"}], " ", 
         RowBox[{"example", ":", "\[IndentingNewLine]", " ", 
          RowBox[{
           RowBox[{"GenerateTransition", "[", 
            RowBox[{
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<From\>\"", "\[Rule]", "a"}], ",", 
               RowBox[{"\"\<To\>\"", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"b", ",", "c", ",", "d"}], "}"}]}]}], "|>"}], ",", 
             " ", "1", ",", " ", "4"}], "]"}], " ", "will", " ", "return", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"a", ",", "1"}], "}"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"b", ",", "5"}], "}"}]}], ",", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"a", ",", "1"}], "}"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"c", ",", "6"}], "}"}]}], ",", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"a", ",", "1"}], "}"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"d", ",", "7"}], "}"}]}]}], "}"}]}]}]}], 
        "\[IndentingNewLine]", " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"transition", " ", "=", " ", 
        RowBox[{"GenerateTransitions", "[", 
         RowBox[{"rule", ",", "stateId", ",", "lastId"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"lastIndex", " ", "=", " ", 
        RowBox[{"Last", "@", 
         RowBox[{"Last", "@", 
          RowBox[{"Last", "@", "transition"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"terms", " ", "=", " ", 
        RowBox[{"TakeWhile", "[", 
         RowBox[{
          RowBox[{"rule", "[", "\"\<To\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "#", "]"}], "=!=", "NonTerm"}], "&"}]}], 
         "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Consume", " ", "every", " ", "symbol", " ", "until", " ", "it", " ", 
         "encounters", " ", "a", " ", "NonTerminal"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"rest", " ", "=", " ", 
        RowBox[{"Drop", "[", 
         RowBox[{
          RowBox[{"transition", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "terms", "]"}], ">", 
          RowBox[{"Length", "[", "input", "]"}]}], ",", 
         RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"TermMatchQ", "[", 
          RowBox[{"input", ",", "terms"}], "]"}], ",", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "If", " ", "consumed", " ", "terms", " ", "coincide", " ", "with", 
           " ", "input"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"matchTransitions", " ", "=", 
           RowBox[{"MapIndexed", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"KeyExistsQ", "[", 
                 RowBox[{"#1", ",", "\"\<Value\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", 
                   "stateId"}], "}"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Term", "[", 
                    RowBox[{"#1", "[", "\"\<Type\>\"", "]"}], "]"}], ",", 
                   RowBox[{"lastId", "+", 
                    RowBox[{"First", "[", "#2", "]"}]}], ",", 
                   RowBox[{"#1", "[", "\"\<Value\>\"", "]"}]}], "}"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", 
                   "stateId"}], "}"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Term", "[", 
                    RowBox[{"#1", "[", "\"\<Type\>\"", "]"}], "]"}], ",", 
                   RowBox[{"lastId", "+", 
                    RowBox[{"First", "[", "#2", "]"}]}]}], "}"}]}]}], 
               "\[IndentingNewLine]", "]"}], "&"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Take", "[", 
              RowBox[{"input", ",", 
               RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"transition", " ", "=", " ", 
           RowBox[{"Substitute", "[", 
            RowBox[{"matchTransitions", ",", "transition"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"cuttedInput", " ", "=", " ", 
           RowBox[{"Drop", "[", 
            RowBox[{"input", ",", 
             RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "transition", ",", "rest", ",", "cuttedInput", ",", "lastIndex"}],
             "}"}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MapUntil", "[", 
     RowBox[{"f_", ",", "expr_", ",", "test_"}], "]"}], ":=", 
    RowBox[{"Drop", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"NestWhileList", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"f", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", 
               RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], ",", 
            RowBox[{"Drop", "[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"test", "[", 
                RowBox[{"f", "[", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], "&&",
               " ", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "\[NotEqual]", 
               "1"}]}], ")"}]}], "}"}], "&"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "expr", ",", "True"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "&"}]}], "\[IndentingNewLine]", 
        "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
      "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Try", " ", "to", " ", "match", " ", "the", " ", "input", " ", "with", " ",
     "every", " ", "rule", " ", "in", " ", "the", " ", "grammar"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatchTerminals", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"state_", ",", "stateId_"}], "}"}], ",", "lastId_", ",", 
     "input_", ",", "grammar_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"possibleTransitions", ",", "matched"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"possibleTransitions", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"grammar", ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<From\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matched", " ", "=", " ", 
       RowBox[{"Last", "[", 
        RowBox[{"MapUntil", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", 
             RowBox[{"MatchTerminalsWithRule", "[", 
              RowBox[{"stateId", ",", "lastId", ",", "input", ",", "#"}], 
              "]"}]}], "}"}], "&"}], ",", "possibleTransitions", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Last", "[", "#", "]"}], "=!=", "$Failed"}], "&"}]}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "matched", "]"}], ";"}]}], "\[IndentingNewLine]",
     "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757274783650526*^9, 3.757274820428228*^9}, {
   3.757274862544322*^9, 3.757275103606566*^9}, {3.7572751636565237`*^9, 
   3.757275164811874*^9}, {3.7572751964583693`*^9, 3.757275196915545*^9}, {
   3.757275248182845*^9, 3.757275305590396*^9}, {3.7572755185338383`*^9, 
   3.757275525223351*^9}, {3.757275562775797*^9, 3.757275570631586*^9}, 
   3.757276113821259*^9, {3.757276918159042*^9, 3.7572770037161493`*^9}, {
   3.75728418007928*^9, 3.7572842206198187`*^9}, {3.757287044508272*^9, 
   3.757287046411515*^9}, {3.7572872857087393`*^9, 3.757287300671541*^9}, {
   3.757287362543298*^9, 3.757287362659718*^9}, {3.7572874347766237`*^9, 
   3.7572874349241343`*^9}, {3.7572874783326197`*^9, 3.75728747843075*^9}, {
   3.7572875128295393`*^9, 3.757287518510971*^9}, {3.7572894865818453`*^9, 
   3.75728948864775*^9}, {3.757358932698401*^9, 3.757358952178666*^9}, {
   3.757358985741022*^9, 3.757358989712109*^9}, {3.757359643749208*^9, 
   3.7573596496516743`*^9}, {3.757359690226437*^9, 3.7573596984694967`*^9}, {
   3.7577015909094152`*^9, 3.757701632528507*^9}, {3.7577029124528008`*^9, 
   3.7577030244891577`*^9}, {3.757703073074065*^9, 3.757703075078184*^9}, {
   3.7577031093317966`*^9, 3.757703113940316*^9}, {3.757703245654786*^9, 
   3.757703245855764*^9}, {3.7577032941945972`*^9, 3.757703296627157*^9}, {
   3.757703411503927*^9, 3.7577034138585777`*^9}, {3.7577036175904703`*^9, 
   3.757703633547387*^9}, {3.757703760883068*^9, 3.757703830680175*^9}, {
   3.757704333388521*^9, 3.757704335579052*^9}, {3.757704448889593*^9, 
   3.757704449106048*^9}, {3.757704517873886*^9, 3.7577046238877153`*^9}, {
   3.7577047304257717`*^9, 3.7577047306601686`*^9}, {3.757706426428527*^9, 
   3.757706450360586*^9}, {3.757706490330243*^9, 3.757706490622726*^9}, {
   3.757709390136578*^9, 3.7577094288164988`*^9}, {3.7577094599477177`*^9, 
   3.757709468534696*^9}, {3.757709534401555*^9, 3.757709545184486*^9}, {
   3.757709605535029*^9, 3.757709682226736*^9}, {3.757709819069147*^9, 
   3.757709876650505*^9}, {3.75770995313941*^9, 3.7577099542666388`*^9}, {
   3.757710616283051*^9, 3.757710654877925*^9}, {3.7577112623004704`*^9, 
   3.757711262767686*^9}, {3.7586545910677977`*^9, 3.758654594622621*^9}, {
   3.758656730004923*^9, 3.758656736471569*^9}, 3.7614199762889214`*^9, {
   3.761420009744522*^9, 3.76142000984664*^9}, {3.761420197199554*^9, 
   3.761420207689537*^9}, {3.762463217533012*^9, 3.762463217713563*^9}, 
   3.764023160991898*^9, {3.764023350298177*^9, 3.7640234532360287`*^9}, {
   3.764023531352251*^9, 3.764023575365082*^9}, 3.764023625808448*^9, {
   3.764023737279565*^9, 3.764023779233975*^9}, {3.764023824094081*^9, 
   3.764023847325685*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"48f5ec51-854c-4046-8362-e0b917d47448"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parser", "Subsubsection",
 CellChangeTimes->{{3.762891842803632*^9, 
  3.762891847359253*^9}},ExpressionUUID->"c0c25edf-5fe4-4181-ac55-\
0ce34bd48780"],

Cell[TextData[{
 StyleBox["VerifyGrammar",
  FontWeight->"Bold"],
 "[",
 StyleBox["grammar",
  FontSlant->"Italic"],
 "] verifies the correctness of ",
 StyleBox["grammar",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["VerifyInput",
  FontWeight->"Bold"],
 "[",
 StyleBox["tokenList",
  FontSlant->"Italic"],
 "] verifies the correctness of an input to be parsed in the form of a ",
 StyleBox["tokenList",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["Parse",
  FontWeight->"Bold"],
 "[",
 StyleBox["input",
  FontSlant->"Italic"],
 ", ",
 StyleBox["grammar",
  FontSlant->"Italic"],
 "] parses input in the form of a token list and returns a parse tree and \
semantic actions associated with every NonTerminal of the parse tree.\n",
 StyleBox["ParseTree",
  FontWeight->"Bold"],
 "[",
 StyleBox["input",
  FontSlant->"Italic"],
 ", ",
 StyleBox["grammar",
  FontSlant->"Italic"],
 "] returns a graphical representation of the parse tree generated by ",
 StyleBox["Parse",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.764096462193255*^9, 3.764096512984783*^9}, {
  3.76409655332156*^9, 3.764096557755391*^9}, {3.7641008535743*^9, 
  3.764100965233645*^9}, {3.764105722036935*^9, 
  3.764105724204909*^9}},ExpressionUUID->"a3b7e985-ca95-484a-bef1-\
3ab63905ac79"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Protect", "[", "$IncompleteGrammar", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"VerifyGrammar", "[", "grammar_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "grammarKeys", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grammarKeys", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Map", "[", 
         RowBox[{"Keys", ",", "grammar"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"grammarKeys", "\[Equal]", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"\"\<From\>\"", ",", "\"\<To\>\"", ",", "\"\<Action\>\""}],
            "}"}], "}"}]}], ",", " ", 
        RowBox[{"Return", "[", "True", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"grammarKeys", ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<From\>\"", ",", "\"\<To\>\""}], "}"}]}], "]"}], ",", 
        " ", 
        RowBox[{"Return", "[", "$IncompleteGrammar", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"VerifyInput", "[", "tokenList_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "inputKeys", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Input", " ", "must", " ", "be", " ", "a", " ", "list", " ", "of", " ",
         "tokens", " ", "with", " ", "Type", " ", "and", " ", "Value", " ", 
        RowBox[{"entries", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"inputKeys", " ", "=", " ", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"Keys", ",", "tokenList"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"inputKeys", " ", "\[Equal]", " ", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"\"\<Type\>\"", ",", "\"\<Value\>\""}], "}"}], "}"}]}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "False", "]"}]}], "\[IndentingNewLine]", 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "Parse", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Parse", "::", "incompleteGrammar"}], " ", "=", " ", 
   "\"\<Actions in this grammar are not correctly specified\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Parse", "::", "badGrammar"}], " ", "=", " ", 
   "\"\<Incorrect grammar\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Parse", "::", "badInput"}], " ", "=", " ", 
   "\"\<Incorrect input\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Parse", "[", 
     RowBox[{"input_", ",", "grammar_", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "grammarCheck", ",", "pGrammar", ",", "trace", ",", "symbolRules", ",",
         "rule", ",", "stack", ",", "transitions", ",", "next", ",", 
        "inputBuffer", ",", "lastId", ",", "parseTree", ",", "parseSymbol", 
        ",", "toStack"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Error", " ", "check"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"grammarCheck", " ", "=", " ", 
        RowBox[{"VerifyGrammar", "[", "grammar", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"grammarCheck", " ", "\[Equal]", " ", "False"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"Parse", "::", "badGrammar"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"grammarCheck", " ", "===", "$IncompleteGrammar"}], ",", 
         RowBox[{"Message", "[", 
          RowBox[{"Parse", "::", "incompleteGrammar"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"VerifyInput", "[", "input", "]"}], " ", "\[Equal]", " ", 
          "False"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"Parse", "::", "badInput"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "Initialization", " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"pGrammar", " ", "=", " ", 
        RowBox[{"MapAt", "[", 
         RowBox[{"NonTerm", ",", "grammar", ",", 
          RowBox[{"{", 
           RowBox[{"All", ",", 
            RowBox[{"Key", "[", "\"\<From\>\"", "]"}]}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"stack", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"parseTree", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"lastId", " ", "=", " ", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"inputBuffer", " ", "=", " ", "input"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"parseSymbol", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "pGrammar", "]"}], "[", "\"\<From\>\"", 
           "]"}], ",", "1"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"symbolRules", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"trace", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<ParseSymbol\>\"", "\[Rule]", "parseSymbol"}], ",", 
           RowBox[{"\"\<Rule\>\"", "\[Rule]", "None"}], ",", 
           RowBox[{"\"\<Stack\>\"", "\[Rule]", "stack"}], ",", 
           RowBox[{"\"\<LastID\>\"", "\[Rule]", "lastId"}], ",", 
           RowBox[{"\"\<InputBuffer\>\"", "\[Rule]", "inputBuffer"}], ",", 
           RowBox[{"\"\<ParseTree\>\"", "\[Rule]", "parseTree"}]}], "|>"}], 
         "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Loop", " ", "until", " ", "there", " ", "are", " ", "no", " ", 
         "input", " ", "symbols", " ", "left", " ", "and", " ", "no", " ", 
         "symbol", " ", "left", " ", "to", " ", "parse"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"inputBuffer", ",", "parseSymbol"}], "}"}], " ", "=!=", 
          " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "None"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"First", "[", "parseSymbol", "]"}], "]"}], " ", "===", 
             "NonTerm"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Case", " ", "where", " ", "the", " ", "parse", " ", "symbol", 
              " ", "is", " ", "a", " ", "non", " ", "terminal"}], " ", "*)"}],
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"rule", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "transitions", ",", "next", ",", "inputBuffer", ",", 
                  "lastId"}], "}"}]}], " ", "}"}], " ", "=", " ", 
              RowBox[{"MatchTerminals", "[", 
               RowBox[{
               "parseSymbol", ",", "lastId", ",", "inputBuffer", ",", 
                "pGrammar"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"parseTree", ",", "transitions"}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"symbolRules", ",", 
               RowBox[{"{", 
                RowBox[{"parseSymbol", ",", 
                 RowBox[{"rule", "[", "\"\<Action\>\"", "]"}]}], "}"}]}], 
              "]"}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Case", " ", "where", " ", "the", " ", "parse", " ", "symbol", 
              " ", "is", " ", "a", " ", "terminal"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"GetArgument", "[", 
                 RowBox[{"First", "[", "parseSymbol", "]"}], "]"}], " ", 
                "\[Equal]", " ", 
                RowBox[{
                 RowBox[{"First", "[", "inputBuffer", "]"}], "[", 
                 "\"\<Type\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"inputBuffer", " ", "=", 
                 RowBox[{"Drop", "[", 
                  RowBox[{"inputBuffer", ",", "1"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"next", " ", "=", " ", 
                 RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "next", "]"}], ">", "0"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "If", " ", "there", " ", "are", " ", "symbols", " ", "left", 
               " ", "to", " ", "process"}], ",", " ", 
              RowBox[{
              "process", " ", "the", " ", "first", " ", "and", " ", "push", 
               " ", "the", " ", "rest", " ", "to", " ", "the", " ", 
               "stack"}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"parseSymbol", ",", "toStack"}], "}"}], "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"First", "[", "next", "]"}], ",", 
                RowBox[{"Reverse", "[", 
                 RowBox[{"Rest", "[", "next", "]"}], "]"}]}], "}"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"stack", " ", "=", " ", 
              RowBox[{"Join", "[", 
               RowBox[{"stack", ",", "toStack"}], "]"}]}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "If", " ", "there", " ", "are", " ", "no", " ", "symbols", " ", 
               "left"}], ",", " ", 
              RowBox[{
              "pop", " ", "one", " ", "from", " ", "the", " ", "stack"}]}], 
             " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "stack", "]"}], " ", ">", " ", "0"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"parseSymbol", ",", "stack"}], "}"}], "=", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Last", "[", "stack", "]"}], ",", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"stack", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}], "}"}]}], ";"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "Flag", " ", "to", " ", "stop", " ", "the", " ", "loop", " ", 
                 "when", " ", "the", " ", "stack", " ", "is", " ", "empty"}], 
                " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"parseSymbol", " ", "=", " ", "None"}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"trace", ",", 
              RowBox[{"<|", 
               RowBox[{
                RowBox[{"\"\<ParseSymbol\>\"", "\[Rule]", "parseSymbol"}], 
                ",", 
                RowBox[{"\"\<Rule\>\"", "\[Rule]", 
                 RowBox[{"GrammarPrettifyRule", "[", "rule", "]"}]}], ",", 
                RowBox[{"\"\<Stack\>\"", "\[Rule]", "stack"}], ",", 
                RowBox[{"\"\<LastID\>\"", "\[Rule]", "lastId"}], ",", 
                RowBox[{"\"\<InputBuffer\>\"", "\[Rule]", "inputBuffer"}], 
                ",", 
                RowBox[{"\"\<ParseTree\>\"", "\[Rule]", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"parseTree", ",", "1"}], "]"}]}]}], "|>"}]}], 
             "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"parseTree", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"parseTree", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "trace", "]"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"grammarCheck", " ", "===", "$IncompleteGrammar"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"{", 
             RowBox[{"parseTree", ",", 
              RowBox[{"{", "}"}]}], "}"}], "]"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"{", 
             RowBox[{"parseTree", ",", "symbolRules"}], "}"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PlotParseTree", "[", "parseTree_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "startProduction", ",", "styledParseTree", ",", "styleRules", ",", 
       "nodes", ",", "formattedNodes", ",", "plainNodes", ",", 
       "nodeColorStyle"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"styleRules", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"NonTerm", "[", "x_", "]"}], "\[RuleDelayed]", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{"ToString", "[", "x", "]"}], ",", "Blue"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"Term", "[", "x_", "]"}], "\[RuleDelayed]", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{"ToString", "[", "x", "]"}], ",", "Red"}], "]"}]}]}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"styledParseTree", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"parseTree", ",", "styleRules"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"startProduction", " ", "=", " ", 
       RowBox[{"First", "[", 
        RowBox[{"First", "[", "styledParseTree", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"nodes", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], ",", 
              RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", 
           "styledParseTree"}], "]"}], ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"formattedNodes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[Rule]", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "&"}], ",", "nodes"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"plainNodes", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], ",", 
              RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", 
           "parseTree"}], "]"}], ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nodeColorStyle", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"plainNodes", ",", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NonTerm", "[", "x_", "]"}], ",", "y_"}], "}"}], 
            "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"ToString", "[", "x", "]"}], ",", "Blue"}], "]"}], 
                ",", "y"}], "}"}], "\[Rule]", "Blue"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Term", "[", "x_", "]"}], ",", "y_"}], "}"}], 
            "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"ToString", "[", "x", "]"}], ",", "Red"}], "]"}], 
                ",", "y"}], "}"}], "\[Rule]", "Red"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Term", "[", "x_", "]"}], ",", "y_", ",", "z_"}], "}"}],
             "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"ToString", "[", "x", "]"}], ",", "Red"}], "]"}], 
                ",", "y", ",", "z"}], "}"}], "\[Rule]", "Red"}], ")"}]}], ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"EmptyString", "[", "]"}], ",", "_"}], "}"}], 
            "\[RuleDelayed]", " ", "Nothing"}]}], "\[IndentingNewLine]", 
          "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"TreePlot", "[", 
       RowBox[{
       "styledParseTree", ",", "Automatic", ",", "startProduction", ",", 
        RowBox[{"VertexLabels", "\[Rule]", "formattedNodes"}], ",", 
        RowBox[{"VertexStyle", "\[Rule]", "nodeColorStyle"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "800"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ParseTree", "[", 
     RowBox[{"input_", ",", "grammar_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "parseTree", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"parseTree", " ", "=", " ", 
        RowBox[{"First", "@", 
         RowBox[{"Parse", "[", 
          RowBox[{"input", ",", "grammar"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"PlotParseTree", "[", "parseTree", "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PlotParseStep", "[", 
    RowBox[{
    "grammar_", ",", "grammarRule_", ",", "parseRule_", ",", "inputBuffer_", 
     ",", "stack_", ",", "parseTree_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "inputBufferPlot", ",", "grammarGraph", ",", "parseTreePlot", ",", 
       "stackPlot", ",", "graphsRow"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"inputBufferPlot", " ", "=", " ", 
       RowBox[{"Prepend", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Framed", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"#", ",", 
                RowBox[{"Opacity", "[", "0.5", "]"}]}], "]"}], ",", 
              RowBox[{"Background", "\[Rule]", "LightBlue"}]}], "]"}], "&"}], 
           ",", 
           RowBox[{"Drop", "[", 
            RowBox[{"inputBuffer", ",", "1"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Framed", "[", 
          RowBox[{
           RowBox[{"First", "[", "inputBuffer", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightGreen"}], ",", 
           RowBox[{"FrameStyle", "\[Rule]", "Orange"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"grammarGraph", " ", "=", " ", 
       RowBox[{"GrammarGraph", "[", 
        RowBox[{"grammar", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"First", "[", "parseRule", "]"}], ",", "Green"}], "]"}], 
           ",", 
           RowBox[{"Style", "[", 
            RowBox[{"parseRule", ",", "Green"}], "]"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"parseTreePlot", " ", "=", " ", 
       RowBox[{"PlotParseTree", "[", "parseTree", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"stackPlot", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Framed", "[", 
           RowBox[{"#", ",", 
            RowBox[{"Background", "\[Rule]", "LightRed"}]}], "]"}], "&"}], 
         ",", "stack"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"graphsRow", " ", "=", " ", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Labeled", "[", 
           RowBox[{"grammarGraph", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Grammar\>\"", ",", "Bold"}], "]"}], ",", "Top"}], 
           "]"}], ",", 
          RowBox[{"Labeled", "[", 
           RowBox[{"parseTreePlot", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Parse Tree\>\"", ",", "Bold"}], "]"}], ",", "Top"}],
            "]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Rule: \>\"", ",", "grammarRule"}], "}"}], "]"}], ",", 
         "\[IndentingNewLine]", "\"\<InputBuffer: \>\"", ",", 
         "\[IndentingNewLine]", "inputBufferPlot", ",", 
         "\[IndentingNewLine]", "\"\<Stack: \>\"", ",", "\[IndentingNewLine]",
          "stackPlot", ",", "\[IndentingNewLine]", "graphsRow"}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PlotParseProcess", "[", 
    RowBox[{"tokens_", ",", "grammar_"}], "]"}], ":=", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parseTrace", ",", "parseRules"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"parseTrace", " ", "=", " ", 
       RowBox[{"Parse", "[", 
        RowBox[{"tokens", ",", "grammar", ",", 
         RowBox[{"\"\<Trace\>\"", "\[Rule]", "True"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"parseRules", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#", "]"}], "\[Rule]", 
           RowBox[{"Last", "[", "#", "]"}]}], "&"}], ",", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"parseTrace", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "\"\<ParseSymbol\>\""}], "]"}], "]"}], 
              ",", "None"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "2", ",", "1"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"PlotParseStep", "[", 
         RowBox[{"grammar", ",", 
          RowBox[{
           RowBox[{"parseTrace", "[", 
            RowBox[{"[", 
             RowBox[{"i", "+", "1"}], "]"}], "]"}], "[", "\"\<Rule\>\"", 
           "]"}], ",", 
          RowBox[{"parseRules", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"parseTrace", "[", 
            RowBox[{"[", 
             RowBox[{"i", "+", "1"}], "]"}], "]"}], "[", 
           "\"\<InputBuffer\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{"parseTrace", "[", 
            RowBox[{"[", 
             RowBox[{"i", "+", "1"}], "]"}], "]"}], "[", "\"\<Stack\>\"", 
           "]"}], ",", 
          RowBox[{
           RowBox[{"parseTrace", "[", 
            RowBox[{"[", 
             RowBox[{"i", "+", "1"}], "]"}], "]"}], "[", "\"\<ParseTree\>\"", 
           "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "parseRules", "]"}], ",", "1"}], "}"}], ",", 
        RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757287153826024*^9, 3.7572872216771708`*^9}, {
   3.757287634689281*^9, 3.7572876934867487`*^9}, {3.757287725455359*^9, 
   3.757287824962241*^9}, {3.7572878564582787`*^9, 3.757287879362458*^9}, {
   3.7572879118394012`*^9, 3.757288160008748*^9}, {3.757288349761772*^9, 
   3.757288351613283*^9}, {3.7572889289313383`*^9, 3.757289005745718*^9}, {
   3.757289165081707*^9, 3.757289166406535*^9}, {3.757289360893189*^9, 
   3.757289409590063*^9}, {3.757340091531893*^9, 3.7573400925674057`*^9}, {
   3.757340156334832*^9, 3.7573401565282784`*^9}, {3.757340515890152*^9, 
   3.757340526180696*^9}, {3.757340562484044*^9, 3.7573405975335827`*^9}, {
   3.757340933022827*^9, 3.757340933437621*^9}, {3.757340966854559*^9, 
   3.7573409700190067`*^9}, 3.757341013479683*^9, {3.757341133565576*^9, 
   3.757341133750214*^9}, {3.7573413629451227`*^9, 3.7573413752743187`*^9}, {
   3.757341421584483*^9, 3.757341423787003*^9}, {3.7573415600769033`*^9, 
   3.757341586136511*^9}, {3.757341624460498*^9, 3.757341624623155*^9}, 
   3.757341695002104*^9, {3.7573417542240133`*^9, 3.757341791794108*^9}, {
   3.757341964907411*^9, 3.757342100584084*^9}, {3.757342146356031*^9, 
   3.757342149031186*^9}, {3.7573422320844507`*^9, 3.757342233882634*^9}, {
   3.757342986668407*^9, 3.757342991181703*^9}, {3.757343021725061*^9, 
   3.7573430245026827`*^9}, {3.757348186509583*^9, 3.75734818726821*^9}, {
   3.757348432609365*^9, 3.757348438598989*^9}, {3.757348542730608*^9, 
   3.7573487161025267`*^9}, {3.757348807780157*^9, 3.757348807877275*^9}, {
   3.757348853901032*^9, 3.75734890920122*^9}, {3.757349127318986*^9, 
   3.7573491325688753`*^9}, {3.757349183127816*^9, 3.75734920603309*^9}, {
   3.757349279727099*^9, 3.757349320836172*^9}, {3.75735707187536*^9, 
   3.757357072643874*^9}, {3.757357112790221*^9, 3.757357193156868*^9}, 
   3.7573574231479273`*^9, {3.757359302539564*^9, 3.757359334814144*^9}, {
   3.757359366158173*^9, 3.757359383080202*^9}, {3.757359435585299*^9, 
   3.7573594511022797`*^9}, {3.757359492657642*^9, 3.757359600688477*^9}, {
   3.757359935887082*^9, 3.757359976604569*^9}, 3.757360016542276*^9, {
   3.75736006648175*^9, 3.757360068159026*^9}, {3.757701549727418*^9, 
   3.757701555250287*^9}, {3.7577037078609962`*^9, 3.757703708043736*^9}, {
   3.757705080342566*^9, 3.757705378744836*^9}, {3.7577054100903473`*^9, 
   3.757705486613831*^9}, {3.757706700406754*^9, 3.7577067250799437`*^9}, {
   3.757706774280291*^9, 3.757706881682398*^9}, {3.757706948416572*^9, 
   3.757706954048917*^9}, {3.75770700973498*^9, 3.757707010367838*^9}, 
   3.757708591061474*^9, 3.7577100591345367`*^9, {3.757711446222785*^9, 
   3.7577114490659313`*^9}, {3.757712040489437*^9, 3.757712047454317*^9}, {
   3.758657773667*^9, 3.758657776598665*^9}, 3.758658374624056*^9, {
   3.761420226240258*^9, 3.761420265317005*^9}, 3.76142030288695*^9, {
   3.761420350138957*^9, 3.761420389042295*^9}, {3.761421028267684*^9, 
   3.761421037845132*^9}, {3.7614212258947697`*^9, 3.761421231317347*^9}, 
   3.761421373967327*^9, {3.7614236829307833`*^9, 3.761423683707498*^9}, {
   3.7614237990432653`*^9, 3.7614237992557287`*^9}, {3.761423935278761*^9, 
   3.76142408280269*^9}, {3.761424133666154*^9, 3.761424607160438*^9}, {
   3.762461198400983*^9, 3.7624612501967707`*^9}, {3.76254221762576*^9, 
   3.762542309208*^9}, {3.762882072105544*^9, 3.762882093903145*^9}, {
   3.76288214542204*^9, 3.76288215081001*^9}, {3.762882686880164*^9, 
   3.762882738847706*^9}, {3.762892509740242*^9, 3.762892534266121*^9}, {
   3.76289585649084*^9, 3.7628959017176247`*^9}, {3.7628959655256233`*^9, 
   3.762895965688238*^9}, {3.7628960400408173`*^9, 3.7628960442566633`*^9}, {
   3.762896390996791*^9, 3.762896394497034*^9}, {3.7640911026131*^9, 
   3.764091121595875*^9}, {3.764091152790991*^9, 3.7640912092385397`*^9}, {
   3.7640915492203493`*^9, 3.764091553111755*^9}, {3.764096475715172*^9, 
   3.7640964827123127`*^9}, {3.764096546578825*^9, 3.764096547116919*^9}, {
   3.776518497708199*^9, 3.776518529035521*^9}, {3.7765192665875874`*^9, 
   3.776519301612278*^9}, {3.787763618582666*^9, 3.78776362473131*^9}, {
   3.7877637298258*^9, 3.787763735562812*^9}, {3.7877638675471687`*^9, 
   3.787763891405719*^9}, {3.787764798792557*^9, 3.7877648170069017`*^9}, {
   3.787765523346229*^9, 3.787765607583617*^9}, 3.787765704995647*^9, {
   3.787765938204002*^9, 3.78776595158864*^9}, {3.787766102727808*^9, 
   3.787766161510153*^9}, {3.787766234860978*^9, 3.787766239690423*^9}, {
   3.7877662878938637`*^9, 3.78776643882425*^9}, 3.7877700999429417`*^9, {
   3.787770156369334*^9, 3.787770234150182*^9}, {3.787771238710047*^9, 
   3.7877712680164337`*^9}, {3.7877713374209642`*^9, 3.787771426896761*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"2cf6f8d1-ea3f-4462-bbc9-ba4759efb938"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PL/0 Implementation", "Chapter",
 CellChangeTimes->{{3.757707693055922*^9, 3.7577076948058662`*^9}, {
  3.7628926625129557`*^9, 
  3.762892664933724*^9}},ExpressionUUID->"9764d62a-13d8-4273-861c-\
c2aab0ea6f24"],

Cell[CellGroupData[{

Cell["Lexer tokens definition", "Section",
 CellChangeTimes->{{3.758399824330983*^9, 3.758399825304015*^9}, {
  3.761427194757874*^9, 
  3.761427199685686*^9}},ExpressionUUID->"bab3d486-94e8-495d-b547-\
0903f2fcb95e"],

Cell["\<\
Here we define the tokens that will be recognized by the lexer.\
\>", "Text",
 CellChangeTimes->{{3.762892857688925*^9, 
  3.7628928694794617`*^9}},ExpressionUUID->"3c77fe03-00e4-4637-85bd-\
4d5bd8a422da"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tokenSymbols", " ", "=", " ", 
   RowBox[{"CreateTokens", "[", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\< \>\"", ",", "\"\<Whitespace\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<\\n\>\"", ",", " ", "\"\<LineBreak\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<:\>\"", ",", " ", "\"\<IncompleteAssign\>\""}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<:=\>\"", ",", " ", "\"\<Assign\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<*\>\"", ",", " ", "\"\<Times\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\</\>\"", ",", " ", "\"\<Slash\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<+\>\"", ",", " ", "\"\<Plus\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<-\>\"", ",", " ", "\"\<Minus\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<=\>\"", ",", " ", "\"\<Equal\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<#\>\"", ",", " ", "\"\<NotEqual\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<(\>\"", ",", " ", "\"\<LeftParenthesis\>\""}], "}"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<)\>\"", ",", " ", "\"\<RightParenthesis\>\""}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<;\>\"", ",", " ", "\"\<Semicolon\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<,\>\"", ",", " ", "\"\<Comma\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<.\>\"", ",", " ", "\"\<Dot\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<>\>\"", ",", " ", "\"\<Greater\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<>=\>\"", ",", " ", "\"\<GreaterOrEqual\>\""}], "}"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<<\>\"", ",", " ", "\"\<Lower\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<<=\>\"", ",", " ", "\"\<LowerOrEqual\>\""}], "}"}]}], 
     "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tokenKeywords", " ", "=", " ", 
   RowBox[{"CreateTokens", "[", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<const\>\"", ",", " ", "\"\<Const\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<var\>\"", ",", " ", "\"\<Var\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<procedure\>\"", ",", " ", "\"\<Procedure\>\""}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<call\>\"", ",", " ", "\"\<Call\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<print\>\"", ",", " ", "\"\<Print\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<drawsetrow\>\"", ",", " ", "\"\<DrawSetRow\>\""}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<drawsetcol\>\"", ",", " ", "\"\<DrawSetCol\>\""}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<draw\>\"", ",", " ", "\"\<Draw\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<begin\>\"", ",", " ", "\"\<Begin\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<end\>\"", ",", " ", "\"\<End\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<if\>\"", ",", " ", "\"\<If\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<then\>\"", ",", " ", "\"\<Then\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<while\>\"", ",", " ", "\"\<While\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<do\>\"", ",", " ", "\"\<Do\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<odd\>\"", ",", " ", "\"\<Odd\>\""}], "}"}]}], 
     "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757707294752634*^9, 3.757707329734219*^9}, {
   3.757708239562243*^9, 3.757708247301545*^9}, {3.758396841840823*^9, 
   3.758396857327552*^9}, {3.758397220477949*^9, 3.7583972258113413`*^9}, {
   3.7586540231677933`*^9, 3.7586540433465843`*^9}, {3.7640916531549387`*^9, 
   3.764091655556806*^9}, 3.7640919025377913`*^9, {3.764092625912541*^9, 
   3.764092626363543*^9}, {3.764092702768461*^9, 3.764092744046969*^9}, 
   3.764103686222761*^9, {3.774378385404759*^9, 3.774378386026113*^9}, {
   3.8091221406371117`*^9, 3.8091221466985235`*^9}, {3.8091232177097845`*^9, 
   3.809123235873993*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"478722ae-2361-477f-afb1-f1ba00b38f86"],

Cell[CellGroupData[{

Cell["Lexer token implementation", "Subsection",
 CellChangeTimes->{{3.77437839444705*^9, 
  3.7743784163914127`*^9}},ExpressionUUID->"655942da-a426-4e7a-bd69-\
3f58f8e65073"],

Cell["\<\
Here we implement Regex recognizers for several types of expressions like \
keywords, variable identifiers, number literals, etc.\
\>", "Text",
 CellChangeTimes->{{3.774378431638988*^9, 3.774378449606865*^9}, {
  3.80920320502435*^9, 
  3.809203238631569*^9}},ExpressionUUID->"f19f855a-7970-4d59-af39-\
e7454ccfb8e9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Print", "[", "\"\<Initializing tokenizer...\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tokenSymbolsRecognizer", " ", "=", " ", 
   RowBox[{"CreateTokenRecognizer", "[", "tokenSymbols", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"keywordRecognizer", " ", "=", " ", 
    RowBox[{"CreateTokenRecognizer", "[", "tokenKeywords", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"identifierRegex", " ", "=", 
   RowBox[{"RegexConcatenation", "[", 
    RowBox[{
     RowBox[{"RegexAlphabet", "[", "]"}], ",", 
     RowBox[{"RegexStar", "[", 
      RowBox[{"RegexUnion", "[", 
       RowBox[{
        RowBox[{"RegexAlphabet", "[", "]"}], ",", 
        RowBox[{"RegexDigits", "[", "]"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numberLiteralRegex", " ", "=", " ", 
    RowBox[{"RegexConcatenation", "[", 
     RowBox[{
      RowBox[{"RegexDigits", "[", "]"}], ",", 
      RowBox[{"RegexStar", "[", 
       RowBox[{"RegexDigits", "[", "]"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"identifierRecognizer", " ", "=", " ", 
   RowBox[{"Regex", "[", 
    RowBox[{"identifierRegex", ",", "\"\<Identifier\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numberLiteralRecognizer", " ", "=", " ", 
   RowBox[{"Regex", "[", 
    RowBox[{"numberLiteralRegex", ",", "\"\<NumberLiteral\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"symbolRecognizer", "=", " ", 
   RowBox[{"RegexUnion", "[", 
    RowBox[{
    "identifierRecognizer", ",", "numberLiteralRecognizer", ",", 
     "tokenSymbolsRecognizer"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Done.\>\"", "]"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8101529254660025`*^9, 3.810152941264868*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"8f5cd4aa-f52d-499f-b235-79059991770d"],

Cell[CellGroupData[{

Cell[BoxData["\<\"Initializing tokenizer...\"\>"], "Print",
 CellChangeTimes->{3.810218152122899*^9},
 CellLabel->
  "Durante la evaluaci\[OAcute]n de \
In[117]:=",ExpressionUUID->"21f1ae0f-e7a5-4a48-beac-294e208d13ce"],

Cell[BoxData["\<\"Done.\"\>"], "Print",
 CellChangeTimes->{3.810218162485495*^9},
 CellLabel->
  "Durante la evaluaci\[OAcute]n de \
In[117]:=",ExpressionUUID->"f626858e-fcb2-41e6-91e4-f5035aec1f65"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Grammar definition", "Section",
 CellChangeTimes->{{3.758399830686873*^9, 3.7583998314688797`*^9}, {
  3.761427205364833*^9, 
  3.7614272070327377`*^9}},ExpressionUUID->"eaca36e0-bc36-4820-9969-\
a42cd00fd781"],

Cell[CellGroupData[{

Cell["Grammar implementation", "Subsection",
 CellChangeTimes->{{3.774378525174053*^9, 
  3.774378527830106*^9}},ExpressionUUID->"af328258-decf-4582-854a-\
fe279af1645e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Variable", " ", "name", " ", "generator"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"currentVar", " ", "=", " ", "None"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"index", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ResetVarGenerator", "[", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"index", " ", "=", " ", "0"}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NewVar", "[", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"currentVar", " ", "=", " ", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"\"\<$\>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"index", "++"}], "]"}]}], "]"}]}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CurrentVar", "[", "]"}], ":=", "currentVar"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CurrentVar", "[", "s_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"s", ",", "currentVar"}], "]"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Label", " ", "name", " ", "generator"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"currentLabel", " ", "=", " ", "None"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"labelIndex", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ResetLabelGenerator", "[", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"labelIndex", " ", "=", " ", "0"}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NewLabel", "[", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"currentLabel", " ", "=", " ", 
       RowBox[{"ToString", "[", 
        RowBox[{"labelIndex", "++"}], "]"}]}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CurrentLabel", "[", "s_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"currentLabel", ",", "\"\<::\>\"", ",", "s"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"LineJoin", "[", "l_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"DeleteCases", "[", 
         RowBox[{"l", ",", "\"\<\>\""}], "]"}], ",", "\"\< \>\""}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ColumnJoin", "[", "l_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"DeleteCases", "[", 
         RowBox[{"l", ",", "\"\<\>\""}], "]"}], ",", "\"\<\\n\>\""}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"LabelIdentifier", "[", "s_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<<\>\"", ",", "s", ",", "\"\<>\>\""}], "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7609730519802227`*^9, 3.7609730536340218`*^9}, {
   3.760973257256879*^9, 3.760973322106689*^9}, {3.760973372019713*^9, 
   3.760973376831653*^9}, {3.762634526421596*^9, 3.762634555424038*^9}, {
   3.7628105357747383`*^9, 3.762810613774233*^9}, {3.7628106523421717`*^9, 
   3.762810666325725*^9}, {3.762810824912396*^9, 3.7628108275675097`*^9}, {
   3.762811319356358*^9, 3.762811325037032*^9}, 3.762811870991556*^9, {
   3.763901883340357*^9, 3.7639019087108088`*^9}, {3.7651311779375973`*^9, 
   3.765131254193158*^9}, {3.7651314699908314`*^9, 3.765131491980096*^9}, {
   3.7651315478680496`*^9, 3.7651315482383947`*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"a42c14cc-f192-4d04-8fdf-01492960e98c"],

Cell[TextData[{
 "The grammar will be specified in the form\n<|\[CloseCurlyDoubleQuote]From\
\[CloseCurlyDoubleQuote]-> ",
 StyleBox["label",
  FontSlant->"Italic"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\"\<To\>\"", "->", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["X", "1"], ",", "...", " ", ",", " ", 
      SubscriptBox["X", "n"]}]}]}], TraditionalForm]],ExpressionUUID->
  "0407cf2c-24bd-4075-8da1-20896b25f507"],
 "}, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\"\<Action\>\"", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       SubscriptBox["l", "1"], "\[RuleDelayed]", " ", 
       SubscriptBox["f", "1"]}], ",", "...", " ", ",", " ", 
      RowBox[{
       SubscriptBox["l", "m"], "\[RuleDelayed]", " ", 
       SubscriptBox["f", "m"]}]}]}]}], TraditionalForm]],ExpressionUUID->
  "8c516eb1-5549-4d6a-8911-bf2c34ab69a8"],
 "} |>\nwhere ",
 StyleBox["label",
  FontSlant->"Italic"],
 " is the name of a NonTerminal,  each ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["X", "i"], TraditionalForm]],ExpressionUUID->
  "c103aa69-21f3-4e05-8b9a-a610386e06a2"],
 " is a Terminal or NonTerminal, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["l", "i"], TraditionalForm]],ExpressionUUID->
  "9b325b66-d3d8-4263-a6b8-b6073fd0633a"],
 "is a property of the NonTerm[",
 StyleBox["label",
  FontSlant->"Italic"],
 "] and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", "i"], TraditionalForm]],ExpressionUUID->
  "62b03372-4034-4fc0-8dba-8f22393fa51b"],
 " are functions that are evaluated with values synthesized from ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["X", "1"], ",", "...", " ", ",", " ", 
    SubscriptBox["X", "n"]}], TraditionalForm]],ExpressionUUID->
  "48c24410-7269-4834-b42a-c14c96232e2e"],
 ".\n\nWe specify how each production rule transform to code by the tag \
\[OpenCurlyDoubleQuote]TACode\[CloseCurlyDoubleQuote] which is an acronym for \
\[OpenCurlyDoubleQuote]Three Address Code\[CloseCurlyDoubleQuote]. This will \
be explained in the next section where the parse tree will be synthesized."
}], "Text",
 CellChangeTimes->{{3.7640877819252777`*^9, 3.764088093682035*^9}, {
  3.809203356465674*^9, 
  3.80920348210518*^9}},ExpressionUUID->"ac577951-24cd-4ded-9481-\
e7b49b4e162d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"grammar", " ", "=", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", "Program", " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Program\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Dot\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], "[", 
           "\"\<TACode\>\"", "]"}]}], "}"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Block\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<ConstOpt\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<VarOpt\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<ProcRep\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              "\"\<return\>\"", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<ProcRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<ConstOpt\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<VarOpt\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ConstOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Const\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Equal\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<ConstOptRep\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<declare_const\>\"", ",", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "[", 
               "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ConstOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ConstOptRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Comma\>\"", "]"}], ",", " ", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Equal\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<ConstOptRep\>\"", "]"}]}], "}"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
          RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"LineJoin", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<declare_const\>\"", ",", 
                RowBox[{"LabelIdentifier", "[", 
                 RowBox[{
                  RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "[", 
                 "\"\<Value\>\"", "]"}]}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<ConstOptRep\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ConstOptRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<VarOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Var\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<VarOptRep\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<declare_var\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<VarOptRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<VarOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<VarOptRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Comma\>\"", "]"}], ",", " ", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<VarOptRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<declare_var\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<VarOptRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<VarOptRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ProcRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Procedure\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<ProcRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<begin_proc\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<end_proc\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<ProcRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ProcRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "Statements", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Assign\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}]}], "}"}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<set\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Call\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<call\>\"", ",", " ", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Print\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<print\>\"", ",", " ", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Drawing", " ", "function"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<DrawSetRow\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<drawsetrow\>\"", ",", " ", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<DrawSetRow\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}]}], "}"}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<drawsetrow\>\"", ",", " ", 
              RowBox[{
               RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "[", 
               "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<DrawSetCol\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<drawsetcol\>\"", ",", " ", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<DrawSetCol\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}]}], "}"}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<drawsetcol\>\"", ",", " ", 
              RowBox[{
               RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "[", 
               "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Draw\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<draw\>\"", ",", " ", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Begin\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<End\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<If\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Then\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{"NewLabel", "[", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], "[", 
                  "\"\<Conditional\>\"", "]"}], ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentLabel", "[", "\"\<L\>\"", "]"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<label\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentLabel", "[", "\"\<L\>\"", "]"}], "]"}]}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<While\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Do\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{"NewLabel", "[", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<label\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentLabel", "[", "\"\<L1\>\"", "]"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], "[", 
                  "\"\<Conditional\>\"", "]"}], ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentLabel", "[", "\"\<L2\>\"", "]"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<goto\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentLabel", "[", "\"\<L1\>\"", "]"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<label\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentLabel", "[", "\"\<L2\>\"", "]"}], "]"}]}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<StatementRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}]}], "}"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<StatementRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "Conditionals", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Condition\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Odd\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}]}], "}"}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<odd\>\"", ",", 
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_odd\>\""}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Condition\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<Expression1\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Op\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Expression2\>\"", "]"}]}], "}"}]}], 
       ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Expression1\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Expression2\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<compare\>\"", ",", 
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Expression2\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}], ",", 
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Expression1\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<Conditional\>\"", "\[Rule]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Op\>\"", "]"}], "[", 
            "\"\<Conditional\>\"", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Expression1\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<TACode\>\"", "]"}]}]}], "}"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Expression2\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<TACode\>\"", "]"}]}]}], "}"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Equal\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_equal\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<NotEqual\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_not_equal\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Lower\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_less\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<LowerOrEqual\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Conditional\>\"", "\[Rule]", "\"\<if_less_or_equal\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Greater\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_greater\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<GreaterOrEqual\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Conditional\>\"", "\[Rule]", "\"\<if_greater_or_equal\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Numeric", " ", "expressions"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Expression\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<SignOpt\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", " ", "\"\<\>\""}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "AddRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<SignOpt\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", " ", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]}],
            "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "AddRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<SignOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Plus\>\"", "]"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<+\>\""}], "}"}]}]}], "|>"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<SignOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Minus\>\"", "]"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<-\>\""}], "}"}]}]}], "|>"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<SignOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<AddRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Plus\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", " ", "\"\<\>\""}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "AddRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<add\>\""}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "AddRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<add\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<AddRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Minus\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", " ", "\"\<\>\""}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "AddRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<substract\>\""}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "AddRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<substract\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<AddRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Term\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", "\"\<\>\""}], " ", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "MultRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]}],
            "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "MultRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<MultRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Times\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", "\"\<\>\""}], " ", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "MultRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", " ", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<multiply\>\""}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "MultRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<multiply\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<MultRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Slash\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", "\"\<\>\""}], " ", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", " ", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<divide\>\""}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "MultRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<divide\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<MultRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Factor\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{"LabelIdentifier", "[", 
            RowBox[{
             RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
             "\"\<Value\>\"", "]"}], "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Factor\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", 
           RowBox[{
            RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Factor\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<LeftParenthesis\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<RightParenthesis\>\"", "]"}]}], "}"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<TACode\>\"", "]"}]}]}], "}"}]}]}], "|>"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.757708463418523*^9, {3.758397084945386*^9, 3.7583971201135187`*^9}, {
   3.758397259771913*^9, 3.758397262037738*^9}, {3.758397357164755*^9, 
   3.7583973926301126`*^9}, {3.758397428460285*^9, 3.758397549530447*^9}, {
   3.758397602835465*^9, 3.758397620280055*^9}, {3.758654815982897*^9, 
   3.758654920895102*^9}, {3.7586549522277317`*^9, 3.7586552128488607`*^9}, {
   3.758655252497868*^9, 3.758655340564067*^9}, 3.758655412726343*^9, {
   3.758657086580977*^9, 3.7586571036949987`*^9}, {3.758658126395973*^9, 
   3.7586581370928183`*^9}, {3.758658423276381*^9, 3.7586584450004463`*^9}, {
   3.758658497772645*^9, 3.758658644329619*^9}, {3.758658676355166*^9, 
   3.7586586821468887`*^9}, {3.758662144653244*^9, 3.758662188518877*^9}, {
   3.758662232086268*^9, 3.758662260290092*^9}, {3.758662296403809*^9, 
   3.758662631794086*^9}, {3.758663063941772*^9, 3.758663067888268*^9}, {
   3.758663780691115*^9, 3.758663790049144*^9}, {3.7586638387129*^9, 
   3.75866397188455*^9}, {3.758664037881525*^9, 3.7586640724907417`*^9}, {
   3.7586641596355877`*^9, 3.758664229787222*^9}, {3.7586642602104187`*^9, 
   3.758664484551022*^9}, {3.758664535540159*^9, 3.758664609068871*^9}, {
   3.7614193173266*^9, 3.761419710447349*^9}, {3.761419742605357*^9, 
   3.761419782932187*^9}, {3.7614200279841547`*^9, 3.7614200473975563`*^9}, 
   3.761424933878924*^9, {3.761425000770694*^9, 3.7614250722860193`*^9}, {
   3.7614251560524406`*^9, 3.761425190091009*^9}, {3.761425230171857*^9, 
   3.761425255125432*^9}, {3.761425310444149*^9, 3.761425340445744*^9}, 
   3.761425411509207*^9, {3.761425442157999*^9, 3.761425530314145*^9}, {
   3.761425654073043*^9, 3.76142568841543*^9}, {3.761425755367526*^9, 
   3.7614258073040733`*^9}, {3.761425863866975*^9, 3.761425889886579*^9}, {
   3.7614259756734247`*^9, 3.761426027062324*^9}, {3.762461731416399*^9, 
   3.762461797428293*^9}, {3.762461841588917*^9, 3.7624618643312397`*^9}, {
   3.7624629746705914`*^9, 3.762463003210812*^9}, {3.76246305172112*^9, 
   3.7624630821568317`*^9}, {3.762464979008932*^9, 3.7624649806341467`*^9}, 
   3.762465097647737*^9, {3.762465631189554*^9, 3.762465633616901*^9}, {
   3.762526611476314*^9, 3.762526612440469*^9}, {3.762527042446353*^9, 
   3.762527100683155*^9}, {3.7625272215647917`*^9, 3.76252722308502*^9}, {
   3.762527270632585*^9, 3.762527305429284*^9}, 3.762527388160746*^9, {
   3.762527532196085*^9, 3.7625275555056*^9}, {3.7625275922416267`*^9, 
   3.7625276063844767`*^9}, {3.762528089673645*^9, 3.762528089854987*^9}, {
   3.762542531438052*^9, 3.762542581202112*^9}, 3.762542614244337*^9, {
   3.76254389251585*^9, 3.762543895619216*^9}, 3.762544878222232*^9, 
   3.762544976093575*^9, {3.762545010850215*^9, 3.762545016794711*^9}, {
   3.762554428487412*^9, 3.762554519336939*^9}, {3.762554677524194*^9, 
   3.7625546821081057`*^9}, {3.762554818638681*^9, 3.762554819696615*^9}, {
   3.7625552881866417`*^9, 3.762555294184272*^9}, {3.762555617980438*^9, 
   3.76255569134691*^9}, {3.762556682810298*^9, 3.7625567501901093`*^9}, {
   3.762557443523364*^9, 3.762557485560464*^9}, {3.762557561734536*^9, 
   3.762557563938469*^9}, 3.7625581988291903`*^9, {3.762558235466861*^9, 
   3.762558260192402*^9}, {3.762632586068125*^9, 3.7626326076588793`*^9}, {
   3.7626326428123817`*^9, 3.762632649446107*^9}, {3.7626337660959053`*^9, 
   3.762633782459092*^9}, {3.762634377369495*^9, 3.762634428418358*^9}, 
   3.762634513371749*^9, {3.7626346100758657`*^9, 3.762634697766529*^9}, {
   3.7626350276827803`*^9, 3.762635112107459*^9}, {3.7626361767729187`*^9, 
   3.762636253815197*^9}, {3.76263666115584*^9, 3.7626366656826057`*^9}, {
   3.762803591480563*^9, 3.7628036051011753`*^9}, {3.762803802918893*^9, 
   3.762803840307683*^9}, {3.762804136688395*^9, 3.762804186983327*^9}, 
   3.762804220850264*^9, {3.7628042512732477`*^9, 3.762804341848919*^9}, {
   3.76280438079278*^9, 3.762804390669153*^9}, {3.762804421769392*^9, 
   3.76280446139423*^9}, {3.762804497230981*^9, 3.762804497586347*^9}, {
   3.762804553848971*^9, 3.762804594034915*^9}, {3.7628046403500977`*^9, 
   3.762804641385178*^9}, {3.762804705687111*^9, 3.762804739348929*^9}, 
   3.762804818218153*^9, {3.762804867648096*^9, 3.7628048770622787`*^9}, {
   3.7628049980523653`*^9, 3.762805002867304*^9}, {3.762805270775476*^9, 
   3.762805295660387*^9}, {3.762805460076379*^9, 3.762805487481439*^9}, {
   3.762805603662918*^9, 3.7628056636639547`*^9}, {3.7628057254868593`*^9, 
   3.762805759318329*^9}, {3.762806195138658*^9, 3.7628062252523613`*^9}, {
   3.762806312494196*^9, 3.762806330706641*^9}, {3.7628063675477448`*^9, 
   3.762806379877239*^9}, {3.762806736080415*^9, 3.762806773843936*^9}, {
   3.762811094800206*^9, 3.762811099453433*^9}, {3.76281113670343*^9, 
   3.7628112378503103`*^9}, {3.762811271642569*^9, 3.762811288309873*^9}, {
   3.762811415932268*^9, 3.762811506010005*^9}, {3.762811585693389*^9, 
   3.762811708633666*^9}, {3.76281192222262*^9, 3.7628119789093227`*^9}, {
   3.762812035201005*^9, 3.762812076505178*^9}, {3.7628795878950243`*^9, 
   3.762879607153058*^9}, {3.762879656353517*^9, 3.762879695501746*^9}, {
   3.7628799161968927`*^9, 3.7628800197510357`*^9}, {3.762880049819096*^9, 
   3.762880113712551*^9}, {3.762880839855822*^9, 3.762880852948409*^9}, {
   3.762880935007348*^9, 3.762881030288554*^9}, {3.7628823885801897`*^9, 
   3.762882393348343*^9}, {3.762882525771327*^9, 3.7628825787591877`*^9}, {
   3.762882609494554*^9, 3.762882657567606*^9}, {3.763901210998481*^9, 
   3.76390121763516*^9}, {3.763901686271734*^9, 3.763901724483602*^9}, {
   3.76390179532345*^9, 3.7639018243978453`*^9}, {3.7639019213319263`*^9, 
   3.7639019615814323`*^9}, {3.763901992333843*^9, 3.7639020798114843`*^9}, {
   3.7639021873372707`*^9, 3.763902225235034*^9}, {3.763909917806077*^9, 
   3.763909921028821*^9}, {3.763909961920467*^9, 3.763909970460782*^9}, {
   3.763910253653021*^9, 3.763910254018202*^9}, {3.76391116365902*^9, 
   3.76391117974481*^9}, {3.763911280092414*^9, 3.763911280738295*^9}, {
   3.7639222692984877`*^9, 3.763922283023196*^9}, {3.7639223238103323`*^9, 
   3.76392246701787*^9}, {3.7639226296376734`*^9, 3.763922633061536*^9}, {
   3.7639227035432568`*^9, 3.763922714687293*^9}, {3.7639228808370504`*^9, 
   3.7639229135344753`*^9}, {3.7639256425343113`*^9, 
   3.7639256428029227`*^9}, {3.763929198946018*^9, 3.763929202857572*^9}, {
   3.7639292385854945`*^9, 3.7639292697422733`*^9}, {3.7651305523571887`*^9, 
   3.765130584756879*^9}, {3.765130670314868*^9, 3.7651306757114697`*^9}, {
   3.7651315136047897`*^9, 3.7651315279690866`*^9}, {3.765131574042128*^9, 
   3.765131578895877*^9}, {3.776614718208069*^9, 3.7766147231378937`*^9}, {
   3.776614846008522*^9, 3.776614849226101*^9}, 3.789679905987267*^9, {
   3.8091225432709026`*^9, 3.8091225606237736`*^9}, {3.8091226681269417`*^9, 
   3.809122678627108*^9}, {3.8091231488928022`*^9, 3.8091231985841303`*^9}, {
   3.809181448189434*^9, 3.809181458332364*^9}, {3.8091815041997633`*^9, 
   3.8091815069522653`*^9}, {3.809181569408637*^9, 3.809181680615775*^9}, {
   3.8091845681124363`*^9, 3.809184568299345*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"2acc6ca5-763c-47d1-84db-b9bd9d839b1a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parse tree synthesization", "Section",
 CellChangeTimes->{{3.7611817904477463`*^9, 
  3.761181802004003*^9}},ExpressionUUID->"9c27967f-b76e-4636-b78f-\
dd471b343e8a"],

Cell[TextData[{
 StyleBox["GetAction",
  FontWeight->"Bold"],
 "[",
 StyleBox["treeSymbol",
  FontSlant->"Italic"],
 ", ",
 StyleBox["parseTree",
  FontSlant->"Italic"],
 "] returns the semantic action corresponding to the parseTree. \n",
 StyleBox["SynthesizeNonTerm",
  FontWeight->"Bold"],
 "[",
 StyleBox["treeSymbol",
  FontSlant->"Italic"],
 ", ",
 StyleBox["parseTree",
  FontSlant->"Italic"],
 ", ",
 StyleBox["synthesizations",
  FontSlant->"Italic"],
 "] creates the synthesization for the nonterminal ",
 StyleBox["treeSymbol",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["SynthesizeTerm",
  FontWeight->"Bold"],
 "[",
 StyleBox["treeSymbol",
  FontSlant->"Italic"],
 ", ",
 StyleBox["synthesizations",
  FontSlant->"Italic"],
 "] creates the synthesization for the terminal ",
 StyleBox["treeSymbol",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["SynthesizeTree",
  FontWeight->"Bold"],
 "[",
 StyleBox["parseTree",
  FontSlant->"Italic"],
 "] synthesizes the ",
 StyleBox["parseTree",
  FontSlant->"Italic"],
 " by using the semantic actions in the grammar."
}], "Text",
 CellChangeTimes->{{3.7640758088869257`*^9, 3.764075866560198*^9}, {
   3.764095011653508*^9, 3.764095088925386*^9}, 3.764095337430007*^9, {
   3.764095395705058*^9, 3.764095398384594*^9}, {3.764095457807238*^9, 
   3.764095881993065*^9}, {3.80920361121767*^9, 3.8092036190190353`*^9}, {
   3.809203657691167*^9, 3.8092036726015396`*^9}, {3.809203713001995*^9, 
   3.80920375668334*^9}, {3.8092037898276663`*^9, 3.8092038765651402`*^9}, {
   3.8101453813639975`*^9, 
   3.810145386477734*^9}},ExpressionUUID->"28779695-93ea-4fcf-81dd-\
8e351471075f"],

Cell[CellGroupData[{

Cell["Parse tree synthesization implementation", "Subsection",
 CellChangeTimes->{{3.774378599789208*^9, 
  3.774378606749395*^9}},ExpressionUUID->"78f7f39d-97ee-4a22-bf00-\
82d896e96dd5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GetAction", "[", 
    RowBox[{"treeSymbol_", ",", "parseTree_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"children", ",", "replaceTerms", ",", "action"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "\[IndentingNewLine]", "   ", 
      RowBox[{
       RowBox[{
       "Get", " ", "the", " ", "grammar", " ", "action", " ", "formatted", 
        " ", "for", " ", "a", " ", "given", " ", 
        RowBox[{"symbol", ".", " ", "For"}], " ", "example"}], ",", " ", 
       RowBox[{
       "for", " ", "a", " ", "parse", " ", "tree", " ", "where", " ", "the", 
        " ", "symbol", "\[IndentingNewLine]", "  ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], ",", "19"}], 
         "}"}], " ", "has", " ", "the", " ", "associated", " ", "action", 
        "\[IndentingNewLine]", "  ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"ColumnJoin", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "}"}], "]"}]}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", "   ", 
       RowBox[{"executing", "\[IndentingNewLine]", "  ", 
        RowBox[{"GetAction", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], ",", "19"}], 
           "}"}], ",", "parseTree"}], "]"}], " ", "will", " ", "return", 
        "\[IndentingNewLine]", "  ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"ColumnJoin", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], ",", 
                 "28"}], "}"}], "[", "\"\<TACode\>\"", "]"}], ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}], ",", 
                 "29"}], "}"}], "[", "\"\<TACode\>\"", "]"}]}], "}"}], 
            "]"}]}]}], "}"}]}]}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"children", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"First", "[", "parseTree", "]"}], ",", 
         RowBox[{
          RowBox[{"HoldPattern", "[", 
           RowBox[{"treeSymbol", "\[Rule]", "c_"}], "]"}], "\[RuleDelayed]", 
          "c"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"replaceTerms", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#", "]"}], "\[Rule]", 
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "2"}], "]"}]}], "&"}], ",", "children"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"action", " ", "=", " ", 
       RowBox[{"Last", "[", 
        RowBox[{"FirstCase", "[", 
         RowBox[{
          RowBox[{"Last", "[", "parseTree", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"treeSymbol", ",", "_"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ReplaceAll", "[", 
       RowBox[{"action", ",", "replaceTerms"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.760825821770403*^9, 3.760825871286762*^9}, {
  3.76099464053881*^9, 3.7609947380154133`*^9}, {3.760995232056304*^9, 
  3.76099523510536*^9}, {3.764024022490888*^9, 3.764024083963395*^9}, {
  3.764024267759354*^9, 3.764024362188842*^9}, {3.764024398627273*^9, 
  3.764024414010021*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"c1393acd-a91a-4d56-b0b8-30b4c6ca87ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SynthesizeNonTerm", "[", 
     RowBox[{"treeSymbol_", ",", "parseTree_", ",", "synthesizations_"}], 
     "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"eval", ",", "new"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Synthesize", " ", "from", " ", "values", " ", "obtained", " ", "in", 
        " ", "past", " ", "synthesizations"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"eval", " ", "=", " ", 
        RowBox[{"ReplaceAll", "[", 
         RowBox[{
          RowBox[{"GetAction", "[", 
           RowBox[{"treeSymbol", ",", "parseTree"}], "]"}], ",", 
          "synthesizations"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"eval", " ", "===", " ", 
          RowBox[{"Missing", "[", 
           RowBox[{"\"\<KeyAbsent\>\"", ",", "\"\<Action\>\""}], "]"}]}], ",",
          " ", 
         RowBox[{"Return", "[", "synthesizations", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"new", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"treeSymbol", "[", 
             RowBox[{"First", "[", "#", "]"}], "]"}], "\[Rule]", 
            RowBox[{"Last", "[", "#", "]"}]}], "&"}], ",", "eval"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"new", ",", "synthesizations"}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SynthesizeTerm", "[", 
    RowBox[{"treeSymbol_", ",", "synthesizations_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"eval", ",", "new"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Label", " ", "the", " ", "value", " ", "of", " ", "a", " ", 
       "Terminal"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "treeSymbol", "]"}], ">", "2"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Prepend", "[", 
        RowBox[{"synthesizations", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"treeSymbol", ",", "2"}], "]"}], "[", "\"\<Value\>\"", 
           "]"}], " ", "\[Rule]", 
          RowBox[{"Last", "[", "treeSymbol", "]"}]}]}], "]"}], ",", 
       "\[IndentingNewLine]", "synthesizations"}], "\[IndentingNewLine]", 
      "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7608259159282923`*^9, 3.7608261293502274`*^9}, {
   3.760993804648603*^9, 3.760993818856369*^9}, {3.760993962206794*^9, 
   3.760993964499547*^9}, {3.762464072031178*^9, 3.762464112064948*^9}, {
   3.7624643045761833`*^9, 3.762464390148593*^9}, 3.762464423827539*^9, {
   3.7624644673167963`*^9, 3.762464468165412*^9}, 3.762465283151471*^9, 
   3.764024512651712*^9, {3.7640248091439734`*^9, 3.7640248341747427`*^9}, {
   3.7640250122955647`*^9, 3.764025024633459*^9}},
 CellLabel->
  "In[142]:=",ExpressionUUID->"ba238ec1-0d0b-4e75-8354-4e3b9fc1e508"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SynthesizeTree", "[", "parseTree_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "startSymbol", ",", "depthFirstScan", ",", "symbolType", ",", 
       "synthesized"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ResetVarGenerator", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ResetLabelGenerator", "[", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Walk", " ", "the", " ", "parse", " ", "tree", " ", "in", " ", "post", 
        " ", "order"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"startSymbol", " ", "=", " ", 
       RowBox[{"parseTree", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1", ",", "1"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"depthFirstScan", " ", "=", " ", 
       RowBox[{"First", "[", 
        RowBox[{"Last", "[", 
         RowBox[{"Reap", "[", "\[IndentingNewLine]", 
          RowBox[{"DepthFirstScan", "[", 
           RowBox[{
            RowBox[{"Graph", "[", 
             RowBox[{"First", "[", "parseTree", "]"}], "]"}], ",", 
            "startSymbol", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<PostvisitVertex\>\"", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Sow", "[", "#", "]"}], "&"}], ")"}]}], "}"}]}], 
           "]"}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Synthesize", " ", "in", " ", "the", " ", "order", " ", "of", " ", 
        "the", " ", "depthfirstscan"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"synthesized", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"symbolType", " ", "=", " ", 
          RowBox[{"Head", "[", 
           RowBox[{"First", "[", "s", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"symbolType", " ", "===", " ", "Term"}], ",", 
           RowBox[{"synthesized", " ", "=", " ", 
            RowBox[{"SynthesizeTerm", "[", 
             RowBox[{"s", ",", "synthesized"}], "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"symbolType", " ", "===", " ", "NonTerm"}], ",", 
           RowBox[{"synthesized", " ", "=", " ", 
            RowBox[{"SynthesizeNonTerm", "[", 
             RowBox[{"s", ",", "parseTree", ",", "synthesized"}], "]"}]}]}], 
          "]"}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"s", ",", "depthFirstScan"}], "}"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "synthesized", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.760995468114646*^9, 3.760995495791847*^9}, {
   3.760995528748373*^9, 3.760995627884274*^9}, {3.760995678576338*^9, 
   3.7609957528479137`*^9}, {3.7609961296955547`*^9, 3.760996184585101*^9}, {
   3.7609962173561907`*^9, 3.76099627244386*^9}, {3.7609963440388603`*^9, 
   3.760996423791665*^9}, {3.7609964833759823`*^9, 3.7609965628952827`*^9}, {
   3.760996801168336*^9, 3.7609968020762367`*^9}, 3.760998078283998*^9, {
   3.7609981212385883`*^9, 3.7609981257699842`*^9}, 3.762464311752103*^9, {
   3.762464438154924*^9, 3.762464499620295*^9}, 3.7625262555643873`*^9, {
   3.7628108543121157`*^9, 3.762810855319008*^9}, {3.764025051879121*^9, 
   3.764025098640737*^9}, {3.7651312839477363`*^9, 3.765131285832206*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"41eadba4-aaab-4b73-a3f9-cd39b28aa352"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FormatSynthValues", "[", "groupedSynthetization_", "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"Level", "[", 
        RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
     "groupedSynthetization", ",", 
     RowBox[{"{", 
      RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Synthesis", "[", "parseTree_", "]"}], ":=", 
   RowBox[{"ReplaceAll", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NonTerm", "[", "\"\<Program\>\"", "]"}], ",", "1"}], "}"}], 
      "[", "\"\<TACode\>\"", "]"}], ",", 
     RowBox[{"SynthesizeTree", "[", "parseTree", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ViewSynthesisProcess", "[", "parseTree_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "grouped", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grouped", " ", "=", " ", 
       RowBox[{"GroupBy", "[", 
        RowBox[{
         RowBox[{"SynthesizeTree", "[", "parseTree", "]"}], ",", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"First", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Dataset", "@", 
       RowBox[{"Map", "[", 
        RowBox[{"FormatSynthValues", ",", "grouped"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.765129853840804*^9, 3.765129861382574*^9}, {
   3.765129909694837*^9, 3.7651299149816327`*^9}, 3.7651309454496574`*^9},
 CellLabel->
  "In[145]:=",ExpressionUUID->"22abf173-27f9-45a6-ad85-cb338a46eeab"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compilation to intermediate code", "Section",
 CellChangeTimes->{{3.764022746234024*^9, 3.764022752461858*^9}, {
  3.764072534378571*^9, 
  3.7640725571297827`*^9}},ExpressionUUID->"e848aa90-c17b-4546-b998-\
1e9f091280cb"],

Cell[TextData[{
 "Since the tree synthesization is L-Attributed, meaning that every node can \
only synthesize from its children, variables inside procedures \
\[OpenCurlyDoubleQuote]cannot see\[CloseCurlyDoubleQuote] if there is already \
another variable in the global space with the same name. This is not a \
problem since we can label variables inside procedures to differentiate them \
from their global counterparts. This is done by ",
 StyleBox["ProcedureProcessTags",
  FontWeight->"Bold"],
 " for each procedure. ",
 StyleBox["ICProcessTags",
  FontWeight->"Bold"],
 " does this but for the whole synthesized tree. The resulting code is a form \
of intermediate code that can be translated to any target machine.\n\n",
 StyleBox["ProcedureProcessLabels",
  FontWeight->"Bold"],
 "[",
 StyleBox["ic",
  FontSlant->"Italic"],
 ", ",
 StyleBox["from",
  FontSlant->"Italic"],
 ", ",
 StyleBox["to",
  FontSlant->"Italic"],
 ", ",
 StyleBox["globalVar",
  FontSlant->"Italic"],
 "] processes the procedure enclosed in [",
 StyleBox["from,",
  FontSlant->"Italic"],
 " ",
 StyleBox["to",
  FontSlant->"Italic"],
 "] changing the labels to reflect that symbols in the interval belong to the \
corresponding procedure. Labels in ",
 StyleBox["globalVars",
  FontSlant->"Italic"],
 " are left unprocessed.\n",
 StyleBox["ICProcessLabels",
  FontWeight->"Bold"],
 "[",
 StyleBox["ic",
  FontSlant->"Italic"],
 "] processes all the labels in ",
 StyleBox["ic",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["PL0ParseAndSynthesize",
  FontWeight->"Bold"],
 "[",
 StyleBox["code",
  FontSlant->"Italic"],
 "] returns ic without processing the labels.\n",
 StyleBox["PL0CompileToIC",
  FontWeight->"Bold"],
 "[",
 StyleBox["code",
  FontSlant->"Italic"],
 "] returns ic with processed labels.\n",
 StyleBox["PlotIC",
  FontWeight->"Bold"],
 "[",
 StyleBox["ic",
  FontSlant->"Italic"],
 "] graphical representation of IC."
}], "Text",
 CellChangeTimes->{{3.764075894024665*^9, 3.764076013256065*^9}, {
   3.764094002382374*^9, 3.764094022035236*^9}, {3.764094057341536*^9, 
   3.764094110302195*^9}, {3.764094186593615*^9, 3.7640943811534443`*^9}, {
   3.764094485550892*^9, 3.76409453417852*^9}, {3.7640946489472027`*^9, 
   3.764094715165184*^9}, {3.764096640684347*^9, 3.764096654093655*^9}, 
   3.774378653186307*^9},ExpressionUUID->"c27bdc3e-5b37-41e0-b989-\
0ba93f0e4bb9"],

Cell[CellGroupData[{

Cell["IC compilation implementation", "Subsection",
 CellChangeTimes->{{3.7743786795244637`*^9, 
  3.77437868776449*^9}},ExpressionUUID->"14e7312a-1791-43c5-a4d8-\
7223dab22de1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"IsLabelQ", "[", "s_", "]"}], ":=", 
   RowBox[{"And", "[", 
    RowBox[{
     RowBox[{"StringStartsQ", "[", 
      RowBox[{"s", ",", " ", "\"\<<\>\""}], "]"}], ",", " ", 
     RowBox[{"StringEndsQ", "[", 
      RowBox[{"s", ",", " ", "\"\<>\>\""}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IsTempQ", "[", "s_", "]"}], ":=", 
   RowBox[{"StringStartsQ", "[", 
    RowBox[{"s", ",", " ", "\"\<$\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InsertSequence", "[", 
     RowBox[{"l1_", ",", "l2_", ",", "n_"}], "]"}], ":=", 
    RowBox[{"FlattenAt", "[", 
     RowBox[{
      RowBox[{"Insert", "[", 
       RowBox[{"l1", ",", "l2", ",", "n"}], "]"}], ",", "n"}], "]"}]}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ProcedureProcessLabelsAndTemps", "[", 
    RowBox[{"ic_", ",", "from_", ",", "to_", ",", "globalVar_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "name", ",", "procInstructions", ",", "labels", ",", "tempSymbols", ",",
        "replaceLabelsRules", ",", "replaceTempSymbolsRules", ",", 
       "tempDeclarations", ",", "processed"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"name", " ", "=", " ", 
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"Extract", "[", 
           RowBox[{"ic", ",", 
            RowBox[{"{", "from", "}"}]}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<<\>\"", "~~", "x__", "~~", "\"\<>\>\""}], 
          "\[RuleDelayed]", "x"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"procInstructions", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Take", "[", 
         RowBox[{"ic", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"from", "+", "1"}], ",", 
            RowBox[{"to", "-", "1"}]}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"labels", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Select", "[", 
         RowBox[{"procInstructions", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"IsLabelQ", "[", "#", "]"}], "&&", 
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"globalVar", ",", "#"}], "]"}]}]}], "&"}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"tempSymbols", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Select", "[", 
         RowBox[{"procInstructions", ",", "IsTempQ"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"replaceLabelsRules", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "->", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"#", ",", 
             RowBox[{
              RowBox[{"\"\<<\>\"", "~~", "x__", "~~", "\"\<>\>\""}], 
              "\[RuleDelayed]", 
              RowBox[{"StringJoin", "[", 
               RowBox[{
               "\"\<<\>\"", ",", "name", ",", "\"\<::\>\"", ",", "x", ",", 
                "\"\<>\>\""}], "]"}]}]}], "]"}]}], "&"}], ",", "labels"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"replaceTempSymbolsRules", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[Rule]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{
            "\"\<<\>\"", ",", "name", ",", "\"\<::\>\"", ",", "#", ",", 
             "\"\<>\>\""}], "]"}]}], "&"}], ",", "tempSymbols"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"tempDeclarations", " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<declare_var\>\"", ",", 
          RowBox[{"replaceTempSymbolsRules", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"processed", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"ic", ",", 
           RowBox[{"{", 
            RowBox[{"from", ",", "to"}], "}"}]}], "]"}], ",", "  ", 
         RowBox[{"Join", "[", 
          RowBox[{"replaceLabelsRules", ",", "replaceTempSymbolsRules"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"processed", " ", "=", " ", 
       RowBox[{"InsertSequence", "[", 
        RowBox[{"processed", ",", "tempDeclarations", ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "processed", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GlobalProcessLabelsAndTemps", "[", "ic_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "procInstructions", ",", "tempSymbols", ",", "replaceTempSymbolsRules", 
       ",", "tempDeclarations", ",", "processed"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"procInstructions", " ", "=", " ", 
       RowBox[{"Flatten", "[", "ic", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"tempSymbols", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Select", "[", 
         RowBox[{"procInstructions", ",", "IsTempQ"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"replaceTempSymbolsRules", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[Rule]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"\"\<<\>\"", ",", "#", ",", "\"\<>\>\""}], "]"}]}], "&"}],
          ",", "tempSymbols"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"tempDeclarations", " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<declare_var\>\"", ",", 
          RowBox[{"replaceTempSymbolsRules", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"processed", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"ic", ",", "  ", "replaceTempSymbolsRules"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"processed", " ", "=", " ", 
       RowBox[{"InsertSequence", "[", 
        RowBox[{"processed", ",", "tempDeclarations", ",", 
         RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "processed", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GlobalProcessLabelsAndTemps", "[", 
    RowBox[{"{", "}"}], "]"}], " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ICProcessLabelsAndTemps", "[", "ic_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "splitted", ",", "preProc", ",", "pos", ",", "parts", ",", "processed", 
       ",", "postProc", ",", "globalVar", ",", "allProcessed", ",", 
       "procICCode"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"splitted", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"StringSplit", ",", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"ic", ",", "\"\<\\n\>\""}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"pos", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Position", "[", 
         RowBox[{"splitted", ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<begin_proc\>\"", ",", "_"}], "}"}], "|", 
           RowBox[{"{", 
            RowBox[{"\"\<end_proc\>\"", ",", "_"}], "}"}]}]}], "]"}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pos", " ", "\[NotEqual]", " ", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"preProc", " ", "=", " ", 
          RowBox[{"GlobalProcessLabelsAndTemps", "[", 
           RowBox[{"Take", "[", 
            RowBox[{"splitted", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{
                RowBox[{"First", "[", "pos", "]"}], "-", "1"}]}], "}"}]}], 
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"postProc", " ", "=", " ", 
          RowBox[{"GlobalProcessLabelsAndTemps", "[", 
           RowBox[{"Take", "[", 
            RowBox[{"splitted", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"Last", "[", "pos", "]"}], "+", "1"}], ",", 
               RowBox[{"Length", "[", "splitted", "]"}]}], "}"}]}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"globalVar", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{"preProc", ",", "postProc"}], "]"}], ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<declare_var\>\"", ",", "label_"}], "}"}], 
             "\[RuleDelayed]", "label"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"parts", " ", "=", " ", 
          RowBox[{"Partition", "[", 
           RowBox[{"pos", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"processed", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ProcedureProcessLabelsAndTemps", "[", 
              RowBox[{"splitted", ",", 
               RowBox[{"First", "[", "#", "]"}], ",", 
               RowBox[{"Last", "[", "#", "]"}], ",", "globalVar"}], "]"}], 
             "&"}], ",", "parts"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"allProcessed", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"preProc", ",", 
            RowBox[{"Concatenate", "[", "processed", "]"}], ",", "postProc"}],
            "]"}]}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"allProcessed", " ", "=", " ", 
          RowBox[{"GlobalProcessLabelsAndTemps", "[", "splitted", "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"procICCode", " ", "=", " ", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"LineJoin", ",", "allProcessed"}], "]"}], ",", 
          "\"\<\\n\>\""}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "procICCode", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.763904833914323*^9, 3.76390505537153*^9, 3.763905295972094*^9, {
   3.763905433648514*^9, 3.763905483114896*^9}, 3.7639231606859317`*^9, {
   3.76392344812033*^9, 3.763923464625123*^9}, {3.763923738514487*^9, 
   3.763923811789189*^9}, {3.7639239011047373`*^9, 3.7639239524263854`*^9}, {
   3.7639241662984285`*^9, 3.7639241995877523`*^9}, {3.7639242394717445`*^9, 
   3.763924240233402*^9}, {3.7640062615321417`*^9, 3.764006264795747*^9}, {
   3.7640063298311157`*^9, 3.764006337009076*^9}, {3.764006604065166*^9, 
   3.7640066227163143`*^9}, {3.764025129680373*^9, 3.7640251374154587`*^9}, {
   3.764025205770944*^9, 3.764025456006989*^9}, {3.764072566908717*^9, 
   3.764072567074822*^9}, {3.7640726500148153`*^9, 3.764072651358117*^9}, {
   3.7640727478525887`*^9, 3.7640727492991667`*^9}, {3.7640759277279*^9, 
   3.764075928164706*^9}, {3.7640941615064793`*^9, 3.764094178776134*^9}, {
   3.7640943974086657`*^9, 3.7640944119005938`*^9}, {3.765130332529325*^9, 
   3.765130332776949*^9}, 3.765130717487667*^9, {3.765130767739019*^9, 
   3.7651307741379037`*^9}, {3.765132149321958*^9, 3.765132164156349*^9}, {
   3.765132213493869*^9, 3.7651323382590327`*^9}, {3.765132620209343*^9, 
   3.7651326430687127`*^9}, {3.7651327329500213`*^9, 3.765132871667239*^9}, {
   3.765133431282016*^9, 3.7651334324016733`*^9}, {3.776521909595334*^9, 
   3.776521909761539*^9}, {3.810217741663907*^9, 3.8102177418362713`*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"c848c78a-2dc7-4cc4-802e-730ed5791ae5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PL0ParseAndSynthesize", "[", "code_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tokens", ",", "parseTree", ",", "synthesized"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Return", " ", "tree", " ", "synthesis", " ", "without", " ", "label", 
       " ", "processing", " ", 
       RowBox[{"(", 
        RowBox[{"may", " ", "present", " ", "namespace", " ", "conflicts"}], 
        ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", "\"\<Executing tokenizer...\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tokens", " ", "=", " ", 
       RowBox[{"Tokenize", "[", 
        RowBox[{"code", ",", "symbolRecognizer", ",", "keywordRecognizer"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<Done.\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<Executing parser...\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"parseTree", " ", "=", " ", 
       RowBox[{"Parse", "[", 
        RowBox[{"tokens", ",", "grammar"}], "]"}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<Done.\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<Synthesizing code...\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"synthesized", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Program\>\"", "]"}], ",", "1"}], 
           "}"}], "[", "\"\<TACode\>\"", "]"}], ",", 
         RowBox[{"SynthesizeTree", "[", "parseTree", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<Done.\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "synthesized", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PL0CompileToIC", "[", "code_", "]"}], ":=", 
   RowBox[{"ICProcessLabelsAndTemps", "[", 
    RowBox[{"PL0ParseAndSynthesize", "[", "code", "]"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7626367089823723`*^9, 3.762636766782731*^9}, {
   3.7628980858335342`*^9, 3.762898099815711*^9}, {3.763905307322874*^9, 
   3.763905337511778*^9}, {3.7640726533021317`*^9, 3.764072716397069*^9}, {
   3.764072766066375*^9, 3.76407279218095*^9}, {3.7640940451524277`*^9, 
   3.7640940713198347`*^9}, {3.764094415354356*^9, 3.764094417338195*^9}, 
   3.765132168408554*^9, 3.7651332132925663`*^9, {3.8101526305914125`*^9, 
   3.810152638040139*^9}, {3.8101527101147146`*^9, 3.8101528165552983`*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"1f4ba2ad-1aa7-4791-97d3-6ec9bca61f46"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PlotIC", "[", "ic_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"splitted", ",", "completed"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"splitted", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"StringSplit", ",", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"ic", ",", "\"\<\\n\>\""}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"completed", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"PadRight", "[", 
           RowBox[{"#", ",", "4", ",", "\"\<\>\""}], "]"}], "&"}], ",", 
         "splitted"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Grid", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{"completed", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Instruction\>\"", ",", "\"\<P1\>\"", ",", "\"\<P2\>\"", ",", 
            "\"\<P3\>\""}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "LightGreen", "}"}], ",", 
           RowBox[{"{", "LightRed", "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Frame", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.763906809269055*^9, 3.763906835055606*^9}, {
  3.7639069852779903`*^9, 3.763906989216365*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"aa414c37-2c7c-456c-a906-b24c3658adf7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assembly code generation", "Chapter",
 CellChangeTimes->{{3.7639309789488277`*^9, 3.7639309829615326`*^9}, {
  3.764022911705883*^9, 
  3.7640229143438597`*^9}},ExpressionUUID->"b017d5a2-87c9-4e7e-91df-\
a387a7036e0a"],

Cell[TextData[{
 "Intermediate code is converted directly to assembler by simple substitution \
rules. Also, some standard routines like multiplication or division have to \
be appended at the end of the ASM code since the target machine cannot handle \
these operations natively.",
 StyleBox["\n\nCompileICToASM",
  FontWeight->"Bold"],
 "[",
 StyleBox["ic",
  FontSlant->"Italic"],
 "] compiles intermediate code into assembler.\n",
 StyleBox["CompilePL0ToASM",
  FontWeight->"Bold"],
 "[",
 StyleBox["code",
  FontSlant->"Italic"],
 "] compiles PL/0 code into assembler."
}], "Text",
 CellChangeTimes->{{3.764093716992202*^9, 3.7640937515463133`*^9}, {
  3.764093911721326*^9, 3.764093939626471*^9}, {3.76409477267844*^9, 
  3.764094870669284*^9}, {3.764094943059992*^9, 3.764094945541771*^9}, {
  3.809204267766758*^9, 
  3.8092042930203156`*^9}},ExpressionUUID->"879fb1b6-80f7-4af9-acdc-\
84d8a1fff202"],

Cell[CellGroupData[{

Cell["Common routines", "Section",
 CellChangeTimes->{{3.764022941922776*^9, 
  3.76402294392103*^9}},ExpressionUUID->"7f3cc075-09af-44f8-9c44-\
b6957ce0d4ea"],

Cell["\<\
Since the target machine doesn\[CloseCurlyQuote]t have native instructions \
for implementing multiplication or division, we can add them as procedures \
and insert them in the resulting program if needed.\
\>", "Text",
 CellChangeTimes->{{3.764025506570635*^9, 3.764025550699106*^9}, {
  3.809204306588478*^9, 
  3.809204317987609*^9}},ExpressionUUID->"8e72bb1a-5b63-4b72-992d-\
0b45aa1a799e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "divisionRoutine", " ", "=", " ", 
   "\"\<Label <divide>\nLoadA <divide::zero>\nStore <divide::result>\nLabel \
<divide::begin_loop>\nLoadA <divide::result>\nIncrement\nStore \
<divide::result>\nLoadA <divide::n1>\nLoadB <divide::n2>\nSubstract\nStore \
<divide::n1>\nJumpNeg <divide::end_loop>\nJump <divide::begin_loop>\nLabel \
<divide::end_loop>\nLoadA <divide::result>\nDecrement\nReturn\nDeclare \
<divide::n1> 0\nDeclare <divide::n2> 0\nDeclare <divide::result> 0\nDeclare \
<divide::zero> 0\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "multiplicationRoutine", " ", "=", " ", 
   "\"\<Label <multiply>\nLoadA <multiply::zero>\nStore <multiply::result>\n\
Label <multiply::begin_loop>\nLoadA <multiply::result>\nLoadB <multiply::n2>\n\
Add\nStore <multiply::result>\nLoadA <multiply::n1>\nDecrement\nStore \
<multiply::n1>\nJumpZero <multiply::end_loop>\nJump <multiply::begin_loop>\n\
Label <multiply::end_loop>\nReturn\nDeclare <multiply::n1> 0\nDeclare \
<multiply::n2> 0\nDeclare <multiply::result> 0\nDeclare <multiply::zero> \
0\>\""}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7638476808446703`*^9, 3.763847717745531*^9}, {
  3.7638478024820347`*^9, 3.763847812178994*^9}, {3.763847859130041*^9, 
  3.7638479113551817`*^9}, {3.7638480601769753`*^9, 3.763848177249723*^9}, {
  3.763848690819522*^9, 3.763848716266214*^9}, {3.7639010170986843`*^9, 
  3.7639010243087797`*^9}, {3.7639882646803603`*^9, 3.7639882708365107`*^9}, {
  3.7639885525072536`*^9, 3.763988559079468*^9}},
 CellLabel->
  "In[158]:=",ExpressionUUID->"ef60b64b-229d-439b-8654-abdf197e1128"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Intermediate code to assembly conversion rules", "Section",
 CellChangeTimes->{{3.764022953542313*^9, 
  3.76402295999354*^9}},ExpressionUUID->"5fa14165-de6d-44b8-972e-\
c8fc98349efb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Intermediate", " ", "code", " ", "can", " ", "be", " ", "mapped", " ", 
    "directly", " ", "to", " ", "assembler", " ", "with", " ", "a", " ", 
    "substitution", " ", "rule"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"icToAsmRules", " ", "=", " ", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<call\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Call\>\"", ",", " ", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<print\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Print\>\"", ",", " ", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\"\<return\>\"", "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", "\"\<Return\>\"", "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<begin_proc\>\"", ",", "label_"}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Label\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<end_proc\>\"", ",", "_"}], "}"}], "\[RuleDelayed]", 
        "Nothing"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<label\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Label\>\"", ",", " ", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<goto\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Jump\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<declare_var\>\"", ",", "label_"}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Declare\>\"", ",", "label", ",", "\"\<0\>\""}], "}"}], 
         "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<declare_const\>\"", ",", "label_", ",", "n_"}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Declare\>\"", ",", "label", ",", "n"}], "}"}], "}"}]}],
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<drawsetrow\>\"", ",", " ", 
          RowBox[{"label_", "/;", 
           RowBox[{"IsLabelQ", "[", "label", "]"}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<LoadA\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<drawsetrow\>\"", ",", " ", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<drawsetcol\>\"", ",", " ", 
          RowBox[{"label_", "/;", 
           RowBox[{"IsLabelQ", "[", "label", "]"}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<LoadB\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<drawsetcol\>\"", ",", " ", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<SetB\>\"", ",", "n"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<draw\>\"", ",", " ", "label_"}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Draw\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<set\>\"", ",", 
          RowBox[{"out_", "/;", 
           RowBox[{"IsLabelQ", "[", "out", "]"}]}], ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<set\>\"", ",", 
          RowBox[{"out_", "/;", 
           RowBox[{"IsLabelQ", "[", "out", "]"}]}], ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<compare\>\"", ",", 
          RowBox[{"l1_", "/;", 
           RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
          RowBox[{"l2_", "/;", 
           RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadB\>\"", ",", "l2"}], "}"}], ",", 
          RowBox[{"{", "\"\<Substract\>\"", "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<compare\>\"", ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetB\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", "\"\<Substract\>\"", "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<compare\>\"", ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadB\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", "\"\<Substract\>\"", "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<if_less\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<JumpNeg\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<if_greater\>\"", ",", "label_"}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<JumpPos\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<if_equal\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<JumpNotZero\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<if_not_equal\>\"", ",", "label_"}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<JumpZero\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<if_less_or_equal\>\"", ",", "label_"}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<JumpNeg\>\"", ",", "label"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<JumpNotZero\>\"", ",", "label"}], "}"}]}], "}"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<if_greater_or_equal\>\"", ",", "label_"}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<JumpPos\>\"", ",", "label"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<JumpNotZero\>\"", ",", "label"}], "}"}]}], "}"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<if_odd\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<JumpOdd\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<odd\>\"", ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<odd\>\"", ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<add\>\"", ",", "out_", ",", 
          RowBox[{"l1_", "/;", 
           RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
          RowBox[{"l2_", "/;", 
           RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadB\>\"", ",", "l2"}], "}"}], ",", 
          RowBox[{"{", "\"\<Add\>\"", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<add\>\"", ",", "out_", ",", 
          RowBox[{"n1_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n1", "]"}]}]}], ",", 
          RowBox[{"n2_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n2", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetB\>\"", ",", "n2"}], "}"}], ",", 
          RowBox[{"{", "\"\<Add\>\"", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<add\>\"", ",", "out_", ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetB\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", "\"\<Add\>\"", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<add\>\"", ",", "out_", ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadB\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", "\"\<Add\>\"", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<substract\>\"", ",", "out_", ",", 
          RowBox[{"l1_", "/;", 
           RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
          RowBox[{"l2_", "/;", 
           RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadB\>\"", ",", "l2"}], "}"}], ",", 
          RowBox[{"{", "\"\<Substract\>\"", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<substract\>\"", ",", "out_", ",", 
          RowBox[{"n1_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n1", "]"}]}]}], ",", 
          RowBox[{"n2_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n2", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetB\>\"", ",", "n2"}], "}"}], ",", 
          RowBox[{"{", "\"\<Substract\>\"", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<substract\>\"", ",", "out_", ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetB\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", "\"\<Substract\>\"", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<substract\>\"", ",", "out_", ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadB\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", "\"\<Substract\>\"", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<multiply\>\"", ",", "out_", ",", 
          RowBox[{"l1_", "/;", 
           RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
          RowBox[{"l2_", "/;", 
           RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n1>\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n2>\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Call\>\"", ",", "\"\<<multiply>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<multiply\>\"", ",", "out_", ",", 
          RowBox[{"n1_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n1", "]"}]}]}], ",", 
          RowBox[{"n2_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n2", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n1>\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n2>\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Call\>\"", ",", "\"\<<multiply>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<multiply\>\"", ",", "out_", ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n1>\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n2>\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Call\>\"", ",", "\"\<<multiply>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<multiply\>\"", ",", "out_", ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n1>\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n2>\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Call\>\"", ",", "\"\<<multiply>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<divide\>\"", ",", "out_", ",", 
          RowBox[{"l1_", "/;", 
           RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
          RowBox[{"l2_", "/;", 
           RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n1>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n2>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Call\>\"", ",", "\"\<<divide>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<divide\>\"", ",", "out_", ",", 
          RowBox[{"n1_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n1", "]"}]}]}], ",", 
          RowBox[{"n2_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n2", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n1>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n2>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Call\>\"", ",", "\"\<<divide>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<divide\>\"", ",", "out_", ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n1>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n2>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Call\>\"", ",", "\"\<<divide>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<divide\>\"", ",", "out_", ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"!", 
            RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
          RowBox[{"l_", "/;", 
           RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n1>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n2>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Call\>\"", ",", "\"\<<divide>\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CompileICToASM", "[", "ic_", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"splitted", ",", "replaced", ",", "generatedCode"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"splitted", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{"StringSplit", ",", 
           RowBox[{"StringSplit", "[", 
            RowBox[{"ic", ",", "\"\<\\n\>\""}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"replaced", " ", "=", " ", 
         RowBox[{"ReplaceAll", "[", 
          RowBox[{"splitted", ",", "icToAsmRules"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"generatedCode", " ", "=", " ", 
         RowBox[{"ColumnJoin", "[", 
          RowBox[{"Map", "[", 
           RowBox[{"LineJoin", ",", 
            RowBox[{"Concatenate", "[", "replaced", "]"}]}], "]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringContainsQ", "[", 
           RowBox[{"generatedCode", ",", "\"\<multiply\>\""}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"generatedCode", " ", "=", " ", 
           RowBox[{"ColumnJoin", "[", 
            RowBox[{"{", 
             RowBox[{"generatedCode", ",", "multiplicationRoutine"}], "}"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringContainsQ", "[", 
           RowBox[{"generatedCode", ",", "\"\<divide\>\""}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"generatedCode", " ", "=", " ", 
           RowBox[{"ColumnJoin", "[", 
            RowBox[{"{", 
             RowBox[{"generatedCode", ",", "divisionRoutine"}], "}"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "generatedCode", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CompilePL0ToASM", "[", "code_", "]"}], ":=", 
     RowBox[{"CompileICToASM", "[", 
      RowBox[{"PL0CompileToIC", "[", "code", "]"}], "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.763927281574621*^9, 3.7639272913775125`*^9}, {
   3.7639273217825503`*^9, 3.7639273362481375`*^9}, {3.7639273844926815`*^9, 
   3.763927483733425*^9}, {3.7639275614069834`*^9, 3.763927630933*^9}, {
   3.7639277082615*^9, 3.763927756921644*^9}, {3.763927792995653*^9, 
   3.763927866686736*^9}, {3.763928313755015*^9, 3.763928453224635*^9}, {
   3.763928490639016*^9, 3.7639285087620764`*^9}, {3.7639285492344856`*^9, 
   3.7639286296204605`*^9}, {3.7639286603203683`*^9, 3.763928678646675*^9}, {
   3.763929048861393*^9, 3.7639290512382216`*^9}, {3.763929352566727*^9, 
   3.763929369511607*^9}, 3.7639302741160107`*^9, 3.7639309257311335`*^9, {
   3.763930994044549*^9, 3.7639311338287754`*^9}, {3.7639311964167967`*^9, 
   3.7639312113605413`*^9}, 3.76393164034319*^9, {3.763987799675012*^9, 
   3.7639878138461943`*^9}, {3.7639880086611996`*^9, 
   3.7639881270747986`*^9}, {3.7639882390943637`*^9, 
   3.7639882403399057`*^9}, {3.7639883005048475`*^9, 3.763988307294389*^9}, {
   3.7639883488449297`*^9, 3.7639884066381764`*^9}, {3.763988488964492*^9, 
   3.7639885137720613`*^9}, {3.764005137991982*^9, 3.764005194101966*^9}, {
   3.764005340144833*^9, 3.764005347704255*^9}, {3.764017638913231*^9, 
   3.7640176846050673`*^9}, {3.7640182103533583`*^9, 3.764018226680385*^9}, {
   3.764021287184041*^9, 3.764021333249374*^9}, {3.76402156788664*^9, 
   3.764021573472163*^9}, {3.764021906563171*^9, 3.764021908063236*^9}, {
   3.7640220818768063`*^9, 3.764022148319639*^9}, {3.764072820823607*^9, 
   3.76407286337079*^9}, {3.7640937596450233`*^9, 3.764093799478386*^9}, {
   3.809123482711048*^9, 3.8091235590468845`*^9}, {3.809182238398024*^9, 
   3.8091823037555847`*^9}, {3.8091823471232243`*^9, 
   3.8091823965152817`*^9}, {3.809182441605338*^9, 3.8091824454723234`*^9}, 
   3.809191792570627*^9, 3.8092102814414473`*^9},
 CellLabel->
  "In[160]:=",ExpressionUUID->"a0ecf0cb-d276-4822-8154-4dad909a4353"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cpuMnemonics", " ", "=", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
    "\"\<LoadA\>\"", ",", "\"\<LoadB\>\"", ",", "\"\<SetA\>\"", ",", 
     "\"\<SetB\>\"", ",", "\"\<Store\>\"", ",", "\"\<Add\>\"", ",", 
     "\[IndentingNewLine]", "\"\<Substract\>\"", ",", "\"\<Increment\>\"", 
     ",", "\"\<Decrement\>\"", ",", "\"\<Jump\>\"", ",", "\"\<JumpPos\>\"", 
     ",", "\"\<JumpNeg\>\"", ",", "\"\<JumpZero\>\"", ",", 
     "\"\<JumpNotZero\>\"", ",", "\"\<JumpOdd\>\"", ",", 
     "\[IndentingNewLine]", "\"\<Call\>\"", ",", "\"\<Return\>\"", ",", 
     "\"\<Print\>\"", ",", "\"\<Draw\>\""}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"opcodes", " ", "=", " ", 
   RowBox[{"Thread", "[", 
    RowBox[{"cpuMnemonics", "->", 
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"Tuples", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", "10"}], "]"}], ",", 
       RowBox[{"Length", "[", "cpuMnemonics", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DecimalToBinary", "[", 
     RowBox[{"n_", ",", 
      RowBox[{"size_", " ", ":", "10"}]}], "]"}], ":=", 
    RowBox[{"PadLeft", "[", 
     RowBox[{
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"n", ",", "2"}], "]"}], ",", "size"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetInstructions", "[", "asmcode_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"separated", ",", "completed"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"separated", " ", "=", " ", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"StringSplit", ",", 
           RowBox[{"StringSplit", "[", 
            RowBox[{"asmcode", ",", "\"\<\\n\>\""}], "]"}]}], "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"completed", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"separated", ",", 
         RowBox[{
          RowBox[{"l_", "/;", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", "l", "]"}], "\[Equal]", "1"}], ")"}]}], 
          "\[RuleDelayed]", 
          RowBox[{"Append", "[", 
           RowBox[{"l", ",", "0"}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "completed", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetPosition", "[", 
    RowBox[{"instructions_", ",", "token_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pos", ",", "labels", ",", "countingRules"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"pos", " ", "=", " ", 
       RowBox[{"Position", "[", 
        RowBox[{"instructions", ",", "token"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "pos", "]"}], ">", "1"}], ",", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"labels", " ", "=", " ", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"instructions", ",", 
          RowBox[{
           RowBox[{"pos", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", "1"}]}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"countingRules", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{"cpuMnemonics", "\[Rule]", "2"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<Label\>\"", "\[Rule]", "0"}], ",", 
           RowBox[{"\"\<Declare\>\"", "\[Rule]", "1"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Total", "[", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"labels", ",", "countingRules"}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ProcessTags", "[", "instructions_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"labels", ",", "variablePos"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"labels", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"instructions", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Label\>\"", ",", "tag_"}], "}"}], "\[RuleDelayed]", 
          RowBox[{"(", 
           RowBox[{"tag", "\[Rule]", 
            RowBox[{"GetPosition", "[", 
             RowBox[{"instructions", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Label\>\"", ",", "tag"}], "}"}]}], "]"}]}], 
           ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"variablePos", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"instructions", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Declare\>\"", ",", "tag_", ",", "value_"}], "}"}], 
          "\[RuleDelayed]", 
          RowBox[{"(", 
           RowBox[{"tag", "\[Rule]", 
            RowBox[{"GetPosition", "[", 
             RowBox[{"instructions", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Declare\>\"", ",", "tag", ",", "value"}], "}"}]}],
              "]"}]}], ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Join", "[", 
       RowBox[{"labels", ",", "variablePos"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MachineInstructions", "[", "instructions_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"setNumeric", ",", "removeLabels", ",", "replaceTags"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"setNumeric", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"instructions", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<Declare\>\"", ",", "_", ",", "value_"}], "}"}], 
            "\[RuleDelayed]", 
            RowBox[{"ToExpression", "[", "value", "]"}]}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<SetA\>\"", ",", "value_"}], "}"}], "\[RuleDelayed]", 
            RowBox[{"{", 
             RowBox[{"\"\<SetA\>\"", ",", 
              RowBox[{"ToExpression", "[", "value", "]"}]}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<SetB\>\"", ",", "value_"}], "}"}], "\[RuleDelayed]", 
            RowBox[{"{", 
             RowBox[{"\"\<SetB\>\"", ",", 
              RowBox[{"ToExpression", "[", "value", "]"}]}], "}"}]}]}], " ", 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"removeLabels", " ", "=", " ", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{"setNumeric", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Label\>\"", ",", "__"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"replaceTags", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"removeLabels", ",", 
         RowBox[{"ProcessTags", "[", "instructions", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "replaceTags", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AssemblyCompile", "[", "asmcode_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"linearized", ",", "rules", ",", " ", "machineCode"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"linearized", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"MachineInstructions", "[", 
          RowBox[{"GetInstructions", "[", "asmcode", "]"}], "]"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"rules", " ", "=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"opcodes", ",", 
          RowBox[{"n_Integer", "\[RuleDelayed]", 
           RowBox[{"DecimalToBinary", "[", "n", "]"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"machineCode", " ", "=", " ", 
        RowBox[{"ReplaceAll", "[", 
         RowBox[{"linearized", ",", "rules"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "machineCode", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PL0Compile", "[", 
     RowBox[{"inputFile_", ",", "outputFile_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "code", ",", "machineCode", ",", "machineCodeAsNumbers", ",", "ba", 
        ",", "file"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"code", " ", "=", " ", 
        RowBox[{"Import", "[", 
         RowBox[{"inputFile", ",", "\"\<Text\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"machineCode", " ", "=", " ", 
        RowBox[{"AssemblyCompile", "[", 
         RowBox[{"CompilePL0ToASM", "[", "code", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"machineCodeAsNumbers", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"FromDigits", "[", 
            RowBox[{"#", ",", "2"}], "]"}], "&"}], ",", "machineCode"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{
        "outputFile", ",", "machineCodeAsNumbers", ",", 
         "\"\<UnsignedInteger16\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]",
      "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "$ScriptCommandLine", "]"}], "\[Equal]", "3"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"PL0Compile", "[", 
     RowBox[{
      RowBox[{"$ScriptCommandLine", "[", 
       RowBox[{"[", "2", "]"}], "]"}], ",", 
      RowBox[{"$ScriptCommandLine", "[", 
       RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "\[IndentingNewLine]", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "\"\<Invalid number of arguments\>\"", "]"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7637522761713896`*^9, 3.7637522811397123`*^9}, {
   3.763752539119774*^9, 3.7637525403896*^9}, {3.7637527247948284`*^9, 
   3.7637527271068635`*^9}, {3.7637548583030324`*^9, 3.76375485857769*^9}, {
   3.7637553153862534`*^9, 3.7637553880654182`*^9}, {3.7637558657226906`*^9, 
   3.763755865970436*^9}, {3.763756147410583*^9, 3.7637562054495463`*^9}, 
   3.7637562744347906`*^9, {3.7637564279224844`*^9, 3.763756431393264*^9}, {
   3.763838942396756*^9, 3.763838942548704*^9}, {3.7638389773406134`*^9, 
   3.763838977428562*^9}, {3.763839149820098*^9, 3.7638391500286665`*^9}, {
   3.763839529434287*^9, 3.7638395589470053`*^9}, {3.763839658307597*^9, 
   3.7638396780988894`*^9}, {3.7638398759535704`*^9, 3.763839927433342*^9}, {
   3.7638423726453424`*^9, 3.763842461084761*^9}, {3.7638424982853947`*^9, 
   3.7638425028210163`*^9}, {3.763842557429591*^9, 3.76384256186103*^9}, {
   3.7638426343257217`*^9, 3.763842663868944*^9}, {3.7638428309498825`*^9, 
   3.763842847941127*^9}, {3.763842878869466*^9, 3.7638428929093585`*^9}, {
   3.7638429885961485`*^9, 3.763843044645608*^9}, {3.7638431853481216`*^9, 
   3.7638431986136203`*^9}, {3.763843235659871*^9, 3.763843289899954*^9}, {
   3.7638433246362762`*^9, 3.7638433378040004`*^9}, {3.763844822427657*^9, 
   3.763844826738652*^9}, {3.763900993434781*^9, 3.763901002347664*^9}, {
   3.7639886561561203`*^9, 3.763988683604949*^9}, {3.764007163873229*^9, 
   3.7640072314232893`*^9}, {3.764017705167431*^9, 3.764017732177135*^9}, {
   3.764093549755788*^9, 3.764093573752721*^9}, 3.764093813202981*^9, {
   3.764093864529208*^9, 3.764093882378508*^9}, {3.764286288967265*^9, 
   3.764286313385746*^9}, {3.8101450253056707`*^9, 3.810145050439103*^9}, {
   3.8101478549272895`*^9, 3.8101480174875584`*^9}, {3.810151936604901*^9, 
   3.8101519583174176`*^9}, {3.8101520514405985`*^9, 3.810152092150638*^9}, {
   3.810152500835251*^9, 3.810152504479659*^9}, {3.8102178055046616`*^9, 
   3.8102178056330404`*^9}, {3.810220893607871*^9, 3.8102209019381094`*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"6ac13288-6c04-4331-b630-834e0148a95d"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{949, 467},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, "TryRealOnly" -> False},
Magnification:>0.6 Inherited,
FrontEndVersion->"12.1 para Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"894c05a5-2df3-4de6-aad4-f78742684f6d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 257, 4, 59, "Title",ExpressionUUID->"d1ca6f13-3dc9-4753-8e1a-6160422fec5d"],
Cell[CellGroupData[{
Cell[862, 30, 159, 3, 41, "Chapter",ExpressionUUID->"a9651e77-d6d2-4a54-9ff9-ceba4ac659e9"],
Cell[CellGroupData[{
Cell[1046, 37, 214, 4, 40, "Section",ExpressionUUID->"21a9500e-0fd4-4842-9564-1968489f3e69"],
Cell[CellGroupData[{
Cell[1285, 45, 209, 4, 32, "Subsection",ExpressionUUID->"628262ab-3196-47b2-a3ee-b1a86753561f"],
Cell[1497, 51, 1993, 80, 90, "Text",ExpressionUUID->"5d898740-d519-4773-977e-b27f0c134867"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3527, 136, 168, 3, 32, "Subsection",ExpressionUUID->"e9fcd7ff-cf41-4af9-aa39-7c04f75ab090"],
Cell[3698, 141, 1989, 48, 75, "Input",ExpressionUUID->"31d7f42a-029d-48ad-a73a-d3afc3746dd0",
 InitializationCell->True],
Cell[5690, 191, 6990, 154, 384, "Input",ExpressionUUID->"12bae02c-f6f8-47ab-9ab5-f8b6ebb6a3ce",
 InitializationCell->True],
Cell[12683, 347, 8270, 177, 550, "Input",ExpressionUUID->"a7881061-cda5-4880-93b1-dea8fe53412d",
 InitializationCell->True],
Cell[20956, 526, 215, 4, 21, "Text",ExpressionUUID->"4b7150a1-3e2b-4d54-8583-e145c64bbdb7"],
Cell[21174, 532, 7222, 167, 419, "Input",ExpressionUUID->"8ae4d7a2-816c-4e08-b771-a4c50a04d943",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[28433, 704, 163, 3, 32, "Subsection",ExpressionUUID->"f9e4bb23-9086-490f-8fda-7611eadaefe8"],
Cell[28599, 709, 3336, 134, 186, "Text",ExpressionUUID->"5bc34d57-5092-488f-bae1-14c3bee8b61c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31972, 848, 166, 3, 32, "Subsection",ExpressionUUID->"2fdd19c4-ca4b-443e-b387-6be3f0815ee5"],
Cell[32141, 853, 16726, 356, 704, "Input",ExpressionUUID->"680049cd-df21-43fa-aec4-f635d6151bc8",
 InitializationCell->True],
Cell[48870, 1211, 2435, 61, 111, "Input",ExpressionUUID->"18e97e79-dd4c-4401-9d37-c7849cf9ddef",
 InitializationCell->True],
Cell[51308, 1274, 10913, 242, 550, "Input",ExpressionUUID->"8ce2d6db-5913-4394-bbf7-b9e791eb5e48",
 InitializationCell->True],
Cell[62224, 1518, 5657, 121, 253, "Input",ExpressionUUID->"c2db15b0-7525-46b7-aaf5-dbf41f2c0288",
 InitializationCell->True],
Cell[67884, 1641, 4807, 107, 253, "Input",ExpressionUUID->"0ad7f988-a0ee-4393-9822-32b09524ddfa",
 InitializationCell->True],
Cell[72694, 1750, 3857, 82, 206, "Input",ExpressionUUID->"78b93a45-c595-4808-a5eb-376b998b90df",
 InitializationCell->True],
Cell[76554, 1834, 11996, 253, 704, "Input",ExpressionUUID->"b7c7c195-cdf9-449c-857c-99e973ed93a0",
 InitializationCell->True],
Cell[88553, 2089, 11884, 239, 621, "Input",ExpressionUUID->"5e300b2f-fe01-4fc9-954f-c21b7ec61c67",
 InitializationCell->True],
Cell[100440, 2330, 160, 3, 21, "Text",ExpressionUUID->"bad21f20-1cb4-4ba6-9259-d16512a72e95"],
Cell[100603, 2335, 22231, 491, 1061, "Input",ExpressionUUID->"c35f797e-e117-4def-a9d9-6bf02dd6be56",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[122883, 2832, 166, 3, 40, "Section",ExpressionUUID->"3b519190-0088-4cf5-bc8c-eba64cf01b88"],
Cell[123052, 2837, 755, 13, 34, "Text",ExpressionUUID->"2f9d996a-488b-448b-9b6f-93d605c4f3b1"],
Cell[123810, 2852, 3502, 130, 269, "Text",ExpressionUUID->"afe146e3-a39f-4c83-8032-37d78234f413"],
Cell[CellGroupData[{
Cell[127337, 2986, 170, 3, 32, "Subsection",ExpressionUUID->"16185cfb-1168-46df-9947-90ec900808da"],
Cell[127510, 2991, 2176, 47, 87, "Input",ExpressionUUID->"415452a1-d59a-4d74-9820-866b75e2c230",
 InitializationCell->True],
Cell[129689, 3040, 3704, 92, 182, "Input",ExpressionUUID->"ecb51c45-66ee-4b33-a5df-86b968dffa26",
 InitializationCell->True],
Cell[133396, 3134, 6291, 131, 289, "Input",ExpressionUUID->"f34515cd-4153-4c7f-acc6-0f2fe37ad4bf",
 InitializationCell->True],
Cell[139690, 3267, 3906, 89, 253, "Input",ExpressionUUID->"414991df-16ec-4376-92c4-3229bd4568cc",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[143645, 3362, 152, 3, 40, "Section",ExpressionUUID->"d07c23e9-1d59-4e51-ac14-31d0660d35e2"],
Cell[143800, 3367, 2936, 105, 159, "Text",ExpressionUUID->"2b79f5e8-ba38-4784-a836-695d0d982284"],
Cell[CellGroupData[{
Cell[146761, 3476, 170, 3, 32, "Subsection",ExpressionUUID->"7a2c328c-5cb6-460a-b5c0-e91fb3daa4c4"],
Cell[146934, 3481, 3831, 88, 217, "Input",ExpressionUUID->"d141a225-5d1a-48c0-9caa-0ee703961ea8",
 InitializationCell->True],
Cell[150768, 3571, 13648, 304, 918, "Input",ExpressionUUID->"33941b84-ca61-4ed5-848e-153c6f0dacbc",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[164465, 3881, 153, 3, 40, "Section",ExpressionUUID->"491b6222-dc01-403a-a304-3cbf3275f40d"],
Cell[164621, 3886, 1144, 19, 90, "Text",ExpressionUUID->"b4a913ed-7967-409f-a21f-6f80d51b418a"],
Cell[CellGroupData[{
Cell[165790, 3909, 169, 3, 32, "Subsection",ExpressionUUID->"0ee80379-e846-4153-863b-d10af6117698"],
Cell[CellGroupData[{
Cell[165984, 3916, 175, 3, 27, "Subsubsection",ExpressionUUID->"43a419b4-327a-4f9d-b472-3109f0bf8cd2"],
Cell[166162, 3921, 5877, 148, 217, "Input",ExpressionUUID->"8b61756e-c976-4941-9fe1-9daa5014edf1",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[172076, 4074, 166, 3, 27, "Subsubsection",ExpressionUUID->"c06cd52b-d735-4565-a405-dc0b6fdce09b"],
Cell[172245, 4079, 1319, 56, 34, "Text",ExpressionUUID->"120e4a35-1c90-4db2-8893-523153c574db"],
Cell[173567, 4137, 15485, 363, 669, "Input",ExpressionUUID->"48f5ec51-854c-4046-8362-e0b917d47448",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[189089, 4505, 157, 3, 27, "Subsubsection",ExpressionUUID->"c0c25edf-5fe4-4181-ac55-0ce34bd48780"],
Cell[189249, 4510, 1273, 46, 62, "Text",ExpressionUUID->"a3b7e985-ca95-484a-bef1-3ab63905ac79"],
Cell[190525, 4558, 31490, 708, 1714, "Input",ExpressionUUID->"2cf6f8d1-ea3f-4462-bbc9-ba4759efb938",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[222088, 5274, 217, 4, 41, "Chapter",ExpressionUUID->"9764d62a-13d8-4273-861c-c2aab0ea6f24"],
Cell[CellGroupData[{
Cell[222330, 5282, 217, 4, 40, "Section",ExpressionUUID->"bab3d486-94e8-495d-b547-0903f2fcb95e"],
Cell[222550, 5288, 215, 5, 21, "Text",ExpressionUUID->"3c77fe03-00e4-4637-85bd-4d5bd8a422da"],
Cell[222768, 5295, 5394, 126, 514, "Input",ExpressionUUID->"478722ae-2361-477f-afb1-f1ba00b38f86",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[228187, 5425, 175, 3, 32, "Subsection",ExpressionUUID->"655942da-a426-4e7a-bd69-3f58f8e65073"],
Cell[228365, 5430, 327, 7, 21, "Text",ExpressionUUID->"f19f855a-7970-4d59-af39-e7454ccfb8e9"],
Cell[CellGroupData[{
Cell[228717, 5441, 2069, 54, 146, "Input",ExpressionUUID->"8f5cd4aa-f52d-499f-b235-79059991770d",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[230811, 5499, 219, 4, 16, "Print",ExpressionUUID->"21f1ae0f-e7a5-4a48-beac-294e208d13ce"],
Cell[231033, 5505, 199, 4, 16, "Print",ExpressionUUID->"f626858e-fcb2-41e6-91e4-f5035aec1f65"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[231305, 5517, 216, 4, 40, "Section",ExpressionUUID->"eaca36e0-bc36-4820-9969-a42cd00fd781"],
Cell[CellGroupData[{
Cell[231546, 5525, 170, 3, 32, "Subsection",ExpressionUUID->"af328258-decf-4582-854a-fe279af1645e"],
Cell[231719, 5530, 3839, 102, 253, "Input",ExpressionUUID->"a42c14cc-f192-4d04-8fdf-01492960e98c",
 InitializationCell->True],
Cell[235561, 5634, 2240, 63, 76, "Text",ExpressionUUID->"ac577951-24cd-4ded-9481-e7b49b4e162d"],
Cell[237804, 5699, 71938, 1467, 4647, "Input",ExpressionUUID->"2acc6ca5-763c-47d1-84db-b9bd9d839b1a",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[309791, 7172, 172, 3, 40, "Section",ExpressionUUID->"9c27967f-b76e-4636-b78f-dd471b343e8a"],
Cell[309966, 7177, 1629, 55, 62, "Text",ExpressionUUID->"28779695-93ea-4fcf-81dd-8e351471075f"],
Cell[CellGroupData[{
Cell[311620, 7236, 188, 3, 32, "Subsection",ExpressionUUID->"78f7f39d-97ee-4a22-bf00-82d896e96dd5"],
Cell[311811, 7241, 4289, 101, 194, "Input",ExpressionUUID->"c1393acd-a91a-4d56-b0b8-30b4c6ca87ac",
 InitializationCell->True],
Cell[316103, 7344, 3367, 81, 206, "Input",ExpressionUUID->"ba238ec1-0d0b-4e75-8354-4e3b9fc1e508",
 InitializationCell->True],
Cell[319473, 7427, 3952, 83, 289, "Input",ExpressionUUID->"41eadba4-aaab-4b73-a3f9-cd39b28aa352",
 InitializationCell->True],
Cell[323428, 7512, 1770, 49, 87, "Input",ExpressionUUID->"22abf173-27f9-45a6-ad85-cb338a46eeab",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[325247, 7567, 228, 4, 40, "Section",ExpressionUUID->"e848aa90-c17b-4546-b998-1e9f091280cb"],
Cell[325478, 7573, 2371, 73, 145, "Text",ExpressionUUID->"c27bdc3e-5b37-41e0-b989-0ba93f0e4bb9"],
Cell[CellGroupData[{
Cell[327874, 7650, 178, 3, 32, "Subsection",ExpressionUUID->"14e7312a-1791-43c5-a4d8-7223dab22de1"],
Cell[328055, 7655, 12435, 287, 562, "Input",ExpressionUUID->"c848c78a-2dc7-4cc4-802e-730ed5791ae5",
 InitializationCell->True],
Cell[340493, 7944, 2879, 64, 182, "Input",ExpressionUUID->"1f4ba2ad-1aa7-4791-97d3-6ec9bca61f46",
 InitializationCell->True],
Cell[343375, 8010, 1716, 44, 134, "Input",ExpressionUUID->"aa414c37-2c7c-456c-a906-b24c3658adf7",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[345152, 8061, 224, 4, 41, "Chapter",ExpressionUUID->"b017d5a2-87c9-4e7e-91df-a387a7036e0a"],
Cell[345379, 8067, 908, 23, 76, "Text",ExpressionUUID->"879fb1b6-80f7-4af9-acdc-84d8a1fff202"],
Cell[CellGroupData[{
Cell[346312, 8094, 159, 3, 40, "Section",ExpressionUUID->"7f3cc075-09af-44f8-9c44-b6957ce0d4ea"],
Cell[346474, 8099, 404, 8, 21, "Text",ExpressionUUID->"8e72bb1a-5b63-4b72-992d-0b45aa1a799e"],
Cell[346881, 8109, 1654, 29, 491, "Input",ExpressionUUID->"ef60b64b-229d-439b-8654-abdf197e1128",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[348572, 8143, 190, 3, 40, "Section",ExpressionUUID->"5fa14165-de6d-44b8-972e-c8fc98349efb"],
Cell[348765, 8148, 28357, 708, 882, "Input",ExpressionUUID->"a0ecf0cb-d276-4822-8154-4dad909a4353",
 InitializationCell->True],
Cell[377125, 8858, 12776, 301, 645, "Input",ExpressionUUID->"6ac13288-6c04-4331-b630-834e0148a95d",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

